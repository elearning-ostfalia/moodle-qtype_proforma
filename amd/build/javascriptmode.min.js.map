{"version":3,"file":"javascriptmode.min.js","sources":["../src/javascriptmode.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"qtype_proforma/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"qtype_proforma/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.defineMode(\"javascript\", function(config, parserConfig) {\n  var indentUnit = config.indentUnit;\n  var statementIndent = parserConfig.statementIndent;\n  var jsonldMode = parserConfig.jsonld;\n  var jsonMode = parserConfig.json || jsonldMode;\n  var isTS = parserConfig.typescript;\n  var wordRE = parserConfig.wordCharacters || /[\\w$\\xa1-\\uffff]/;\n\n  // Tokenizer\n\n  var keywords = function(){\n    function kw(type) {return {type: type, style: \"keyword\"};}\n    var A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\"), D = kw(\"keyword d\");\n    var operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"};\n\n    return {\n      \"if\": kw(\"if\"), \"while\": A, \"with\": A, \"else\": B, \"do\": B, \"try\": B, \"finally\": B,\n      \"return\": D, \"break\": D, \"continue\": D, \"new\": kw(\"new\"), \"delete\": C, \"void\": C, \"throw\": C,\n      \"debugger\": kw(\"debugger\"), \"var\": kw(\"var\"), \"const\": kw(\"var\"), \"let\": kw(\"var\"),\n      \"function\": kw(\"function\"), \"catch\": kw(\"catch\"),\n      \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n      \"in\": operator, \"typeof\": operator, \"instanceof\": operator,\n      \"true\": atom, \"false\": atom, \"null\": atom, \"undefined\": atom, \"NaN\": atom, \"Infinity\": atom,\n      \"this\": kw(\"this\"), \"class\": kw(\"class\"), \"super\": kw(\"atom\"),\n      \"yield\": C, \"export\": kw(\"export\"), \"import\": kw(\"import\"), \"extends\": C,\n      \"await\": C\n    };\n  }();\n\n  var isOperatorChar = /[+\\-*&%=<>!?|~^@]/;\n  var isJsonldKeyword = /^@(context|id|value|language|type|container|list|set|reverse|index|base|vocab|graph)\"/;\n\n  function readRegexp(stream) {\n    var escaped = false, next, inSet = false;\n    while ((next = stream.next()) != null) {\n      if (!escaped) {\n        if (next == \"/\" && !inSet) return;\n        if (next == \"[\") inSet = true;\n        else if (inSet && next == \"]\") inSet = false;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n  }\n\n  // Used as scratch variables to communicate multiple values without\n  // consing up tons of objects.\n  var type, content;\n  function ret(tp, style, cont) {\n    type = tp; content = cont;\n    return style;\n  }\n  function tokenBase(stream, state) {\n    var ch = stream.next();\n    if (ch == '\"' || ch == \"'\") {\n      state.tokenize = tokenString(ch);\n      return state.tokenize(stream, state);\n    } else if (ch == \".\" && stream.match(/^\\d[\\d_]*(?:[eE][+\\-]?[\\d_]+)?/)) {\n      return ret(\"number\", \"number\");\n    } else if (ch == \".\" && stream.match(\"..\")) {\n      return ret(\"spread\", \"meta\");\n    } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n      return ret(ch);\n    } else if (ch == \"=\" && stream.eat(\">\")) {\n      return ret(\"=>\", \"operator\");\n    } else if (ch == \"0\" && stream.match(/^(?:x[\\dA-Fa-f_]+|o[0-7_]+|b[01_]+)n?/)) {\n      return ret(\"number\", \"number\");\n    } else if (/\\d/.test(ch)) {\n      stream.match(/^[\\d_]*(?:n|(?:\\.[\\d_]*)?(?:[eE][+\\-]?[\\d_]+)?)?/);\n      return ret(\"number\", \"number\");\n    } else if (ch == \"/\") {\n      if (stream.eat(\"*\")) {\n        state.tokenize = tokenComment;\n        return tokenComment(stream, state);\n      } else if (stream.eat(\"/\")) {\n        stream.skipToEnd();\n        return ret(\"comment\", \"comment\");\n      } else if (expressionAllowed(stream, state, 1)) {\n        readRegexp(stream);\n        stream.match(/^\\b(([gimyus])(?![gimyus]*\\2))+\\b/);\n        return ret(\"regexp\", \"string-2\");\n      } else {\n        stream.eat(\"=\");\n        return ret(\"operator\", \"operator\", stream.current());\n      }\n    } else if (ch == \"`\") {\n      state.tokenize = tokenQuasi;\n      return tokenQuasi(stream, state);\n    } else if (ch == \"#\") {\n      stream.skipToEnd();\n      return ret(\"error\", \"error\");\n    } else if (ch == \"<\" && stream.match(\"!--\") || ch == \"-\" && stream.match(\"->\")) {\n      stream.skipToEnd()\n      return ret(\"comment\", \"comment\")\n    } else if (isOperatorChar.test(ch)) {\n      if (ch != \">\" || !state.lexical || state.lexical.type != \">\") {\n        if (stream.eat(\"=\")) {\n          if (ch == \"!\" || ch == \"=\") stream.eat(\"=\")\n        } else if (/[<>*+\\-]/.test(ch)) {\n          stream.eat(ch)\n          if (ch == \">\") stream.eat(ch)\n        }\n      }\n      return ret(\"operator\", \"operator\", stream.current());\n    } else if (wordRE.test(ch)) {\n      stream.eatWhile(wordRE);\n      var word = stream.current()\n      if (state.lastType != \".\") {\n        if (keywords.propertyIsEnumerable(word)) {\n          var kw = keywords[word]\n          return ret(kw.type, kw.style, word)\n        }\n        if (word == \"async\" && stream.match(/^(\\s|\\/\\*.*?\\*\\/)*[\\[\\(\\w]/, false))\n          return ret(\"async\", \"keyword\", word)\n      }\n      return ret(\"variable\", \"variable\", word)\n    }\n  }\n\n  function tokenString(quote) {\n    return function(stream, state) {\n      var escaped = false, next;\n      if (jsonldMode && stream.peek() == \"@\" && stream.match(isJsonldKeyword)){\n        state.tokenize = tokenBase;\n        return ret(\"jsonld-keyword\", \"meta\");\n      }\n      while ((next = stream.next()) != null) {\n        if (next == quote && !escaped) break;\n        escaped = !escaped && next == \"\\\\\";\n      }\n      if (!escaped) state.tokenize = tokenBase;\n      return ret(\"string\", \"string\");\n    };\n  }\n\n  function tokenComment(stream, state) {\n    var maybeEnd = false, ch;\n    while (ch = stream.next()) {\n      if (ch == \"/\" && maybeEnd) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      maybeEnd = (ch == \"*\");\n    }\n    return ret(\"comment\", \"comment\");\n  }\n\n  function tokenQuasi(stream, state) {\n    var escaped = false, next;\n    while ((next = stream.next()) != null) {\n      if (!escaped && (next == \"`\" || next == \"$\" && stream.eat(\"{\"))) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    return ret(\"quasi\", \"string-2\", stream.current());\n  }\n\n  var brackets = \"([{}])\";\n  // This is a crude lookahead trick to try and notice that we're\n  // parsing the argument patterns for a fat-arrow function before we\n  // actually hit the arrow token. It only works if the arrow is on\n  // the same line as the arguments and there's no strange noise\n  // (comments) in between. Fallback is to only notice when we hit the\n  // arrow, and not declare the arguments as locals for the arrow\n  // body.\n  function findFatArrow(stream, state) {\n    if (state.fatArrowAt) state.fatArrowAt = null;\n    var arrow = stream.string.indexOf(\"=>\", stream.start);\n    if (arrow < 0) return;\n\n    if (isTS) { // Try to skip TypeScript return type declarations after the arguments\n      var m = /:\\s*(?:\\w+(?:<[^>]*>|\\[\\])?|\\{[^}]*\\})\\s*$/.exec(stream.string.slice(stream.start, arrow))\n      if (m) arrow = m.index\n    }\n\n    var depth = 0, sawSomething = false;\n    for (var pos = arrow - 1; pos >= 0; --pos) {\n      var ch = stream.string.charAt(pos);\n      var bracket = brackets.indexOf(ch);\n      if (bracket >= 0 && bracket < 3) {\n        if (!depth) { ++pos; break; }\n        if (--depth == 0) { if (ch == \"(\") sawSomething = true; break; }\n      } else if (bracket >= 3 && bracket < 6) {\n        ++depth;\n      } else if (wordRE.test(ch)) {\n        sawSomething = true;\n      } else if (/[\"'\\/`]/.test(ch)) {\n        for (;; --pos) {\n          if (pos == 0) return\n          var next = stream.string.charAt(pos - 1)\n          if (next == ch && stream.string.charAt(pos - 2) != \"\\\\\") { pos--; break }\n        }\n      } else if (sawSomething && !depth) {\n        ++pos;\n        break;\n      }\n    }\n    if (sawSomething && !depth) state.fatArrowAt = pos;\n  }\n\n  // Parser\n\n  var atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true, \"regexp\": true, \"this\": true, \"jsonld-keyword\": true};\n\n  function JSLexical(indented, column, type, align, prev, info) {\n    this.indented = indented;\n    this.column = column;\n    this.type = type;\n    this.prev = prev;\n    this.info = info;\n    if (align != null) this.align = align;\n  }\n\n  function inScope(state, varname) {\n    for (var v = state.localVars; v; v = v.next)\n      if (v.name == varname) return true;\n    for (var cx = state.context; cx; cx = cx.prev) {\n      for (var v = cx.vars; v; v = v.next)\n        if (v.name == varname) return true;\n    }\n  }\n\n  function parseJS(state, style, type, content, stream) {\n    var cc = state.cc;\n    // Communicate our context to the combinators.\n    // (Less wasteful than consing up a hundred closures on every call.)\n    cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc; cx.style = style;\n\n    if (!state.lexical.hasOwnProperty(\"align\"))\n      state.lexical.align = true;\n\n    while(true) {\n      var combinator = cc.length ? cc.pop() : jsonMode ? expression : statement;\n      if (combinator(type, content)) {\n        while(cc.length && cc[cc.length - 1].lex)\n          cc.pop()();\n        if (cx.marked) return cx.marked;\n        if (type == \"variable\" && inScope(state, content)) return \"variable-2\";\n        return style;\n      }\n    }\n  }\n\n  // Combinator utils\n\n  var cx = {state: null, column: null, marked: null, cc: null};\n  function pass() {\n    for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n  }\n  function cont() {\n    pass.apply(null, arguments);\n    return true;\n  }\n  function inList(name, list) {\n    for (var v = list; v; v = v.next) if (v.name == name) return true\n    return false;\n  }\n  function register(varname) {\n    var state = cx.state;\n    cx.marked = \"def\";\n    if (state.context) {\n      if (state.lexical.info == \"var\" && state.context && state.context.block) {\n        // FIXME function decls are also not block scoped\n        var newContext = registerVarScoped(varname, state.context)\n        if (newContext != null) {\n          state.context = newContext\n          return\n        }\n      } else if (!inList(varname, state.localVars)) {\n        state.localVars = new Var(varname, state.localVars)\n        return\n      }\n    }\n    // Fall through means this is global\n    if (parserConfig.globalVars && !inList(varname, state.globalVars))\n      state.globalVars = new Var(varname, state.globalVars)\n  }\n  function registerVarScoped(varname, context) {\n    if (!context) {\n      return null\n    } else if (context.block) {\n      var inner = registerVarScoped(varname, context.prev)\n      if (!inner) return null\n      if (inner == context.prev) return context\n      return new Context(inner, context.vars, true)\n    } else if (inList(varname, context.vars)) {\n      return context\n    } else {\n      return new Context(context.prev, new Var(varname, context.vars), false)\n    }\n  }\n\n  function isModifier(name) {\n    return name == \"public\" || name == \"private\" || name == \"protected\" || name == \"abstract\" || name == \"readonly\"\n  }\n\n  // Combinators\n\n  function Context(prev, vars, block) { this.prev = prev; this.vars = vars; this.block = block }\n  function Var(name, next) { this.name = name; this.next = next }\n\n  var defaultVars = new Var(\"this\", new Var(\"arguments\", null))\n  function pushcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, false)\n    cx.state.localVars = defaultVars\n  }\n  function pushblockcontext() {\n    cx.state.context = new Context(cx.state.context, cx.state.localVars, true)\n    cx.state.localVars = null\n  }\n  function popcontext() {\n    cx.state.localVars = cx.state.context.vars\n    cx.state.context = cx.state.context.prev\n  }\n  popcontext.lex = true\n  function pushlex(type, info) {\n    var result = function() {\n      var state = cx.state, indent = state.indented;\n      if (state.lexical.type == \"stat\") indent = state.lexical.indented;\n      else for (var outer = state.lexical; outer && outer.type == \")\" && outer.align; outer = outer.prev)\n        indent = outer.indented;\n      state.lexical = new JSLexical(indent, cx.stream.column(), type, null, state.lexical, info);\n    };\n    result.lex = true;\n    return result;\n  }\n  function poplex() {\n    var state = cx.state;\n    if (state.lexical.prev) {\n      if (state.lexical.type == \")\")\n        state.indented = state.lexical.indented;\n      state.lexical = state.lexical.prev;\n    }\n  }\n  poplex.lex = true;\n\n  function expect(wanted) {\n    function exp(type) {\n      if (type == wanted) return cont();\n      else if (wanted == \";\" || type == \"}\" || type == \")\" || type == \"]\") return pass();\n      else return cont(exp);\n    };\n    return exp;\n  }\n\n  function statement(type, value) {\n    if (type == \"var\") return cont(pushlex(\"vardef\", value), vardef, expect(\";\"), poplex);\n    if (type == \"keyword a\") return cont(pushlex(\"form\"), parenExpr, statement, poplex);\n    if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n    if (type == \"keyword d\") return cx.stream.match(/^\\s*$/, false) ? cont() : cont(pushlex(\"stat\"), maybeexpression, expect(\";\"), poplex);\n    if (type == \"debugger\") return cont(expect(\";\"));\n    if (type == \"{\") return cont(pushlex(\"}\"), pushblockcontext, block, poplex, popcontext);\n    if (type == \";\") return cont();\n    if (type == \"if\") {\n      if (cx.state.lexical.info == \"else\" && cx.state.cc[cx.state.cc.length - 1] == poplex)\n        cx.state.cc.pop()();\n      return cont(pushlex(\"form\"), parenExpr, statement, poplex, maybeelse);\n    }\n    if (type == \"function\") return cont(functiondef);\n    if (type == \"for\") return cont(pushlex(\"form\"), forspec, statement, poplex);\n    if (type == \"class\" || (isTS && value == \"interface\")) {\n      cx.marked = \"keyword\"\n      return cont(pushlex(\"form\", type == \"class\" ? type : value), className, poplex)\n    }\n    if (type == \"variable\") {\n      if (isTS && value == \"declare\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else if (isTS && (value == \"module\" || value == \"enum\" || value == \"type\") && cx.stream.match(/^\\s*\\w/, false)) {\n        cx.marked = \"keyword\"\n        if (value == \"enum\") return cont(enumdef);\n        else if (value == \"type\") return cont(typename, expect(\"operator\"), typeexpr, expect(\";\"));\n        else return cont(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), block, poplex, poplex)\n      } else if (isTS && value == \"namespace\") {\n        cx.marked = \"keyword\"\n        return cont(pushlex(\"form\"), expression, statement, poplex)\n      } else if (isTS && value == \"abstract\") {\n        cx.marked = \"keyword\"\n        return cont(statement)\n      } else {\n        return cont(pushlex(\"stat\"), maybelabel);\n      }\n    }\n    if (type == \"switch\") return cont(pushlex(\"form\"), parenExpr, expect(\"{\"), pushlex(\"}\", \"switch\"), pushblockcontext,\n                                      block, poplex, poplex, popcontext);\n    if (type == \"case\") return cont(expression, expect(\":\"));\n    if (type == \"default\") return cont(expect(\":\"));\n    if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, maybeCatchBinding, statement, poplex, popcontext);\n    if (type == \"export\") return cont(pushlex(\"stat\"), afterExport, poplex);\n    if (type == \"import\") return cont(pushlex(\"stat\"), afterImport, poplex);\n    if (type == \"async\") return cont(statement)\n    if (value == \"@\") return cont(expression, statement)\n    return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n  }\n  function maybeCatchBinding(type) {\n    if (type == \"(\") return cont(funarg, expect(\")\"))\n  }\n  function expression(type, value) {\n    return expressionInner(type, value, false);\n  }\n  function expressionNoComma(type, value) {\n    return expressionInner(type, value, true);\n  }\n  function parenExpr(type) {\n    if (type != \"(\") return pass()\n    return cont(pushlex(\")\"), expression, expect(\")\"), poplex)\n  }\n  function expressionInner(type, value, noComma) {\n    if (cx.state.fatArrowAt == cx.stream.start) {\n      var body = noComma ? arrowBodyNoComma : arrowBody;\n      if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, expect(\"=>\"), body, popcontext);\n      else if (type == \"variable\") return pass(pushcontext, pattern, expect(\"=>\"), body, popcontext);\n    }\n\n    var maybeop = noComma ? maybeoperatorNoComma : maybeoperatorComma;\n    if (atomicTypes.hasOwnProperty(type)) return cont(maybeop);\n    if (type == \"function\") return cont(functiondef, maybeop);\n    if (type == \"class\" || (isTS && value == \"interface\")) { cx.marked = \"keyword\"; return cont(pushlex(\"form\"), classExpression, poplex); }\n    if (type == \"keyword c\" || type == \"async\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeop);\n    if (type == \"operator\" || type == \"spread\") return cont(noComma ? expressionNoComma : expression);\n    if (type == \"[\") return cont(pushlex(\"]\"), arrayLiteral, poplex, maybeop);\n    if (type == \"{\") return contCommasep(objprop, \"}\", null, maybeop);\n    if (type == \"quasi\") return pass(quasi, maybeop);\n    if (type == \"new\") return cont(maybeTarget(noComma));\n    if (type == \"import\") return cont(expression);\n    return cont();\n  }\n  function maybeexpression(type) {\n    if (type.match(/[;\\}\\)\\],]/)) return pass();\n    return pass(expression);\n  }\n\n  function maybeoperatorComma(type, value) {\n    if (type == \",\") return cont(expression);\n    return maybeoperatorNoComma(type, value, false);\n  }\n  function maybeoperatorNoComma(type, value, noComma) {\n    var me = noComma == false ? maybeoperatorComma : maybeoperatorNoComma;\n    var expr = noComma == false ? expression : expressionNoComma;\n    if (type == \"=>\") return cont(pushcontext, noComma ? arrowBodyNoComma : arrowBody, popcontext);\n    if (type == \"operator\") {\n      if (/\\+\\+|--/.test(value) || isTS && value == \"!\") return cont(me);\n      if (isTS && value == \"<\" && cx.stream.match(/^([^>]|<.*?>)*>\\s*\\(/, false))\n        return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, me);\n      if (value == \"?\") return cont(expression, expect(\":\"), expr);\n      return cont(expr);\n    }\n    if (type == \"quasi\") { return pass(quasi, me); }\n    if (type == \";\") return;\n    if (type == \"(\") return contCommasep(expressionNoComma, \")\", \"call\", me);\n    if (type == \".\") return cont(property, me);\n    if (type == \"[\") return cont(pushlex(\"]\"), maybeexpression, expect(\"]\"), poplex, me);\n    if (isTS && value == \"as\") { cx.marked = \"keyword\"; return cont(typeexpr, me) }\n    if (type == \"regexp\") {\n      cx.state.lastType = cx.marked = \"operator\"\n      cx.stream.backUp(cx.stream.pos - cx.stream.start - 1)\n      return cont(expr)\n    }\n  }\n  function quasi(type, value) {\n    if (type != \"quasi\") return pass();\n    if (value.slice(value.length - 2) != \"${\") return cont(quasi);\n    return cont(expression, continueQuasi);\n  }\n  function continueQuasi(type) {\n    if (type == \"}\") {\n      cx.marked = \"string-2\";\n      cx.state.tokenize = tokenQuasi;\n      return cont(quasi);\n    }\n  }\n  function arrowBody(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expression);\n  }\n  function arrowBodyNoComma(type) {\n    findFatArrow(cx.stream, cx.state);\n    return pass(type == \"{\" ? statement : expressionNoComma);\n  }\n  function maybeTarget(noComma) {\n    return function(type) {\n      if (type == \".\") return cont(noComma ? targetNoComma : target);\n      else if (type == \"variable\" && isTS) return cont(maybeTypeArgs, noComma ? maybeoperatorNoComma : maybeoperatorComma)\n      else return pass(noComma ? expressionNoComma : expression);\n    };\n  }\n  function target(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorComma); }\n  }\n  function targetNoComma(_, value) {\n    if (value == \"target\") { cx.marked = \"keyword\"; return cont(maybeoperatorNoComma); }\n  }\n  function maybelabel(type) {\n    if (type == \":\") return cont(poplex, statement);\n    return pass(maybeoperatorComma, expect(\";\"), poplex);\n  }\n  function property(type) {\n    if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n  }\n  function objprop(type, value) {\n    if (type == \"async\") {\n      cx.marked = \"property\";\n      return cont(objprop);\n    } else if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      if (value == \"get\" || value == \"set\") return cont(getterSetter);\n      var m // Work around fat-arrow-detection complication for detecting typescript typed arrow params\n      if (isTS && cx.state.fatArrowAt == cx.stream.start && (m = cx.stream.match(/^\\s*:\\s*/, false)))\n        cx.state.fatArrowAt = cx.stream.pos + m[0].length\n      return cont(afterprop);\n    } else if (type == \"number\" || type == \"string\") {\n      cx.marked = jsonldMode ? \"property\" : (cx.style + \" property\");\n      return cont(afterprop);\n    } else if (type == \"jsonld-keyword\") {\n      return cont(afterprop);\n    } else if (isTS && isModifier(value)) {\n      cx.marked = \"keyword\"\n      return cont(objprop)\n    } else if (type == \"[\") {\n      return cont(expression, maybetype, expect(\"]\"), afterprop);\n    } else if (type == \"spread\") {\n      return cont(expressionNoComma, afterprop);\n    } else if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(objprop);\n    } else if (type == \":\") {\n      return pass(afterprop)\n    }\n  }\n  function getterSetter(type) {\n    if (type != \"variable\") return pass(afterprop);\n    cx.marked = \"property\";\n    return cont(functiondef);\n  }\n  function afterprop(type) {\n    if (type == \":\") return cont(expressionNoComma);\n    if (type == \"(\") return pass(functiondef);\n  }\n  function commasep(what, end, sep) {\n    function proceed(type, value) {\n      if (sep ? sep.indexOf(type) > -1 : type == \",\") {\n        var lex = cx.state.lexical;\n        if (lex.info == \"call\") lex.pos = (lex.pos || 0) + 1;\n        return cont(function(type, value) {\n          if (type == end || value == end) return pass()\n          return pass(what)\n        }, proceed);\n      }\n      if (type == end || value == end) return cont();\n      if (sep && sep.indexOf(\";\") > -1) return pass(what)\n      return cont(expect(end));\n    }\n    return function(type, value) {\n      if (type == end || value == end) return cont();\n      return pass(what, proceed);\n    };\n  }\n  function contCommasep(what, end, info) {\n    for (var i = 3; i < arguments.length; i++)\n      cx.cc.push(arguments[i]);\n    return cont(pushlex(end, info), commasep(what, end), poplex);\n  }\n  function block(type) {\n    if (type == \"}\") return cont();\n    return pass(statement, block);\n  }\n  function maybetype(type, value) {\n    if (isTS) {\n      if (type == \":\") return cont(typeexpr);\n      if (value == \"?\") return cont(maybetype);\n    }\n  }\n  function maybetypeOrIn(type, value) {\n    if (isTS && (type == \":\" || value == \"in\")) return cont(typeexpr)\n  }\n  function mayberettype(type) {\n    if (isTS && type == \":\") {\n      if (cx.stream.match(/^\\s*\\w+\\s+is\\b/, false)) return cont(expression, isKW, typeexpr)\n      else return cont(typeexpr)\n    }\n  }\n  function isKW(_, value) {\n    if (value == \"is\") {\n      cx.marked = \"keyword\"\n      return cont()\n    }\n  }\n  function typeexpr(type, value) {\n    if (value == \"keyof\" || value == \"typeof\" || value == \"infer\") {\n      cx.marked = \"keyword\"\n      return cont(value == \"typeof\" ? expressionNoComma : typeexpr)\n    }\n    if (type == \"variable\" || value == \"void\") {\n      cx.marked = \"type\"\n      return cont(afterType)\n    }\n    if (value == \"|\" || value == \"&\") return cont(typeexpr)\n    if (type == \"string\" || type == \"number\" || type == \"atom\") return cont(afterType);\n    if (type == \"[\") return cont(pushlex(\"]\"), commasep(typeexpr, \"]\", \",\"), poplex, afterType)\n    if (type == \"{\") return cont(pushlex(\"}\"), commasep(typeprop, \"}\", \",;\"), poplex, afterType)\n    if (type == \"(\") return cont(commasep(typearg, \")\"), maybeReturnType, afterType)\n    if (type == \"<\") return cont(commasep(typeexpr, \">\"), typeexpr)\n  }\n  function maybeReturnType(type) {\n    if (type == \"=>\") return cont(typeexpr)\n  }\n  function typeprop(type, value) {\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\"\n      return cont(typeprop)\n    } else if (value == \"?\" || type == \"number\" || type == \"string\") {\n      return cont(typeprop)\n    } else if (type == \":\") {\n      return cont(typeexpr)\n    } else if (type == \"[\") {\n      return cont(expect(\"variable\"), maybetypeOrIn, expect(\"]\"), typeprop)\n    } else if (type == \"(\") {\n      return pass(functiondecl, typeprop)\n    }\n  }\n  function typearg(type, value) {\n    if (type == \"variable\" && cx.stream.match(/^\\s*[?:]/, false) || value == \"?\") return cont(typearg)\n    if (type == \":\") return cont(typeexpr)\n    if (type == \"spread\") return cont(typearg)\n    return pass(typeexpr)\n  }\n  function afterType(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n    if (value == \"|\" || type == \".\" || value == \"&\") return cont(typeexpr)\n    if (type == \"[\") return cont(typeexpr, expect(\"]\"), afterType)\n    if (value == \"extends\" || value == \"implements\") { cx.marked = \"keyword\"; return cont(typeexpr) }\n    if (value == \"?\") return cont(typeexpr, expect(\":\"), typeexpr)\n  }\n  function maybeTypeArgs(_, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeexpr, \">\"), poplex, afterType)\n  }\n  function typeparam() {\n    return pass(typeexpr, maybeTypeDefault)\n  }\n  function maybeTypeDefault(_, value) {\n    if (value == \"=\") return cont(typeexpr)\n  }\n  function vardef(_, value) {\n    if (value == \"enum\") {cx.marked = \"keyword\"; return cont(enumdef)}\n    return pass(pattern, maybetype, maybeAssign, vardefCont);\n  }\n  function pattern(type, value) {\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(pattern) }\n    if (type == \"variable\") { register(value); return cont(); }\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"[\") return contCommasep(eltpattern, \"]\");\n    if (type == \"{\") return contCommasep(proppattern, \"}\");\n  }\n  function proppattern(type, value) {\n    if (type == \"variable\" && !cx.stream.match(/^\\s*:/, false)) {\n      register(value);\n      return cont(maybeAssign);\n    }\n    if (type == \"variable\") cx.marked = \"property\";\n    if (type == \"spread\") return cont(pattern);\n    if (type == \"}\") return pass();\n    if (type == \"[\") return cont(expression, expect(']'), expect(':'), proppattern);\n    return cont(expect(\":\"), pattern, maybeAssign);\n  }\n  function eltpattern() {\n    return pass(pattern, maybeAssign)\n  }\n  function maybeAssign(_type, value) {\n    if (value == \"=\") return cont(expressionNoComma);\n  }\n  function vardefCont(type) {\n    if (type == \",\") return cont(vardef);\n  }\n  function maybeelse(type, value) {\n    if (type == \"keyword b\" && value == \"else\") return cont(pushlex(\"form\", \"else\"), statement, poplex);\n  }\n  function forspec(type, value) {\n    if (value == \"await\") return cont(forspec);\n    if (type == \"(\") return cont(pushlex(\")\"), forspec1, poplex);\n  }\n  function forspec1(type) {\n    if (type == \"var\") return cont(vardef, forspec2);\n    if (type == \"variable\") return cont(forspec2);\n    return pass(forspec2)\n  }\n  function forspec2(type, value) {\n    if (type == \")\") return cont()\n    if (type == \";\") return cont(forspec2)\n    if (value == \"in\" || value == \"of\") { cx.marked = \"keyword\"; return cont(expression, forspec2) }\n    return pass(expression, forspec2)\n  }\n  function functiondef(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondef);}\n    if (type == \"variable\") {register(value); return cont(functiondef);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, statement, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondef)\n  }\n  function functiondecl(type, value) {\n    if (value == \"*\") {cx.marked = \"keyword\"; return cont(functiondecl);}\n    if (type == \"variable\") {register(value); return cont(functiondecl);}\n    if (type == \"(\") return cont(pushcontext, pushlex(\")\"), commasep(funarg, \")\"), poplex, mayberettype, popcontext);\n    if (isTS && value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, functiondecl)\n  }\n  function typename(type, value) {\n    if (type == \"keyword\" || type == \"variable\") {\n      cx.marked = \"type\"\n      return cont(typename)\n    } else if (value == \"<\") {\n      return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex)\n    }\n  }\n  function funarg(type, value) {\n    if (value == \"@\") cont(expression, funarg)\n    if (type == \"spread\") return cont(funarg);\n    if (isTS && isModifier(value)) { cx.marked = \"keyword\"; return cont(funarg); }\n    if (isTS && type == \"this\") return cont(maybetype, maybeAssign)\n    return pass(pattern, maybetype, maybeAssign);\n  }\n  function classExpression(type, value) {\n    // Class expressions may have an optional name.\n    if (type == \"variable\") return className(type, value);\n    return classNameAfter(type, value);\n  }\n  function className(type, value) {\n    if (type == \"variable\") {register(value); return cont(classNameAfter);}\n  }\n  function classNameAfter(type, value) {\n    if (value == \"<\") return cont(pushlex(\">\"), commasep(typeparam, \">\"), poplex, classNameAfter)\n    if (value == \"extends\" || value == \"implements\" || (isTS && type == \",\")) {\n      if (value == \"implements\") cx.marked = \"keyword\";\n      return cont(isTS ? typeexpr : expression, classNameAfter);\n    }\n    if (type == \"{\") return cont(pushlex(\"}\"), classBody, poplex);\n  }\n  function classBody(type, value) {\n    if (type == \"async\" ||\n        (type == \"variable\" &&\n         (value == \"static\" || value == \"get\" || value == \"set\" || (isTS && isModifier(value))) &&\n         cx.stream.match(/^\\s+[\\w$\\xa1-\\uffff]/, false))) {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (type == \"variable\" || cx.style == \"keyword\") {\n      cx.marked = \"property\";\n      return cont(isTS ? classfield : functiondef, classBody);\n    }\n    if (type == \"number\" || type == \"string\") return cont(isTS ? classfield : functiondef, classBody);\n    if (type == \"[\")\n      return cont(expression, maybetype, expect(\"]\"), isTS ? classfield : functiondef, classBody)\n    if (value == \"*\") {\n      cx.marked = \"keyword\";\n      return cont(classBody);\n    }\n    if (isTS && type == \"(\") return pass(functiondecl, classBody)\n    if (type == \";\" || type == \",\") return cont(classBody);\n    if (type == \"}\") return cont();\n    if (value == \"@\") return cont(expression, classBody)\n  }\n  function classfield(type, value) {\n    if (value == \"?\") return cont(classfield)\n    if (type == \":\") return cont(typeexpr, maybeAssign)\n    if (value == \"=\") return cont(expressionNoComma)\n    var context = cx.state.lexical.prev, isInterface = context && context.info == \"interface\"\n    return pass(isInterface ? functiondecl : functiondef)\n  }\n  function afterExport(type, value) {\n    if (value == \"*\") { cx.marked = \"keyword\"; return cont(maybeFrom, expect(\";\")); }\n    if (value == \"default\") { cx.marked = \"keyword\"; return cont(expression, expect(\";\")); }\n    if (type == \"{\") return cont(commasep(exportField, \"}\"), maybeFrom, expect(\";\"));\n    return pass(statement);\n  }\n  function exportField(type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(expect(\"variable\")); }\n    if (type == \"variable\") return pass(expressionNoComma, exportField);\n  }\n  function afterImport(type) {\n    if (type == \"string\") return cont();\n    if (type == \"(\") return pass(expression);\n    return pass(importSpec, maybeMoreImports, maybeFrom);\n  }\n  function importSpec(type, value) {\n    if (type == \"{\") return contCommasep(importSpec, \"}\");\n    if (type == \"variable\") register(value);\n    if (value == \"*\") cx.marked = \"keyword\";\n    return cont(maybeAs);\n  }\n  function maybeMoreImports(type) {\n    if (type == \",\") return cont(importSpec, maybeMoreImports)\n  }\n  function maybeAs(_type, value) {\n    if (value == \"as\") { cx.marked = \"keyword\"; return cont(importSpec); }\n  }\n  function maybeFrom(_type, value) {\n    if (value == \"from\") { cx.marked = \"keyword\"; return cont(expression); }\n  }\n  function arrayLiteral(type) {\n    if (type == \"]\") return cont();\n    return pass(commasep(expressionNoComma, \"]\"));\n  }\n  function enumdef() {\n    return pass(pushlex(\"form\"), pattern, expect(\"{\"), pushlex(\"}\"), commasep(enummember, \"}\"), poplex, poplex)\n  }\n  function enummember() {\n    return pass(pattern, maybeAssign);\n  }\n\n  function isContinuedStatement(state, textAfter) {\n    return state.lastType == \"operator\" || state.lastType == \",\" ||\n      isOperatorChar.test(textAfter.charAt(0)) ||\n      /[,.]/.test(textAfter.charAt(0));\n  }\n\n  function expressionAllowed(stream, state, backUp) {\n    return state.tokenize == tokenBase &&\n      /^(?:operator|sof|keyword [bcd]|case|new|export|default|spread|[\\[{}\\(,;:]|=>)$/.test(state.lastType) ||\n      (state.lastType == \"quasi\" && /\\{\\s*$/.test(stream.string.slice(0, stream.pos - (backUp || 0))))\n  }\n\n  // Interface\n\n  return {\n    startState: function(basecolumn) {\n      var state = {\n        tokenize: tokenBase,\n        lastType: \"sof\",\n        cc: [],\n        lexical: new JSLexical((basecolumn || 0) - indentUnit, 0, \"block\", false),\n        localVars: parserConfig.localVars,\n        context: parserConfig.localVars && new Context(null, null, false),\n        indented: basecolumn || 0\n      };\n      if (parserConfig.globalVars && typeof parserConfig.globalVars == \"object\")\n        state.globalVars = parserConfig.globalVars;\n      return state;\n    },\n\n    token: function(stream, state) {\n      if (stream.sol()) {\n        if (!state.lexical.hasOwnProperty(\"align\"))\n          state.lexical.align = false;\n        state.indented = stream.indentation();\n        findFatArrow(stream, state);\n      }\n      if (state.tokenize != tokenComment && stream.eatSpace()) return null;\n      var style = state.tokenize(stream, state);\n      if (type == \"comment\") return style;\n      state.lastType = type == \"operator\" && (content == \"++\" || content == \"--\") ? \"incdec\" : type;\n      return parseJS(state, style, type, content, stream);\n    },\n\n    indent: function(state, textAfter) {\n      if (state.tokenize == tokenComment) return CodeMirror.Pass;\n      if (state.tokenize != tokenBase) return 0;\n      var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical, top\n      // Kludge to prevent 'maybelse' from blocking lexical scope pops\n      if (!/^\\s*else\\b/.test(textAfter)) for (var i = state.cc.length - 1; i >= 0; --i) {\n        var c = state.cc[i];\n        if (c == poplex) lexical = lexical.prev;\n        else if (c != maybeelse) break;\n      }\n      while ((lexical.type == \"stat\" || lexical.type == \"form\") &&\n             (firstChar == \"}\" || ((top = state.cc[state.cc.length - 1]) &&\n                                   (top == maybeoperatorComma || top == maybeoperatorNoComma) &&\n                                   !/^[,\\.=+\\-*:?[\\(]/.test(textAfter))))\n        lexical = lexical.prev;\n      if (statementIndent && lexical.type == \")\" && lexical.prev.type == \"stat\")\n        lexical = lexical.prev;\n      var type = lexical.type, closing = firstChar == type;\n\n      if (type == \"vardef\") return lexical.indented + (state.lastType == \"operator\" || state.lastType == \",\" ? lexical.info.length + 1 : 0);\n      else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n      else if (type == \"form\") return lexical.indented + indentUnit;\n      else if (type == \"stat\")\n        return lexical.indented + (isContinuedStatement(state, textAfter) ? statementIndent || indentUnit : 0);\n      else if (lexical.info == \"switch\" && !closing && parserConfig.doubleIndentSwitch != false)\n        return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? indentUnit : 2 * indentUnit);\n      else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n      else return lexical.indented + (closing ? 0 : indentUnit);\n    },\n\n    electricInput: /^\\s*(?:case .*?:|default:|\\{|\\})$/,\n    blockCommentStart: jsonMode ? null : \"/*\",\n    blockCommentEnd: jsonMode ? null : \"*/\",\n    blockCommentContinue: jsonMode ? null : \" * \",\n    lineComment: jsonMode ? null : \"//\",\n    fold: \"brace\",\n    closeBrackets: \"()[]{}''\\\"\\\"``\",\n\n    helperType: jsonMode ? \"json\" : \"javascript\",\n    jsonldMode: jsonldMode,\n    jsonMode: jsonMode,\n\n    expressionAllowed: expressionAllowed,\n\n    skipExpression: function(state) {\n      var top = state.cc[state.cc.length - 1]\n      if (top == expression || top == expressionNoComma) state.cc.pop()\n    }\n  };\n});\n\nCodeMirror.registerHelper(\"wordChars\", \"javascript\", /[\\w$]/);\n\nCodeMirror.defineMIME(\"text/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"text/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/x-javascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/ecmascript\", \"javascript\");\nCodeMirror.defineMIME(\"application/json\", {name: \"javascript\", json: true});\nCodeMirror.defineMIME(\"application/x-json\", {name: \"javascript\", json: true});\nCodeMirror.defineMIME(\"application/ld+json\", {name: \"javascript\", jsonld: true});\nCodeMirror.defineMIME(\"text/typescript\", { name: \"javascript\", typescript: true });\nCodeMirror.defineMIME(\"application/typescript\", { name: \"javascript\", typescript: true });\n\n});\n"],"names":["mod","CodeMirror","defineMode","config","parserConfig","type","content","indentUnit","statementIndent","jsonldMode","jsonld","jsonMode","json","isTS","typescript","wordRE","wordCharacters","keywords","kw","style","A","B","C","D","operator","atom","isOperatorChar","isJsonldKeyword","ret","tp","cont","tokenBase","stream","state","quote","ch","next","tokenize","escaped","peek","match","test","eat","tokenComment","skipToEnd","expressionAllowed","inSet","readRegexp","current","tokenQuasi","lexical","eatWhile","word","lastType","propertyIsEnumerable","maybeEnd","brackets","findFatArrow","fatArrowAt","arrow","string","indexOf","start","m","exec","slice","index","depth","sawSomething","pos","charAt","bracket","atomicTypes","JSLexical","indented","column","align","prev","info","this","inScope","varname","v","localVars","name","cx","context","vars","marked","cc","pass","i","arguments","length","push","apply","inList","list","register","block","newContext","registerVarScoped","Var","globalVars","inner","Context","isModifier","defaultVars","pushcontext","pushblockcontext","popcontext","pushlex","result","indent","outer","lex","poplex","expect","wanted","exp","statement","value","vardef","parenExpr","maybeexpression","pop","maybeelse","functiondef","forspec","className","enumdef","typename","typeexpr","pattern","expression","maybelabel","maybeCatchBinding","afterExport","afterImport","funarg","expressionInner","expressionNoComma","noComma","body","arrowBodyNoComma","arrowBody","commasep","maybeop","maybeoperatorNoComma","maybeoperatorComma","hasOwnProperty","classExpression","arrayLiteral","contCommasep","objprop","quasi","targetNoComma","target","maybeTypeArgs","maybeTarget","me","expr","property","backUp","continueQuasi","_","getterSetter","afterprop","maybetype","what","end","sep","proceed","maybetypeOrIn","mayberettype","isKW","afterType","typeprop","typearg","maybeReturnType","functiondecl","typeparam","maybeTypeDefault","maybeAssign","vardefCont","eltpattern","proppattern","_type","forspec1","forspec2","classNameAfter","classBody","classfield","maybeFrom","exportField","importSpec","maybeMoreImports","maybeAs","enummember","startState","basecolumn","token","sol","indentation","eatSpace","parseJS","textAfter","Pass","top","firstChar","c","closing","isContinuedStatement","doubleIndentSwitch","electricInput","blockCommentStart","blockCommentEnd","blockCommentContinue","lineComment","fold","closeBrackets","helperType","skipExpression","registerHelper","defineMIME","exports","module","require","define","amd"],"mappings":"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"}