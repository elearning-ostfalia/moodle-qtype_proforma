{"version":3,"file":"FileViewer.min.js","sources":["../src/FileViewer.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * The ProFormA Question CodeMirror support functions\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2022 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     K.Borm <k.borm[at]ostfalia.de>\n */\n\n\n/** NOTE:\n * Currently creating subfolders is disabled, because the moodle question filesaver does not support it */\n\n/* eslint-disable no-unused-vars */\n\n// Use these imports for Moodle\n// -----------------------------\nimport \"./MoodleSyncer\";\n\nimport './codemirror-global';\nimport CodeMirror from \"./codemirror\";\n\nimport \"./clike\";\nimport \"./python\";\nimport \"./javascriptmode\"; // renamed from javascript\nimport \"./xml\";\nimport \"./matchbrackets\";\nimport \"./closebrackets\";\nimport \"./active-line\";\n\n// import Config from 'core/config';\nimport * as Str from 'core/str';\n// import * as notification from 'core/notification';\nimport {get_string as getString} from 'core/str';\n\n// Use this for editortest.html\n// -----------------------------\n/*\nimport './codemirror-global.js';\nimport \"./FakeSyncer.js\";\n\nimport CodeMirror from \"./codemirror/src/codemirror.js\";\nimport \"./codemirror/mode/clike/clike.js\";\nimport \"./codemirror/mode/javascript/javascript.js\";\nimport \"./codemirror/mode/python/python.js\";\nimport \"./codemirror/mode/xml/xml.js\";\nimport \"./codemirror/addon/selection/active-line.js\";\nimport \"./codemirror/addon/edit/matchbrackets.js\";\nimport \"./codemirror/addon/edit/closebrackets.js\";\nclass Config { // Fake\n    static wwwroot = '';\n    static sesskey = '';\n}\nclass FakeAjaxResult {\n    constructor(result) {\n        this.result = result;\n    }\n    done(callback) {\n        callback(this.result);\n        return this;\n    }\n    fail(callback) {\n        return this;\n    }\n}\nclass Str {\n    static get_strings(dict) {\n        console.log('fake get_strings');\n        console.log(dict);\n        let result = [];\n        let index = 0;\n        dict.forEach(function(item, index, array) {\n            // var value = dict[key];\n            result[index] = item['key'];\n        });\n        console.log(result);\n        return new FakeAjaxResult(result);\n        // return FakeAjaxResult.create(result);\n        // return Promise.resolve(result);\n    }\n}\nfunction getString(text) { return text; }\n*/\n\n\n// 'use strict'; ecma6 code is always strict\n\n\n// TODO:\n// - Split View: Problem mit Flackern\n// - Theme wechseln\n// - Menu erstmal raus - auÃŸer zum Wechseln des Themes\n// - Andere Browser testen\n\n/**\n * TreeNode\n */\nclass TreeNode {\n    constructor(name) {\n        this.name = name;\n        this.element = undefined; // DOM element\n        this.parent = undefined; // parent Treenode\n\n        this.boundHandleContextMenu = event => {\n            // console.log(event)\n            event.preventDefault();\n            event.stopPropagation(); // otherwise parent node handles event, too\n\n            this.setContextMenu();\n            if (this.getFramework().menu === undefined) {\n                return;\n            }\n            const showMenu = ({ top, left }) => {\n                this.getFramework().menu.style.left = `${left}px`;\n                this.getFramework().menu.style.top = `${top}px`;\n                // this.getFramework().menu.style.setProperty('--mouse-x', event.clientX + 'px');\n                // this.getFramework().menu.style.setProperty('--mouse-y', event.clientY + 'px');\n                this.getFramework().toggleContextmenu('show');\n            };\n\n            // console.log(`contextmenu: ${event}`);\n\n            const origin = {\n                left: event.pageX,\n                top: event.pageY\n            };\n            // console.log(`${event.pageX}px ${event.pageY}px`);\n            // console.log(event);\n            showMenu(origin);\n        };\n        this.handleDragStart = event => {\n            if (event.dataTransfer.getData('treeitem').length == 0) {\n                // console.log('dragstart: ' + this.getPath());\n                event.dataTransfer.setData('treeitem', this.getPath());\n            }\n        };\n    }\n    getPath() {\n        return this.parent === undefined? this.name : this.parent.getPath() + '/' + this.name ;\n    }\n    // Override\n    setContextMenu() {\n        TreeNode.menu = undefined;\n    }\n    displayInTreeview(domnode) {\n        const li = document.createElement('li');\n        li.setAttribute('role', 'treeitem');\n        li.setAttribute('draggable', 'true');\n        domnode.appendChild(li);\n        li.addEventListener('contextmenu', this.boundHandleContextMenu);\n        li.addEventListener('dragstart', this.handleDragStart);\n        this.element = li; // Store element\n        return li;\n    }\n\n    getFramework() {\n        return this.parent.getFramework();\n    }\n\n    async alreadyExists(name) {\n        let text = await getString('alreadyexists', 'qtype_proforma', name);\n        alert(text);\n    }\n\n    async confirmAndDo(prompt, callback, name) {\n        let text = await getString(prompt, 'qtype_proforma', name);\n        if (confirm(text)) {\n            callback();\n        }\n    }\n}\n\n/**\n * FileNode\n */\nexport class FileNode extends TreeNode {\n    static getEditorModeFromFilename(filename) {\n        const extension = filename.split('.').pop().toLowerCase();\n        switch (extension) {\n            case \"java\":\n                return \"text/x-java\";\n            case \"py\":\n                return \"text/x-python\";\n            case \"setlx\":\n                return \"text/text\";\n            case \"c\":\n                return \"text/x-csrc\";\n            case \"cpp\":\n            case \"cxx\":\n            case \"h\":\n            case \"hpp\":\n                return \"text/x-c++src\";\n            case \"xml\":\n                return \"application/xml\";\n            case \"html\":\n                return \"text/html\";\n            case \"sql\":\n                return \"text/x-sql\";\n            case \"js\":\n                return \"text/javascript\";\n            case \"php\":\n                return \"application/x-httpd-php\";\n            case 'txt':\n            case 'log':\n            case 'md':\n            case 'csv':\n                return \"text\";\n        }\n    }\n\n    constructor(name) {\n        super(name);\n        this.filecontent = '';\n        this.mode = FileNode.getEditorModeFromFilename(this.name);\n        this.handleDelete = event => {\n            this.getFramework().handleClick(event);\n            let context = this;\n            this.confirmAndDo('deletefile', function() {\n                context.getFramework().deleteEditor(context);\n                context.getFramework().syncer.deleteFileOrFolder(context.getPath());\n                context.element.remove();\n                context.parent.files = context.parent.files.filter(item => item !== context);\n            }, this.getPath());\n        };\n        this.boundHandleRename = event => {\n            this.getFramework().handleClick(event);\n            let thecontext = this;\n            Str.get_strings([\n                {key: 'enterfilename', component: 'qtype_proforma'},\n            ]).done(function(strings) {\n                let name = prompt(strings[0] + ':', thecontext.name);\n                if (name !== null && name.length > 0) {\n                    if (!thecontext.parent.isNameChildUnique(name)) {\n                        thecontext.alreadyExists(name);\n                        return;\n                    }\n                    const oldpath = thecontext.getPath();\n                    thecontext.name = name;\n                    thecontext.element.innerHTML = name;\n                    const newpath = thecontext.getPath();\n                    thecontext.getFramework().syncer.renameFile(oldpath, newpath);\n                    // thecontext.element.tabIndex = 0;\n                }\n            }) //. fail(notification.exception)\n                .fail(function (response) {\n                    console.error(response);\n                });\n        };\n        this.boundHandleClick = event => {\n            this.getFramework().toggleContextmenu(\"hide\");\n            this.getFramework().setFocusTo(this.element);\n            event.stopPropagation();\n            // event.preventDefault();\n        };\n        this.handleDoubleClick = event => {\n            this.getFramework().toggleContextmenu(\"hide\");\n            // document.getElementById('last_action').value = this.name;\n            if (this.filecontent != undefined) {\n                this.getFramework().switchEditorTo(this);\n            }\n            this.getFramework().setFocusTo(this.element);\n            event.stopPropagation();\n            // event.preventDefault();\n        };\n    }\n    getContent() {\n        if (this.filecontent.length == 0) {\n            const p1 = this.getFramework().syncer.download(this.getPath());\n            // console.log('Fileviewer promise result');\n            // console.log(p1);\n            p1.then(result => {\n                // console.log('Downloaded text is: '+ result);\n                this.filecontent = result;\n                return result;\n            });\n            return p1;\n        } else {\n            return Promise.resolve(this.filecontent);\n        }\n    }\n    updateContent(newcontent, async) {\n        this.filecontent = newcontent;\n        return this.getFramework().syncer.update(this.getPath(), newcontent, async);\n    }\n    displayInTreeview(domnode) {\n        const li = super.displayInTreeview(domnode);\n        li.innerHTML = this.name;\n        li.classList.add('doc');\n\n        li.addEventListener('dblclick', this.handleDoubleClick);\n        li.addEventListener('click', this.boundHandleClick);\n\n//        li.addEventListener('mouseover', this.handleMouseOver);\n//        li.addEventListener('mouseout', this.handleMouseOut);\n    }\n\n    setContextMenu() {\n        console.log('FileNode setContextMenu');\n        // this is something from codemirror in promise done function???\n        // so this is renamed\n        let thecontext = this;\n        Str.get_strings([\n            {key: 'delete', component: 'qtype_proforma'},\n            {key: 'rename', component: 'qtype_proforma'}\n        ]).done(function(strings) {\n            thecontext.getFramework().createContextMenu([\n                [strings[0] + '...', thecontext.handleDelete], // Delete\n                [strings[1], thecontext.boundHandleRename] // Rename\n            ]);\n        }) /*.fail(notification.exception)*/\n            .fail(function (response) {\n                console.error(response);\n        });\n    }\n}\n\n/**\n * FolderNode\n */\nexport class FolderNode extends TreeNode {\n    constructor(name) {\n        super(name);\n        this.files = []; // Empty list of files.\n        this.folders = []; // Empty list of folders.\n        this.handleDelete = event => {\n            this.getFramework().handleClick(event);\n            let context = this;\n            this.confirmAndDo('deletefolder', function() {\n                context.getFramework().syncer.deleteFileOrFolder(context.getPath() + '/.');\n                context.element.remove();\n                context.parent.folders = context.parent.folders.filter(item => item !== context);\n                // console.log(RootNode.projects);\n            }, this.getPath());\n        };\n        this.boundHandleNewFile = event => {\n            this.getFramework().handleClick(event);\n            let thecontext = this;\n            Str.get_strings([\n                {key: 'enterfilename', component: 'qtype_proforma'},\n            ]).done(function(strings) {\n                let filename = prompt(strings[0] + ':', \"\");\n                if (filename !== null && filename.length > 0) {\n                    if (!thecontext.isNameChildUnique(filename)) {\n                        thecontext.alreadyExists(filename);\n                        // alert(filename + ' already exists');\n                        return;\n                    }\n                    let node = new FileNode(filename);\n                    thecontext.appendFile(node);\n                    node.displayInTreeview(thecontext.element.querySelector('[role=\"group\"]'));\n                    thecontext.expand(true);\n                    thecontext.getFramework().syncer.newfile(node.getPath());\n                }\n            }) //. fail(notification.exception)\n                .fail(function (response) {\n                    console.error(response);\n                });\n        };\n        this.boundHandleLoadFile = event => {\n            this.getFramework().handleClick(event);\n            let input = document.createElement('input');\n            input.type = 'file';\n            input.onchange = e => {\n                let file = e.target.files[0];\n                this._addFileFromOs(file, true);\n            };\n            input.click();\n        };\n        this.handleDragOver = event => {\n            event.preventDefault();\n        };\n        this.handleDragEnter = () =>  {\n            if (this.getFramework().readOnly) {\n                return;\n            }\n            this.element.querySelector('.name').classList.add('dragover');\n        };\n        this.handleDragLeave = () => {\n            if (this.getFramework().readOnly) {\n                return;\n            }\n            this.element.querySelector('.name').classList.remove('dragover');\n        };\n\n        this.handleDrop = event => {\n            event.preventDefault();\n            event.stopPropagation();\n            this.getFramework().toggleContextmenu(\"hide\");\n            if (this.getFramework().readOnly) {\n                return;\n            }\n            this.element.querySelector('.name').classList.remove('dragover');\n            const path = event.dataTransfer.getData('treeitem');\n            if (path !== undefined && path.length > 0) {\n                console.log('drop ' + path + ' onto ' + this.getPath());\n                // Node element from tree\n                const node = this.getFramework().findNodeByPath(path);\n                if (node !== undefined && !this.isNameChildUnique(node.name)) {\n                    // TODO: wenn der Ordner schon existiert, sollte nur der Inhalt gemergt werden\n                    // alert(node.name + ' already exists');\n                    this.alreadyExists(node.name);\n                    return;\n                }\n                if (node instanceof FolderNode) {\n                    // remove folder in old parent\n                    const oldpath = node.getPath();\n                    node.parent.folders = node.parent.folders.filter(item => item !== node);\n                    // add folder to this\n                    this.appendFolder(node);\n                    this.element.querySelector('ul').appendChild(node.element);\n                    // node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\n                    this.expand(true);\n                    this.getFramework().syncer.renameFolder(oldpath, node.getPath());\n                } else if (node instanceof FileNode) {\n                    const oldpath = node.getPath();\n                    node.parent.files = node.parent.files.filter(item => item !== node);\n                    // add folder to this\n                    this.appendFile(node);\n                    // node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\n                    this.element.querySelector('ul').appendChild(node.element);\n                    this.expand(true);\n                    this.getFramework().syncer.renameFile(oldpath, node.getPath());\n                } else {\n                    console.error('node cannot be moved');\n                    console.log(node);\n                }\n            } else {\n                // External file or folder\n                console.log('drop file/folder');\n                let items = event.dataTransfer.items;\n                for (let i=0; i<items.length; i++) {\n                    let item = items[i].webkitGetAsEntry();  //Might be renamed to GetAsEntry()\n                    if (item) {\n                        this._getFileTree(item);\n                    }\n                }\n            }\n        };\n        this.boundHandleNewFolder = event => {\n            this.getFramework().handleClick(event);\n            let thecontext = this;\n            Str.get_strings([\n                {key: 'enterfoldername', component: 'qtype_proforma'},\n            ]).done(function(strings) {\n                let foldername = prompt(strings[0] + ':', \"\");\n                if (foldername !== null && foldername.length > 0) {\n                    if (!thecontext.isNameChildUnique(foldername)) {\n                        thecontext.alreadyExists(foldername);\n                        // alert(foldername + ' already exists');\n                        return;\n                    }\n                    let node = new FolderNode(foldername);\n                    thecontext.appendFolder(node);\n                    node.displayInTreeview(thecontext.element.querySelector('[role=\"group\"]'));\n                    thecontext.expand(true);\n                    console.log('create new folder ' + node.getPath());\n                    thecontext.getFramework().syncer.mkdir(node.getPath());\n                }\n\n            }) //. fail(notification.exception)\n                .fail(function (response) {\n                    console.error(response);\n                });\n        };\n\n        this.boundHandleClick = event => {\n            console.log('FolderNode click');\n            this.getFramework().toggleContextmenu(\"hide\");\n            // Problem: child nodes also get focus\n            this.getFramework().setFocusTo(this.element);\n            event.stopPropagation();\n            event.preventDefault();\n        };\n        this.boundHandleRename = event => {\n            this.getFramework().handleClick(event);\n            let thecontext = this;\n            Str.get_strings([\n                {key: 'enterfoldername', component: 'qtype_proforma'},\n            ]).done(function(strings) {\n                let name = prompt(strings[0] + ':', thecontext.name);\n                if (name !== null && name.length > 0) {\n                    if (!thecontext.parent.isNameChildUnique(name)) {\n                        thecontext.alreadyExists(name);\n                        return;\n                    }\n                    const oldpath = thecontext.getPath() + '/.';\n                    thecontext.name = name;\n                    thecontext.element.querySelector('.name').innerHTML = name;\n                    const newpath = thecontext.getPath() + '/.';\n                    thecontext.getFramework().syncer.renameFolder(oldpath, newpath);\n                }\n            }) //. fail(notification.exception)\n                .fail(function (response) {\n                    console.error(response);\n                });\n        };\n        this.toggleExpand = () => {\n            this.element.setAttribute('aria-expanded', !this.isExpanded());\n        };\n        this.handleMouseOver = event => {\n            event.currentTarget.classList.add('hover');\n        };\n        this.handleMouseOut = event => {\n            event.currentTarget.classList.remove('hover');\n        };\n    }\n    findNodeByPath(path) {\n        let first = path.shift();\n        for (let i = 0; i < this.files.length; i++) {\n            if (this.files[i].name === first) {\n                return this.files[i];\n            }\n        }\n        for (let i = 0; i < this.folders.length; i++) {\n            if (this.folders[i].name === first) {\n                if (path.length == 0) {\n                    return this.folders[i];\n                } else {\n                    return this.folders[i].findNodeByPath(path);\n                }\n            }\n        }\n        return undefined;\n    }\n    createPath(path) {\n        // console.log(path);\n        let first = path.shift();\n        // console.log('foldernode: create node for <' + first + '>');\n        if (first === undefined || first.length == 0) {\n            if (path.lenghth > 0) {\n                console.error('Bug in creating path');\n            }\n            return this;\n        }\n        for (let i = 0; i < this.folders.length; i++) {\n            if (this.folders[i].name === first) {\n                // Subpath exists\n                if (path.length == 0) {\n                    // full path exists => return folder object.\n                    return this.folders[i];\n                } else {\n                    return this.folders[i].createPath(path);\n                }\n            }\n        }\n        // Path does not exist => create.\n        // console.log('create folder node for ' + first);\n        let node = new FolderNode(first);\n        this.appendFolder(node);\n        return node.createPath(path);\n    }\n\n    isNameChildUnique(name) {\n        for (let i = 0; i < this.files.length; i++) {\n            if (name.localeCompare(this.files[i].name) == 0 ) {\n                return false;\n            }\n        }\n        for (let i = 0; i < this.folders.length; i++) {\n            if (name.localeCompare(this.folders[i].name) == 0 ) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    _getFileTree(item, path = undefined) {\n        const recurseinit = (path === undefined);\n        path = path || \"\";\n        if (item.isFile) {\n            item.file(file => {\n                // Show file content only if no path given\n                // i.e. no recursion\n                this._addFileFromOs(file, recurseinit);\n            });\n        } else if (item.isDirectory) {\n/*******\n            // Create new folder\n            let node = new FolderNode(item.name);\n            this.appendFolder(node);\n            node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\n            this.expand(true);\n            this.getFramework().syncer.mkdir(node.getPath());\n\n            // Get folder contents\n            // console.log(item.fullPath);\n            let dirReader = item.createReader();\n            dirReader.readEntries(entries => {\n                for (let i=0; i < entries.length; i++) {\n                    node._getFileTree(entries[i], path + item.name + \"/\");\n                }\n            });\n */\n        }\n    }\n\n    _addFileFromOs(file, show = false) {\n        if (!this.isNameChildUnique(file.name)) {\n            this.alreadyExists(file.name);\n            return;\n        }\n        let node = new FileNode(file.name);\n        let reader = new FileReader();\n        reader.readAsText(file,'UTF-8');\n        reader.onload = readerEvent => {\n            let content = readerEvent.target.result; // this is the content!\n            node.filecontent = content;\n            if (show) {\n                this.getFramework().addEditor(node);\n                this.getFramework().setFocusTo(node.element);\n            }\n            this.getFramework().syncer.upload(node.getPath(), file);\n        };\n        this.appendFile(node);\n        node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\n        this.expand(true);\n    }\n    expand(doit) {\n        this.element.setAttribute('aria-expanded', doit);\n    }\n\n    displayInTreeview(domnode) {\n        const li = super.displayInTreeview(domnode);\n        li.setAttribute('aria-expanded', 'false');\n\n        const span2 = document.createElement('span');\n        span2.addEventListener('dblclick', this.toggleExpand);\n        span2.innerHTML = this.name;\n        span2.classList.add('name');\n        span2.addEventListener('click', this.boundHandleClick);\n        span2.addEventListener('dragenter', this.handleDragEnter);\n        span2.addEventListener('dragleave', this.handleDragLeave);\n        span2.addEventListener('drop', this.handleDrop);\n        span2.addEventListener('dragover', this.handleDragOver);\n        li.appendChild(span2);\n\n        const subul = document.createElement('ul');\n        subul.setAttribute('role', 'group');\n        li.appendChild(subul);\n\n        for (let j = 0; j < this.folders.length; j++) {\n            this.folders[j].displayInTreeview(subul);\n        }\n        for (let j = 0; j < this.files.length; j++) {\n            this.files[j].displayInTreeview(subul);\n        }\n    }\n\n    isExpanded() {\n        return this.element.getAttribute('aria-expanded') === 'true';\n    }\n    setContextMenu() {\n        console.log('FolderNode setContextMenu');\n        let thecontext = this; // This is changed to something codemirror in promise\n        Str.get_strings([\n            {key: 'newemptyfile', component: 'qtype_proforma'},\n            {key: 'loadfile', component: 'qtype_proforma'},\n            {key: 'newfolder', component: 'qtype_proforma'},\n            {key: 'rename', component: 'qtype_proforma'},\n            {key: 'delete', component: 'qtype_proforma'}\n        ]).done(function(strings) {\n            thecontext.getFramework().createContextMenu([\n                [strings[0] + '...', thecontext.boundHandleNewFile], // newemptyfile\n                [strings[1] + '...', thecontext.boundHandleLoadFile], // loadfile\n//***                [strings[2] + '...', thecontext.boundHandleNewFolder], // newfolder\n                [strings[3], thecontext.boundHandleRename], // Rename\n                [strings[4] + '...', thecontext.handleDelete], // delete\n            ]);\n        }) //. fail(notification.exception)\n            .fail(function (response) {\n                console.error(response);\n            });\n    }\n\n    appendFile(node) { this.files.push(node); node.parent = this; }\n    appendFolder(node) { this.folders.push(node); node.parent = this; }\n}\n\n/**\n * RootNode\n */\nexport class RootNode extends FolderNode {\n    constructor(name, framework) {\n        super(name);\n        console.log('CREATE root node ' + name);\n        this.framework = framework;\n        framework.roots.push(this);\n    }\n    getFramework() {\n        return this.framework;\n    }\n    getPath() {\n        return '';\n    }\n    setContextMenu() {\n        console.log('RootNode setContextMenu');\n        let thecontext = this; // This is changed to something codemirror in promise\n        Str.get_strings([\n            {key: 'newemptyfile', component: 'qtype_proforma'},\n            {key: 'loadfile', component: 'qtype_proforma'},\n            {key: 'newfolder', component: 'qtype_proforma'}\n        ]).done(function(strings) {\n            thecontext.getFramework().createContextMenu([\n                [strings[0] + '...', thecontext.boundHandleNewFile], // newemptyfile\n                [strings[1] + '...', thecontext.boundHandleLoadFile], // loadfile\n//***                [strings[2] + '...', thecontext.boundHandleNewFolder], // newfolder\n            ]);\n        }) //. fail(notification.exception)\n            .fail(function (response) {\n                console.error(response);\n            });\n    }\n\n}\n\nclass EditorItem {\n    constructor(fileNode, textarea, tabDomNode, readOnly) {\n        console.log('Create Codemirror ' + readOnly);\n\n        this.fileNode = fileNode;\n        this.editor = CodeMirror.fromTextArea(textarea, {\n            tabMode: \"indent\",\n            indentUnit: 4,\n            matchBrackets: true,\n            autoCloseBrackets: true,\n            styleActiveLine: true,\n            readOnly: readOnly,\n            extraKeys: {'Tab': function(){ this.editor.replaceSelection('    ' , 'end');}},\n            lineNumbers: true\n            //viewportMargin: Infinity\n        });\n        this.editor.setSize(\"100%\", \"100%\");\n        // RootNode.editor.setOption('theme', \"blackboard\");\n        this.editor.setOption('theme', \"darcula\");\n        // this.editor.setOption('theme', \"abcdef\");\n        this.tab = tabDomNode;\n    }\n}\n\nclass EditorStack {\n    static maxEditors = 12;\n    constructor(donNodeEditor, donNodeTabs, framework) {\n        this.editortextarea = donNodeEditor.querySelector('textarea');\n        // Initialise readonly editor\n        this.editor = CodeMirror.fromTextArea(this.editortextarea, {\n            tabMode: \"indent\",\n            indentUnit: 4,\n            matchBrackets: true,\n            autoCloseBrackets: true,\n            styleActiveLine: true,\n            readOnly: true,\n            extraKeys: {'Tab': function(){ this.editor.replaceSelection('    ' , 'end');}},\n            lineNumbers: true\n            //viewportMargin: Infinity\n        });\n        this.editor.setSize(\"100%\", \"100%\");\n        // RootNode.editor.setOption('theme', \"blackboard\");\n        this.editor.setOption('theme', \"darcula\");\n        // this.editor.setOption('theme', \"abcdef\");\n\n        this.activeNode = undefined; // activeNode associated with Codemirror\n\n        this.nodes = []; // all filenodes with open editor\n        // this.donNodeEditor = donNodeEditor;\n        this.donNodeTabs = donNodeTabs;\n        this.focus = undefined; // the tab that has got the focus\n        this.framework = framework;\n    }\n\n    _switchTo(item, index = undefined) {\n        if (index === undefined) {\n            // figure out value of i\n            for (index = 0; index < this.nodes.length; index++) {\n                if (this.nodes[index] === item) {\n                    break;\n                }\n            }\n        }\n        console.log('item index is ' + index);\n\n        // move on top\n        this.nodes.splice(index, 1);\n        this.nodes.push(item);\n\n        // Hide all editors\n        for (index = 0; index < this.nodes.length; index++) {\n            this.nodes[index].editor.getWrapperElement().style.display = 'none';\n        }\n\n        item.editor.getWrapperElement().style.display = 'block';\n        item.editor.refresh();\n        item.editor.focus();\n\n        // Switch focus\n        if (this.focus !== undefined) {\n            this.focus.classList.remove('focus');\n            let focusClose = this.focus.querySelector('.close');\n            focusClose.style.display = 'none';\n        }\n        item.tab.classList.add('focus');\n        item.tab.querySelector('.close').style.display = 'inline';\n        this.focus = item.tab;\n    }\n\n    _delete(item) {\n        for (let i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i] === item) {\n                console.log('** Delete item from editor');\n                // Read back (modified) content\n                this.nodes[i].fileNode.updateContent(this.nodes[i].editor.getValue());\n\n                this.nodes.splice(i, 1);\n                // Delete Codemirror element (in order to avoid resource leak)\n                item.editor.getWrapperElement().remove();\n                if (this.nodes.length > 0) {\n                    this._switchTo(this.nodes[this.nodes.length-1], this.nodes.length-1);\n                }\n                return;\n            }\n        }\n        console.error('could not find filenode');\n    }\n\n    deleteEditor(filenode) {\n        for (let i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i].fileNode === filenode) {\n                this.nodes[i].tab.remove();\n                this.nodes[i].tab = undefined;\n                this._delete(this.nodes[i]);\n                return;\n            }\n        }\n    }\n    addEditor(filenode) {\n        if (EditorStack.maxEditors == this.nodes.length) {\n            alert('maximum number of editors reached');\n            return;\n        }\n        if (filenode.mode !== undefined) {\n            // Create tab\n            // let tab = document.createElement('span');\n            let tab = document.createElement('button');\n\n            // Mode is known => display new text content\n            let item = new EditorItem(filenode, this.editortextarea, tab, this.framework.readOnly);\n            filenode.getContent()\n                .then(text => {\n                    if (text === undefined) {\n                        text = '???';\n                    }\n                    item.editor.setValue(text);\n                    item.editor.setOption(\"mode\", filenode.mode);\n                    // item.editor.setOption(\"readOnly\", this.readOnly);\n                    item.editor.refresh(); // for old version of Codemirror\n                })\n                .catch( error => {\n                    console.error('error:', error);\n                    alert(error);\n                });\n\n            tab.classList.add('tab');\n            let close = document.createElement('span');\n            close.classList.add('close');\n            close.innerHTML = '&#x2715';\n            close.addEventListener('click', event => {\n                event.preventDefault();\n                event.stopPropagation();\n                this._delete(item);\n                close.parentElement.remove();\n            });\n            tab.innerHTML = filenode.name;\n            tab.append(close);\n            tab.addEventListener('click', event => {\n                event.preventDefault();\n                event.stopPropagation();\n                this._switchTo(item);\n            });\n            this.donNodeTabs.append(tab);\n\n            this.nodes.push(item);\n            this._switchTo(item);\n        } else {\n            console.error('unknown file mode');\n        }\n    }\n\n    switchEditorTo(filenode) {\n        // Check if filenode is already in stack\n        for (let i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i].fileNode === filenode) {\n                // filenode is in list\n                this._switchTo(this.nodes[i], i);\n                return;\n            }\n        }\n        this.addEditor(filenode);\n    }\n\n    handleResize() {\n        if (this.nodes.length > 0) {\n            // Call refresh for current Codemirror\n            // in order to update text window. Otherwise\n            // text is cut off\n            this.nodes[this.nodes.length-1].editor.refresh();\n        }\n    }\n    save() {\n        // Save all\n        // (we could save current if file is saved on switching)\n        // this.issaved = false;\n        console.log('currently open editors ' + this.nodes.length.toString());\n        console.timeStamp('save');\n        console.time('save');\n\n        for (let i = 0; i < this.nodes.length; i++) {\n            this.nodes[i].fileNode.updateContent(this.nodes[i].editor.getValue(), false);\n        }\n\n        /*\n        let promises = [];\n        for (let i = 0; i < this.nodes.length; i++) {\n            console.log('add promise to list ' + i.toString());\n            promises.push(this.nodes[i].fileNode.updateContent(this.nodes[i].editor.getValue()));\n        }\n        return Promise.all(promises).\n            then(() => {\n                console.log('all files saved');\n                console.timeStamp('save');\n                console.timeEnd('save');\n                this.issaved = true;\n\n            // return true;\n                // alert('look');\n            })\n            .catch( error => {\n                console.timeStamp('save');\n                console.timeEnd('save');\n                console.error('error:', error);\n                alert(error);\n            });*/\n        console.log('all files saved');\n        console.timeStamp('save');\n        console.timeEnd('save');\n    }\n/*    needssaving() {\n        for (let i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i].fileNode.filecontent != this.nodes[i].editor.getValue()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    issaved() {\n        return this.issaved;\n    }*/\n}\n\n\nexport class Framework {\n    constructor() {\n        this.roots = []; // all root nodes\n        this.syncer = undefined;\n        this.editorstack = undefined;\n        this.mainDomNode = undefined;\n        this.menu = undefined;\n        this.menuVisible = false;\n        this.focus = undefined;\n        this.readOnly = false;\n    }\n\n    buildFramework(domnode) {\n        console.log('buildFramework');\n        domnode.innerHTML = `<div class=\"ide\" style=\"display: flex;flex-direction: column; align-items: stretch;\n    resize: vertical;\n    overflow: hidden;\n    min-height: 150px\">\n    <!--<div class=\"menu\" style=\"flex: none\">menu</div>-->\n\n    <div class=\"body\" style=\"display: flex; flex-direction: row; flex: 1 1 0; min-height: 0\">\n        <!--<div class=\"fake\" style=\"min-width: 100px; flex: 1 0 0; overflow: auto;\">Fake element</div> -->\n        <div class=\"explorer\" style=\"min-width: 20px; flex: 1 0 0; overflow: auto;\">\n        </div>\n        <div class=\"resize\"></div>\n        <div class=\"canvas\" style=\"min-width: 20px;  flex: 0 0 75%; display: flex; flex-direction: row;\">\n            <!-- set flex-basis = 50% for 2 two columns and 100%V for one column -->\n            <div class=\"canvascol\" style=\"display: flex; flex-direction: column; flex: 1 1 50%; overflow: hidden;\">\n                <div class=\"tabs\" style=\"flex: none; \">\n                </div>\n                <div class=\"editor\" style=\"flex: 1 1 0; overflow: hidden;\">\n                    <textarea></textarea>\n                </div>\n            </div>\n            <!--\n            <div class=\"resize\"></div>\n            <div class=\"canvascol\" style=\"display: flex; flex-direction: column; flex: 1 1 50%; min-height: 0;\">\n                <div class=\"tabs\" style=\"flex: none; \">\n                </div>\n                <div class=\"editor\" style=\"flex: 1 1 0; min-height: 0; overflow: hidden;\">\n                    <textarea></textarea>\n                </div>\n            </div> --> \n        </div>\n    </div>\n\n    <!--<div class=\"status\" style=\"flex: none\">status</div>-->\n</div>\n<p><!--<label>File or Folder Selected: <input id=\"last_action\" type=\"text\" size=\"15\" readonly=\"\"></label>--></p>\n`;\n        // We only need one context menu that must be placed outside\n        // all other elements (esp. those that are positioned relative)\n        // in order to have the menu placed correctly.\n        let contextmenu = `<div class=\"contextmenu\" id=\"context-menu\">\n    <ul class=\"menu-options\">\n        <li class=\"menu-option\">New file</li>\n        <li class=\"menu-option\">New folder</li>\n        <li class=\"menu-option\">Delete...</li>\n    </ul>\n</div>`;\n        const menu = document.createElement('div');\n        menu.innerHTML = contextmenu;\n        let body = document.querySelector('body');\n        body.appendChild(menu);\n\n        this.mainDomNode = domnode;\n        this.editorstack = new EditorStack(domnode.querySelector('.editor'),\n            domnode.querySelector('.tabs'), this);\n    }\n\n    init(node, syncer, readOnly) {\n        this.readOnly = readOnly;\n        const initSplit = resizer =>  {\n            // from https://htmldom.dev/create-resizable-split-views/\n            const before = resizer.previousElementSibling;\n            const after = resizer.nextElementSibling;\n\n            // The current position of mouse\n            let x = 0;\n\n            let oldValue = 0;\n            let mousedown = false;\n\n            const removeSelection = () => {\n                resizer.style.removeProperty('cursor');\n                document.body.style.removeProperty('cursor');\n\n                before.style.removeProperty('user-select');\n                before.style.removeProperty('pointer-events');\n\n                if (after != undefined) {\n                    after.style.removeProperty('user-select');\n                    after.style.removeProperty('pointer-events');\n                }\n            };\n            // Handle the mousedown event\n            // that's triggered when user drags the resizer\n            const mouseDownHandler = e => {\n                // Get the current mouse position\n                x = e.clientX;\n\n                this.toggleContextmenu(\"hide\");\n                oldValue = before.getBoundingClientRect().width;\n                mousedown = true;\n                // Attach the listeners to `document`\n                document.addEventListener('mousemove', mouseMoveHandler);\n                document.addEventListener('mouseup', mouseUpHandler);\n\n                removeSelection();\n            };\n\n            const mouseMoveHandler = e =>  {\n                if (mousedown) {\n                    // How far the mouse has been moved\n                    const dx = e.clientX - x;\n                    let newBasis = ((oldValue + dx) * 100) / resizer.parentNode.getBoundingClientRect().width;\n                    before.style.flexBasis =`${newBasis}%`;\n                    if (after != undefined) {\n                        after.style.flexBasis =`${100-newBasis}%`;\n                    } else {\n                        resizer.parentNode.getBoundingClientRect().width =\n                            resizer.parentNode.getBoundingClientRect().width - dx;\n                    }\n                    removeSelection();\n                } else {\n                    mouseUpHandler();\n                }\n            };\n\n            const mouseUpHandler = function () {\n                removeSelection();\n\n                // Remove the handlers of `mousemove` and `mouseup`\n                document.removeEventListener('mousemove', mouseMoveHandler);\n                document.removeEventListener('mouseup', mouseUpHandler);\n            };\n            // Attach the handler\n            resizer.addEventListener('mousedown', mouseDownHandler);\n        };\n\n        const fileviewer = node.querySelector('.explorer');\n        // Prevent browser from opening a dropped file in a new tab.\n        fileviewer.addEventListener('drop', event => {\n            event.preventDefault();\n        });\n        fileviewer.addEventListener('dragover', event => {\n            event.preventDefault();\n        });\n\n        let ul = document.createElement(\"ul\");\n        ul.setAttribute('role', 'tree');\n        ul.setAttribute('aria-labelledby', 'fileviewer');\n        fileviewer.appendChild(ul);\n\n        this.syncer = syncer;\n        // build folder/file structure.\n        /* this.syncer.dir(); Da fehlen die Dateien */\n        this.createPath('/'); // needed when no files come from syncer.\n        this.syncer.list(this)\n            .then (() => {\n                console.log('DISPLAY ROOTS');\n                console.log(this.roots);\n                for (let i = 0; i < this.roots.length; i++) {\n                    let root = this.roots[i];\n                    root.displayInTreeview(ul);\n                    root.toggleExpand();\n                }\n            });\n\n        // Hide context menu on every left click\n        window.addEventListener(\"click\", e => {\n            this.handleClick();\n        });\n\n        let el = this.mainDomNode.querySelector('.ide');\n        const observer = new ResizeObserver(() => {\n            this.editorstack.handleResize();\n        });\n        observer.observe(el);\n        initSplit(node.querySelector('.ide .body > .resize'),  'w');\n        // initSplit(node.querySelector('.ide .canvas > .resize'), 'w');\n\n        // Read context menu strings in order to have them in\n        // the browser cache and the menu can open immediately\n        /*\n        Str.get_strings([\n            {key: 'delete', component: 'qtype_proforma'},\n            {key: 'rename', component: 'qtype_proforma'},\n            {key: 'loadfile', component: 'qtype_proforma'},\n            {key: 'newemptyfile', component: 'qtype_proforma'},\n            {key: 'newfolder', component: 'qtype_proforma'},\n        ]).done(function(strings) {\n            console.log('context menu string read.');\n            console.log(strings);\n        }).fail(function (response) {\n            console.error(response);\n        }); */\n\n        /*\n        RootNode.syncer.sendRequest('mkdir', 'newproformafolder');\n        RootNode.syncer.sendRequest('dir'); */\n    }\n\n    switchEditorTo(filenode) {\n        this.editorstack.switchEditorTo(filenode);\n    }\n    addEditor(filenode) {\n        this.editorstack.addEditor(filenode);\n    }\n    deleteEditor(filenode) {\n        this.editorstack.deleteEditor(filenode);\n    }\n\n    findNodeByPath(path) {\n        console.log('find <' + path + '>');\n        if (path.substr(0,1) != '/') {\n            console.error('path does not start with /: ' + path);\n            return undefined;\n        }\n\n        let pathsplit = path.split('/');\n        pathsplit.shift(); // first element is always empty\n        // let first = pathsplit.shift();\n        let root = this.roots[0];\n        return root.findNodeByPath(pathsplit);\n\n        /*\n        for (let i = 0; i < this.roots.length; i++) {\n            if (this.roots[i].name === first) {\n                return this.roots[i].findNodeByPath(pathsplit);\n            }\n        }\n        return undefined; */\n    }\n\n    createPath(path) {\n        console.log('Framework: create folder ' + path);\n        // Assume first char is always /\n        if (path[0] !== '/') {\n            console.error('first char in path is not /: ' + path);\n        }\n        let pathsplit = path.split('/');\n        pathsplit.shift(); // first element in array is always empty\n\n        let root;\n        let context = this;\n        if (this.roots.length === 0) {\n            root = new RootNode('Submission', context);\n            return root.createPath(pathsplit);\n/*\n            getString('rootsubmission', 'qtype_proforma')\n                .done(function(string) {\n                    root = new RootNode(string, context);\n                    return root.createPath(pathsplit);\n                })\n                .fail(function (response) {\n                    console.error(response);\n                });*/\n        } else {\n            root = this.roots[0];\n            return root.createPath(pathsplit);\n        }\n    }\n\n    createContextMenu(list) {\n        if (this.readOnly) {\n            return;\n        }\n        console.log('createContextMenu ' + list.length);\n        // console.log(list);\n        // let ul = this.mainDomNode.querySelector(\".contextmenu .menu-options\");\n        let ul = document.querySelector(\".contextmenu .menu-options\");\n        // console.log(ul);\n        ul.innerHTML = ''; // Delete all children\n        for (let i = 0; i < list.length; i++) {\n            const li = document.createElement('li');\n            li.setAttribute('class', 'menu-option');\n            li.innerHTML = list[i][0];\n            li.addEventListener('click', list[i][1]);\n            console.log(list[i][0]);\n            ul.appendChild(li);\n        }\n\n        this.menu = ul.parentNode;\n    }\n\n    toggleContextmenu = command => {\n        if (this.menu === undefined) {\n            return;\n        }\n        this.menu.style.display = command === \"show\" ? \"block\" : \"none\";\n        this.menuVisible = (command === \"show\");\n    };\n\n    handleClick() {\n        this.toggleContextmenu(\"hide\");\n        this.setFocusTo(undefined);\n    }\n    setFocusTo(element) {\n        if (this.focus !== undefined) {\n            this.focus.classList.remove('focus');\n        }\n        if (element !== undefined) {\n            element.classList.add('focus');\n            this.focus = element;\n        } else {\n            this.focus = undefined;\n        }\n    }\n\n/*    needssaving() {\n        return this.editorstack.needssaving();\n    }\n    issaved() {\n        return this.editorstack.issaved();\n    } */\n    save() {\n        console.log(this);\n        console.log(this.editorstack);\n        return this.editorstack.save();\n        // alert('hallo');\n        // setTimeout(() => { return p1; }, 60000);\n    }\n}\n"],"names":["TreeNode","name","element","undefined","parent","boundHandleContextMenu","event","preventDefault","stopPropagation","_this","setContextMenu","getFramework","menu","top","left","origin","pageX","pageY","style","toggleContextmenu","handleDragStart","dataTransfer","getData","length","setData","getPath","this","domnode","li","document","createElement","setAttribute","appendChild","addEventListener","text","alert","prompt","callback","confirm","FileNode","filecontent","mode","getEditorModeFromFilename","_this2","handleDelete","handleClick","context","confirmAndDo","deleteEditor","syncer","deleteFileOrFolder","remove","files","filter","item","boundHandleRename","thecontext","Str","get_strings","key","component","done","strings","isNameChildUnique","alreadyExists","oldpath","innerHTML","newpath","renameFile","fail","response","console","error","boundHandleClick","setFocusTo","handleDoubleClick","switchEditorTo","p1","download","then","result","_this3","Promise","resolve","newcontent","async","update","classList","add","log","createContextMenu","filename","split","pop","toLowerCase","FolderNode","folders","_this4","boundHandleNewFile","node","appendFile","displayInTreeview","querySelector","expand","newfile","boundHandleLoadFile","input","type","onchange","e","file","target","_addFileFromOs","click","handleDragOver","handleDragEnter","readOnly","handleDragLeave","handleDrop","path","findNodeByPath","appendFolder","renameFolder","items","i","webkitGetAsEntry","_getFileTree","boundHandleNewFolder","foldername","mkdir","toggleExpand","isExpanded","handleMouseOver","currentTarget","handleMouseOut","first","shift","lenghth","createPath","localeCompare","recurseinit","isFile","_this5","isDirectory","show","reader","FileReader","readAsText","onload","readerEvent","content","_this6","addEditor","upload","doit","span2","subul","j","getAttribute","push","RootNode","framework","roots","EditorItem","fileNode","textarea","tabDomNode","editor","CodeMirror","fromTextArea","tabMode","indentUnit","matchBrackets","autoCloseBrackets","styleActiveLine","extraKeys","replaceSelection","lineNumbers","setSize","setOption","tab","EditorStack","donNodeEditor","donNodeTabs","editortextarea","activeNode","nodes","focus","index","splice","getWrapperElement","display","refresh","focusClose","updateContent","getValue","_switchTo","filenode","_delete","maxEditors","getContent","setValue","catch","close","_this8","parentElement","append","toString","timeStamp","time","timeEnd","Framework","command","_this9","menuVisible","editorstack","mainDomNode","fileviewer","ul","list","_this10","root","window","resizer","before","after","x","oldValue","mousedown","removeSelection","mouseMoveHandler","mouseUpHandler","el","ResizeObserver","handleResize","observe","previousElementSibling","nextElementSibling","removeProperty","body","dx","clientX","newBasis","parentNode","getBoundingClientRect","width","flexBasis","removeEventListener","substr","pathsplit","save"],"mappings":"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"}