{"version":3,"file":"FileViewer.min.js","sources":["../src/FileViewer.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\r\n//\r\n// ProFormA Question Type for Moodle is free software:\r\n// you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with ProFormA Question Type for Moodle.\r\n// If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * The ProFormA Question CodeMirror support functions\r\n *\r\n * @package    qtype\r\n * @subpackage proforma\r\n * @copyright  2022 Ostfalia Hochschule fuer angewandte Wissenschaften\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @author     K.Borm <k.borm[at]ostfalia.de>\r\n */\r\n\r\n\r\n/** NOTE:\r\n * Currently creating subfolders is disabled, because the moodle question filesaver does not support it */\r\n\r\nconst autosaveIntervall = 30000; // in milliseconds\r\n\r\n/* eslint-disable no-unused-vars */\r\n\r\n// Use these imports for Moodle\r\n// -----------------------------\r\nimport \"./MoodleSyncer\";\r\n\r\nimport './codemirror-global';\r\nimport CodeMirror from \"./codemirror\";\r\n\r\nimport \"./clike\";\r\nimport \"./python\";\r\nimport \"./javascriptmode\"; // renamed from javascript\r\nimport \"./xml\";\r\nimport \"./matchbrackets\";\r\nimport \"./closebrackets\";\r\nimport \"./active-line\";\r\n\r\n// import Config from 'core/config';\r\nimport * as Str from 'core/str';\r\n// import * as notification from 'core/notification';\r\nimport {get_string as getString} from 'core/str';\r\nimport ModalFactory from 'core/modal_factory';\r\nimport ModalEvents from 'core/modal_events';\r\n\r\n// Use this for editortest.html\r\n// -----------------------------\r\n/*\r\nimport './codemirror-global.js';\r\nimport \"./FakeSyncer.js\";\r\n\r\nimport CodeMirror from \"./codemirror/src/codemirror.js\";\r\nimport \"./codemirror/mode/clike/clike.js\";\r\nimport \"./codemirror/mode/javascript/javascript.js\";\r\nimport \"./codemirror/mode/python/python.js\";\r\nimport \"./codemirror/mode/xml/xml.js\";\r\nimport \"./codemirror/addon/selection/active-line.js\";\r\nimport \"./codemirror/addon/edit/matchbrackets.js\";\r\nimport \"./codemirror/addon/edit/closebrackets.js\";\r\nclass Config { // Fake\r\n    static wwwroot = '';\r\n    static sesskey = '';\r\n}\r\nclass FakeAjaxResult {\r\n    constructor(result) {\r\n        this.result = result;\r\n    }\r\n    done(callback) {\r\n        callback(this.result);\r\n        return this;\r\n    }\r\n    fail(callback) {\r\n        return this;\r\n    }\r\n}\r\nclass Str {\r\n    static get_strings(dict) {\r\n        console.log('fake get_strings');\r\n        console.log(dict);\r\n        let result = [];\r\n        let index = 0;\r\n        dict.forEach(function(item, index, array) {\r\n            // var value = dict[key];\r\n            result[index] = item['key'];\r\n        });\r\n        console.log(result);\r\n        return new FakeAjaxResult(result);\r\n        // return FakeAjaxResult.create(result);\r\n        // return Promise.resolve(result);\r\n    }\r\n}\r\nfunction getString(text) { return text; }\r\n*/\r\n\r\n\r\n// 'use strict'; ecma6 code is always strict\r\n\r\n\r\n// TODO:\r\n// - Split View: Problem mit Flackern\r\n// - Theme wechseln\r\n// - Menu erstmal raus - auÃŸer zum Wechseln des Themes\r\n// - Andere Browser testen\r\n\r\nfunction modalPrompt(titleId, labelId, defaultValue, callback) {\r\n    // TODO: wait in parallel\r\n    Str.get_strings([\r\n        {key: titleId, component: 'qtype_proforma'},\r\n        {key: labelId, component: 'qtype_proforma'},\r\n        ])\r\n    .then((strings) => {\r\n        return ModalFactory.create({\r\n            type: ModalFactory.types.SAVE_CANCEL,\r\n            title: strings[0],\r\n            buttons: {\r\n                save: 'Ok',\r\n            },\r\n            body:\r\n                strings[1] +\r\n                '<input type=\"text\" name=\"promptname\" value=\"' + defaultValue + '\" size=\"63\"></input>',\r\n        });\r\n    })\r\n    .then(modal => {\r\n        modal.getRoot().on(ModalEvents.save, () => {\r\n            let result = document.querySelector(\"input[name='promptname']\").value;\r\n            // console.log(result);\r\n            modal.getRoot().remove();\r\n            callback(result);\r\n        });\r\n        modal.show()\r\n            // Set focus into input field.\r\n            .then(() => document.querySelector(\"input[name='promptname']\").focus());\r\n\r\n        // Add trigger for return to trigger default action.\r\n        let defaultButton = modal.getRoot().find('.btn-primary');\r\n        document.querySelector(\"input[name='promptname']\")\r\n            .addEventListener(\"keyup\", function(event) {\r\n                event.preventDefault();\r\n                if (event.keyCode === 13) {\r\n                    defaultButton.click();\r\n                }\r\n            });\r\n    });\r\n}\r\n\r\n/**\r\n * TreeNode\r\n */\r\nclass TreeNode {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.element = undefined; // DOM element\r\n        this.parent = undefined; // parent Treenode\r\n\r\n        this.boundHandleContextMenu = event => {\r\n            // console.log(event)\r\n            event.preventDefault();\r\n            event.stopPropagation(); // otherwise parent node handles event, too\r\n\r\n            this.setContextMenu()\r\n                .then(() => {\r\n                    if (this.getFramework().menu === undefined) {\r\n                        return;\r\n                    }\r\n                    const showMenu = ({ top, left }) => {\r\n                        this.getFramework().menu.style.left = `${left}px`;\r\n                        this.getFramework().menu.style.top = `${top}px`;\r\n                        // this.getFramework().menu.style.setProperty('--mouse-x', event.clientX + 'px');\r\n                        // this.getFramework().menu.style.setProperty('--mouse-y', event.clientY + 'px');\r\n                        this.getFramework().toggleContextmenu('show');\r\n                    };\r\n\r\n                    // console.log(`contextmenu: ${event}`);\r\n\r\n                    const origin = {\r\n                        left: event.pageX,\r\n                        top: event.pageY\r\n                    };\r\n                    // console.log(`${event.pageX}px ${event.pageY}px`);\r\n                    // console.log(event);\r\n                    showMenu(origin);\r\n                });\r\n        };\r\n        this.handleDragStart = event => {\r\n            if (event.dataTransfer.getData('treeitem').length == 0) {\r\n                // console.log('dragstart: ' + this.getPath());\r\n                event.dataTransfer.setData('treeitem', this.getPath());\r\n            }\r\n        };\r\n    }\r\n    getPath() {\r\n        return this.parent === undefined? this.name : this.parent.getPath() + '/' + this.name ;\r\n    }\r\n    // Override\r\n    setContextMenu() {\r\n        TreeNode.menu = undefined;\r\n        return Promise.resolve(null);\r\n    }\r\n    displayInTreeview(domnode) {\r\n        const li = document.createElement('li');\r\n        li.setAttribute('role', 'treeitem');\r\n        li.setAttribute('draggable', 'true');\r\n        domnode.appendChild(li);\r\n        li.addEventListener('contextmenu', this.boundHandleContextMenu);\r\n        li.addEventListener('dragstart', this.handleDragStart);\r\n        this.element = li; // Store element\r\n        return li;\r\n    }\r\n\r\n    getFramework() {\r\n        return this.parent.getFramework();\r\n    }\r\n\r\n    async alreadyExists(name) {\r\n        let text = await getString('alreadyexists', 'qtype_proforma', name);\r\n        alert(text);\r\n    }\r\n\r\n    async confirmAndDo(prompt, callback, name) {\r\n        let text = await getString(prompt, 'qtype_proforma', name);\r\n        if (confirm(text)) {\r\n            callback();\r\n        }    \r\n    /*\r\n        const text = await getString(prompt, 'qtype_proforma', name);\r\n        ModalFactory.create({\r\n            type: ModalFactory.types.SAVE_CANCEL,\r\n            title: 'Confirm',\r\n            body: text,\r\n        }).then(modal => {\r\n            callback();\r\n            modal.remove();\r\n        }); */\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * FileNode\r\n */\r\nexport class FileNode extends TreeNode {\r\n    static getEditorModeFromFilename(filename) {\r\n        const extension = filename.split('.').pop().toLowerCase();\r\n        switch (extension) {\r\n            case \"java\":\r\n                return \"text/x-java\";\r\n            case \"py\":\r\n                return \"text/x-python\";\r\n            case \"setlx\":\r\n                return \"text/text\";\r\n            case \"c\":\r\n                return \"text/x-csrc\";\r\n            case \"cpp\":\r\n            case \"cxx\":\r\n            case \"h\":\r\n            case \"hpp\":\r\n                return \"text/x-c++src\";\r\n            case \"xml\":\r\n                return \"application/xml\";\r\n            case \"html\":\r\n                return \"text/html\";\r\n            case \"sql\":\r\n                return \"text/x-sql\";\r\n            case \"js\":\r\n                return \"text/javascript\";\r\n            case \"php\":\r\n                return \"application/x-httpd-php\";\r\n            case 'txt':\r\n            case 'log':\r\n            case 'md':\r\n            case 'csv':\r\n                return \"text\";\r\n        }\r\n    }\r\n\r\n    constructor(name) {\r\n        super(name);\r\n        this.filecontent = '';\r\n        this.mode = FileNode.getEditorModeFromFilename(this.name);\r\n        this.handleDelete = event => {\r\n            this.getFramework().handleClick(event);\r\n            let context = this;\r\n            this.confirmAndDo('deletefile', function() {\r\n                context.getFramework().deleteEditor(context);\r\n                context.getFramework().syncer.deleteFileOrFolder(context.getPath());\r\n                context.element.remove();\r\n                context.parent.files = context.parent.files.filter(item => item !== context);\r\n            }, this.getPath());\r\n        };\r\n        this.boundHandleRename = event => {\r\n            this.getFramework().handleClick(event);\r\n            let thecontext = this;\r\n            Str.get_strings([\r\n                {key: 'enterfilename', component: 'qtype_proforma'},\r\n            ]).done(function(strings) {\r\n                let name = prompt(strings[0] + ':', thecontext.name);\r\n                if (name !== null && name.length > 0) {\r\n                    if (!thecontext.parent.isNameChildUnique(name)) {\r\n                        thecontext.alreadyExists(name);\r\n                        return;\r\n                    }\r\n                    const oldpath = thecontext.getPath();\r\n                    thecontext.name = name;\r\n                    thecontext.element.innerHTML = name;\r\n                    const newpath = thecontext.getPath();\r\n                    thecontext.getFramework().syncer.renameFile(oldpath, newpath);\r\n                    // thecontext.element.tabIndex = 0;\r\n                }\r\n            }) //. fail(notification.exception)\r\n                .fail(function (response) {\r\n                    console.error(response);\r\n                });\r\n        };\r\n        this.boundHandleClick = event => {\r\n            this.getFramework().toggleContextmenu(\"hide\");\r\n            this.getFramework().setFocusTo(this.element);\r\n            event.stopPropagation();\r\n            // event.preventDefault();\r\n        };\r\n        this.handleDoubleClick = event => {\r\n            this.getFramework().toggleContextmenu(\"hide\");\r\n            // document.getElementById('last_action').value = this.name;\r\n            if (this.filecontent != undefined) {\r\n                this.getFramework().switchEditorTo(this);\r\n            }\r\n            this.getFramework().setFocusTo(this.element);\r\n            event.stopPropagation();\r\n            // event.preventDefault();\r\n        };\r\n    }\r\n    getContent() {\r\n        if (this.filecontent.length == 0) {\r\n            const p1 = this.getFramework().syncer.download(this.getPath());\r\n            // console.log('Fileviewer promise result');\r\n            // console.log(p1);\r\n            p1.then(result => {\r\n                // console.log('Downloaded text is: '+ result);\r\n                this.filecontent = result;\r\n                return result;\r\n            });\r\n            return p1;\r\n        } else {\r\n            return Promise.resolve(this.filecontent);\r\n        }\r\n    }\r\n    updateContent(newcontent, async) {\r\n        this.filecontent = newcontent;\r\n        console.log('Update ' + this.getPath() + ' with ' + newcontent.substr(0, 20) + '...');\r\n        return this.getFramework().syncer.update(this.getPath(), newcontent, async);\r\n    }\r\n    displayInTreeview(domnode) {\r\n        const li = super.displayInTreeview(domnode);\r\n        li.innerHTML = this.name;\r\n        li.classList.add('doc');\r\n\r\n        li.addEventListener('dblclick', this.handleDoubleClick);\r\n        li.addEventListener('click', this.boundHandleClick);\r\n\r\n//        li.addEventListener('mouseover', this.handleMouseOver);\r\n//        li.addEventListener('mouseout', this.handleMouseOut);\r\n    }\r\n\r\n    setContextMenu() {\r\n        console.log('FileNode setContextMenu');\r\n        // this is something from codemirror in promise done function???\r\n        // so this is renamed\r\n        let thecontext = this;\r\n        return Str.get_strings([\r\n            {key: 'delete', component: 'qtype_proforma'},\r\n            {key: 'rename', component: 'qtype_proforma'}\r\n        ]).done(function(strings) {\r\n            thecontext.getFramework().createContextMenu([\r\n                [strings[0] + '...', thecontext.handleDelete], // Delete\r\n                [strings[1], thecontext.boundHandleRename] // Rename\r\n            ]);\r\n        }) /*.fail(notification.exception)*/\r\n            .fail(function (response) {\r\n                console.error(response);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * FolderNode\r\n */\r\nexport class FolderNode extends TreeNode {\r\n    constructor(name) {\r\n        super(name);\r\n        this.files = []; // Empty list of files.\r\n        this.folders = []; // Empty list of folders.\r\n        this.handleDelete = event => {\r\n            this.getFramework().handleClick(event);\r\n            let context = this;\r\n            this.confirmAndDo('deletefolder', function() {\r\n                context.getFramework().syncer.deleteFileOrFolder(context.getPath() + '/.');\r\n                context.element.remove();\r\n                context.parent.folders = context.parent.folders.filter(item => item !== context);\r\n                // console.log(RootNode.projects);\r\n            }, this.getPath());\r\n        };\r\n        this.boundHandleNewFile = event => {\r\n            this.getFramework().handleClick(event);\r\n            let thecontext = this;\r\n            modalPrompt('newemptyfile', 'filename', '', (filename) => {\r\n                if (filename !== null && filename.length > 0) {\r\n                    if (!thecontext.isNameChildUnique(filename)) {\r\n                        thecontext.alreadyExists(filename);\r\n                        // alert(filename + ' already exists');\r\n                        return;\r\n                    }\r\n                    let node = new FileNode(filename);\r\n                    thecontext.appendFile(node);\r\n                    node.displayInTreeview(thecontext.element.querySelector('[role=\"group\"]'));\r\n                    thecontext.expand(true);\r\n                    thecontext.getFramework().syncer.newfile(node.getPath());\r\n                }\r\n            });\r\n        };\r\n        this.boundHandleLoadFile = event => {\r\n            this.getFramework().handleClick(event);\r\n            let input = document.createElement('input');\r\n            input.type = 'file';\r\n            input.onchange = e => {\r\n                let file = e.target.files[0];\r\n                this._addFileFromOs(file, true);\r\n            };\r\n            input.click();\r\n        };\r\n        this.handleDragOver = event => {\r\n            event.preventDefault();\r\n        };\r\n        this.handleDragEnter = () =>  {\r\n            if (this.getFramework().readOnly) {\r\n                return;\r\n            }\r\n            this.element.querySelector('.name').classList.add('dragover');\r\n        };\r\n        this.handleDragLeave = () => {\r\n            if (this.getFramework().readOnly) {\r\n                return;\r\n            }\r\n            this.element.querySelector('.name').classList.remove('dragover');\r\n        };\r\n\r\n        this.handleDrop = event => {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            this.getFramework().toggleContextmenu(\"hide\");\r\n            if (this.getFramework().readOnly) {\r\n                return;\r\n            }\r\n            this.element.querySelector('.name').classList.remove('dragover');\r\n            const path = event.dataTransfer.getData('treeitem');\r\n            if (path !== undefined && path.length > 0) {\r\n                console.log('drop ' + path + ' onto ' + this.getPath());\r\n                // Node element from tree\r\n                const node = this.getFramework().findNodeByPath(path);\r\n                if (node !== undefined && !this.isNameChildUnique(node.name)) {\r\n                    // TODO: wenn der Ordner schon existiert, sollte nur der Inhalt gemergt werden\r\n                    // alert(node.name + ' already exists');\r\n                    this.alreadyExists(node.name);\r\n                    return;\r\n                }\r\n                if (node instanceof FolderNode) {\r\n                    // remove folder in old parent\r\n                    const oldpath = node.getPath();\r\n                    node.parent.folders = node.parent.folders.filter(item => item !== node);\r\n                    // add folder to this\r\n                    this.appendFolder(node);\r\n                    this.element.querySelector('ul').appendChild(node.element);\r\n                    // node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\r\n                    this.expand(true);\r\n                    this.getFramework().syncer.renameFolder(oldpath, node.getPath());\r\n                } else if (node instanceof FileNode) {\r\n                    const oldpath = node.getPath();\r\n                    node.parent.files = node.parent.files.filter(item => item !== node);\r\n                    // add folder to this\r\n                    this.appendFile(node);\r\n                    // node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\r\n                    this.element.querySelector('ul').appendChild(node.element);\r\n                    this.expand(true);\r\n                    this.getFramework().syncer.renameFile(oldpath, node.getPath());\r\n                } else {\r\n                    console.error('node cannot be moved');\r\n                    console.log(node);\r\n                }\r\n            } else {\r\n                // External file or folder\r\n                console.log('drop file/folder');\r\n                let items = event.dataTransfer.items;\r\n                for (let i=0; i<items.length; i++) {\r\n                    let item = items[i].webkitGetAsEntry();  //Might be renamed to GetAsEntry()\r\n                    if (item) {\r\n                        this._getFileTree(item);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        this.boundHandleNewFolder = event => {\r\n            this.getFramework().handleClick(event);\r\n            let thecontext = this;\r\n            Str.get_strings([\r\n                {key: 'enterfoldername', component: 'qtype_proforma'},\r\n            ]).done(function(strings) {\r\n                let foldername = prompt(strings[0] + ':', \"\");\r\n                if (foldername !== null && foldername.length > 0) {\r\n                    if (!thecontext.isNameChildUnique(foldername)) {\r\n                        thecontext.alreadyExists(foldername);\r\n                        // alert(foldername + ' already exists');\r\n                        return;\r\n                    }\r\n                    let node = new FolderNode(foldername);\r\n                    thecontext.appendFolder(node);\r\n                    node.displayInTreeview(thecontext.element.querySelector('[role=\"group\"]'));\r\n                    thecontext.expand(true);\r\n                    console.log('create new folder ' + node.getPath());\r\n                    thecontext.getFramework().syncer.mkdir(node.getPath());\r\n                }\r\n\r\n            }) //. fail(notification.exception)\r\n                .fail(function (response) {\r\n                    console.error(response);\r\n                });\r\n        };\r\n\r\n        this.boundHandleClick = event => {\r\n            console.log('FolderNode click');\r\n            this.getFramework().toggleContextmenu(\"hide\");\r\n            // Problem: child nodes also get focus\r\n            this.getFramework().setFocusTo(this.element);\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n        };\r\n        this.boundHandleRename = event => {\r\n            this.getFramework().handleClick(event);\r\n            let thecontext = this;\r\n            Str.get_strings([\r\n                {key: 'enterfoldername', component: 'qtype_proforma'},\r\n            ]).done(function(strings) {\r\n                let name = prompt(strings[0] + ':', thecontext.name);\r\n                if (name !== null && name.length > 0) {\r\n                    if (!thecontext.parent.isNameChildUnique(name)) {\r\n                        thecontext.alreadyExists(name);\r\n                        return;\r\n                    }\r\n                    const oldpath = thecontext.getPath() + '/.';\r\n                    thecontext.name = name;\r\n                    thecontext.element.querySelector('.name').innerHTML = name;\r\n                    const newpath = thecontext.getPath() + '/.';\r\n                    thecontext.getFramework().syncer.renameFolder(oldpath, newpath);\r\n                }\r\n            }) //. fail(notification.exception)\r\n                .fail(function (response) {\r\n                    console.error(response);\r\n                });\r\n        };\r\n        this.toggleExpand = () => {\r\n            this.element.setAttribute('aria-expanded', !this.isExpanded());\r\n        };\r\n        this.handleMouseOver = event => {\r\n            event.currentTarget.classList.add('hover');\r\n        };\r\n        this.handleMouseOut = event => {\r\n            event.currentTarget.classList.remove('hover');\r\n        };\r\n    }\r\n    findNodeByPath(path) {\r\n        let first = path.shift();\r\n        for (let i = 0; i < this.files.length; i++) {\r\n            if (this.files[i].name === first) {\r\n                return this.files[i];\r\n            }\r\n        }\r\n        for (let i = 0; i < this.folders.length; i++) {\r\n            if (this.folders[i].name === first) {\r\n                if (path.length == 0) {\r\n                    return this.folders[i];\r\n                } else {\r\n                    return this.folders[i].findNodeByPath(path);\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    createPath(path) {\r\n        // console.log(path);\r\n        let first = path.shift();\r\n        // console.log('foldernode: create node for <' + first + '>');\r\n        if (first === undefined || first.length == 0) {\r\n            if (path.lenghth > 0) {\r\n                console.error('Bug in creating path');\r\n            }\r\n            return this;\r\n        }\r\n        for (let i = 0; i < this.folders.length; i++) {\r\n            if (this.folders[i].name === first) {\r\n                // Subpath exists\r\n                if (path.length == 0) {\r\n                    // full path exists => return folder object.\r\n                    return this.folders[i];\r\n                } else {\r\n                    return this.folders[i].createPath(path);\r\n                }\r\n            }\r\n        }\r\n        // Path does not exist => create.\r\n        // console.log('create folder node for ' + first);\r\n        let node = new FolderNode(first);\r\n        this.appendFolder(node);\r\n        return node.createPath(path);\r\n    }\r\n\r\n    isNameChildUnique(name) {\r\n        for (let i = 0; i < this.files.length; i++) {\r\n            if (name.localeCompare(this.files[i].name) == 0 ) {\r\n                return false;\r\n            }\r\n        }\r\n        for (let i = 0; i < this.folders.length; i++) {\r\n            if (name.localeCompare(this.folders[i].name) == 0 ) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    _getFileTree(item, path = undefined) {\r\n        const recurseinit = (path === undefined);\r\n        path = path || \"\";\r\n        if (item.isFile) {\r\n            item.file(file => {\r\n                // Show file content only if no path given\r\n                // i.e. no recursion\r\n                this._addFileFromOs(file, recurseinit);\r\n            });\r\n        } else if (item.isDirectory) {\r\n/*******\r\n            // Create new folder\r\n            let node = new FolderNode(item.name);\r\n            this.appendFolder(node);\r\n            node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\r\n            this.expand(true);\r\n            this.getFramework().syncer.mkdir(node.getPath());\r\n\r\n            // Get folder contents\r\n            // console.log(item.fullPath);\r\n            let dirReader = item.createReader();\r\n            dirReader.readEntries(entries => {\r\n                for (let i=0; i < entries.length; i++) {\r\n                    node._getFileTree(entries[i], path + item.name + \"/\");\r\n                }\r\n            });\r\n */\r\n        }\r\n    }\r\n\r\n    _addFileFromOs(file, show = false) {\r\n        if (!this.isNameChildUnique(file.name)) {\r\n            this.alreadyExists(file.name);\r\n            return;\r\n        }\r\n        let node = new FileNode(file.name);\r\n        let reader = new FileReader();\r\n        reader.readAsText(file,'UTF-8');\r\n        reader.onload = readerEvent => {\r\n            let content = readerEvent.target.result; // this is the content!\r\n            node.filecontent = content;\r\n            if (show) {\r\n                this.getFramework().addEditor(node);\r\n                this.getFramework().setFocusTo(node.element);\r\n            }\r\n            this.getFramework().syncer.upload(node.getPath(), file);\r\n        };\r\n        this.appendFile(node);\r\n        node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\r\n        this.expand(true);\r\n    }\r\n    expand(doit) {\r\n        this.element.setAttribute('aria-expanded', doit);\r\n    }\r\n\r\n    displayInTreeview(domnode) {\r\n        const li = super.displayInTreeview(domnode);\r\n        li.setAttribute('aria-expanded', 'false');\r\n\r\n        const span2 = document.createElement('span');\r\n        span2.addEventListener('dblclick', this.toggleExpand);\r\n        span2.innerHTML = this.name;\r\n        span2.classList.add('name');\r\n        span2.addEventListener('click', this.boundHandleClick);\r\n        span2.addEventListener('dragenter', this.handleDragEnter);\r\n        span2.addEventListener('dragleave', this.handleDragLeave);\r\n        span2.addEventListener('drop', this.handleDrop);\r\n        span2.addEventListener('dragover', this.handleDragOver);\r\n        li.appendChild(span2);\r\n\r\n        const subul = document.createElement('ul');\r\n        subul.setAttribute('role', 'group');\r\n        li.appendChild(subul);\r\n\r\n        for (let j = 0; j < this.folders.length; j++) {\r\n            this.folders[j].displayInTreeview(subul);\r\n        }\r\n        for (let j = 0; j < this.files.length; j++) {\r\n            this.files[j].displayInTreeview(subul);\r\n        }\r\n    }\r\n\r\n    isExpanded() {\r\n        return this.element.getAttribute('aria-expanded') === 'true';\r\n    }\r\n    setContextMenu() {\r\n        console.log('FolderNode setContextMenu');\r\n        let thecontext = this; // This is changed to something codemirror in promise\r\n        return Str.get_strings([\r\n            {key: 'newemptyfile', component: 'qtype_proforma'},\r\n            {key: 'loadfile', component: 'qtype_proforma'},\r\n            {key: 'newfolder', component: 'qtype_proforma'},\r\n            {key: 'rename', component: 'qtype_proforma'},\r\n            {key: 'delete', component: 'qtype_proforma'}\r\n        ]).done(function(strings) {\r\n            thecontext.getFramework().createContextMenu([\r\n                [strings[0] + '...', thecontext.boundHandleNewFile], // newemptyfile\r\n                [strings[1] + '...', thecontext.boundHandleLoadFile], // loadfile\r\n//***                [strings[2] + '...', thecontext.boundHandleNewFolder], // newfolder\r\n                [strings[3], thecontext.boundHandleRename], // Rename\r\n                [strings[4] + '...', thecontext.handleDelete], // delete\r\n            ]);\r\n        }) //. fail(notification.exception)\r\n            .fail(function (response) {\r\n                console.error(response);\r\n            });\r\n    }\r\n\r\n    appendFile(node) { this.files.push(node); node.parent = this; }\r\n    appendFolder(node) { this.folders.push(node); node.parent = this; }\r\n}\r\n\r\n/**\r\n * RootNode\r\n */\r\nexport class RootNode extends FolderNode {\r\n    constructor(name, framework) {\r\n        super(name);\r\n        console.log('CREATE root node ' + name);\r\n        this.framework = framework;\r\n        framework.roots.push(this);\r\n    }\r\n    getFramework() {\r\n        return this.framework;\r\n    }\r\n    getPath() {\r\n        return '';\r\n    }\r\n    setContextMenu() {\r\n        console.log('RootNode setContextMenu');\r\n        let thecontext = this; // This is changed to something codemirror in promise\r\n        return Str.get_strings([\r\n            {key: 'newemptyfile', component: 'qtype_proforma'},\r\n            {key: 'loadfile', component: 'qtype_proforma'},\r\n            {key: 'newfolder', component: 'qtype_proforma'}\r\n        ]).done(function(strings) {\r\n            thecontext.getFramework().createContextMenu([\r\n                [strings[0] + '...', thecontext.boundHandleNewFile], // newemptyfile\r\n                [strings[1] + '...', thecontext.boundHandleLoadFile], // loadfile\r\n//***                [strings[2] + '...', thecontext.boundHandleNewFolder], // newfolder\r\n            ]);\r\n        }) //. fail(notification.exception)\r\n            .fail(function (response) {\r\n                console.error(response);\r\n            });\r\n    }\r\n\r\n}\r\n\r\nclass EditorItem {\r\n    constructor(fileNode, textarea, tabDomNode, readOnly) {\r\n        console.log('Create Codemirror ' + readOnly);\r\n\r\n        this.fileNode = fileNode;\r\n        this.editor = CodeMirror.fromTextArea(textarea, {\r\n            tabMode: \"indent\",\r\n            indentUnit: 4,\r\n            matchBrackets: true,\r\n            autoCloseBrackets: true,\r\n            styleActiveLine: true,\r\n            readOnly: readOnly,\r\n            extraKeys: {'Tab': function(){ this.editor.replaceSelection('    ' , 'end');}},\r\n            lineNumbers: true\r\n            //viewportMargin: Infinity\r\n        });\r\n        this.editor.setSize(\"100%\", \"100%\");\r\n        // RootNode.editor.setOption('theme', \"blackboard\");\r\n        this.editor.setOption('theme', \"darcula\");\r\n        // this.editor.setOption('theme', \"abcdef\");\r\n        this.tab = tabDomNode;\r\n    }\r\n}\r\n\r\nclass EditorStack {\r\n    static maxEditors = 12;\r\n    constructor(donNodeEditor, donNodeTabs, framework) {\r\n        this.editortextarea = donNodeEditor.querySelector('textarea');\r\n        // Initialise readonly editor\r\n        this.editor = CodeMirror.fromTextArea(this.editortextarea, {\r\n            tabMode: \"indent\",\r\n            indentUnit: 4,\r\n            matchBrackets: true,\r\n            autoCloseBrackets: true,\r\n            styleActiveLine: true,\r\n            readOnly: true,\r\n            extraKeys: {'Tab': function(){ this.editor.replaceSelection('    ' , 'end');}},\r\n            lineNumbers: true\r\n            //viewportMargin: Infinity\r\n        });\r\n        this.editor.setSize(\"100%\", \"100%\");\r\n        // RootNode.editor.setOption('theme', \"blackboard\");\r\n        this.editor.setOption('theme', \"darcula\");\r\n        // this.editor.setOption('theme', \"abcdef\");\r\n\r\n        this.activeNode = undefined; // activeNode associated with Codemirror\r\n\r\n        this.nodes = []; // all filenodes with open editor\r\n        // this.donNodeEditor = donNodeEditor;\r\n        this.donNodeTabs = donNodeTabs;\r\n        this.focus = undefined; // the tab that has got the focus\r\n        this.framework = framework;\r\n\r\n    }\r\n\r\n    cleanup() {\r\n        if (this.timer) {\r\n            clearInterval(this.timer);\r\n        }\r\n    }\r\n\r\n    _switchTo(item, index = undefined) {\r\n        this.saveCurrentEditor(true);\r\n\r\n        if (index === undefined) {\r\n            // figure out value of i\r\n            for (index = 0; index < this.nodes.length; index++) {\r\n                if (this.nodes[index] === item) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        console.log('item index is ' + index);\r\n\r\n        // move on top\r\n        this.nodes.splice(index, 1);\r\n        this.nodes.push(item);\r\n\r\n        // Hide all editors\r\n        for (index = 0; index < this.nodes.length; index++) {\r\n            this.nodes[index].editor.getWrapperElement().style.display = 'none';\r\n        }\r\n\r\n        item.editor.getWrapperElement().style.display = 'block';\r\n        item.editor.refresh();\r\n        item.editor.focus();\r\n\r\n        // Switch focus\r\n        if (this.focus !== undefined) {\r\n            this.focus.classList.remove('focus');\r\n            let focusClose = this.focus.querySelector('.close');\r\n            focusClose.style.display = 'none';\r\n        }\r\n        item.tab.classList.add('focus');\r\n        item.tab.querySelector('.close').style.display = 'inline';\r\n        this.focus = item.tab;\r\n    }\r\n\r\n    _delete(item) {\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n            if (this.nodes[i] === item) {\r\n                console.log('** Delete item from editor');\r\n                // Read back (modified) content\r\n                this.nodes[i].fileNode.updateContent(this.nodes[i].editor.getValue());\r\n\r\n                this.nodes.splice(i, 1);\r\n                // Delete Codemirror element (in order to avoid resource leak)\r\n                item.editor.getWrapperElement().remove();\r\n                if (this.nodes.length > 0) {\r\n                    this._switchTo(this.nodes[this.nodes.length-1], this.nodes.length-1);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        console.error('could not find filenode');\r\n    }\r\n\r\n    deleteEditor(filenode) {\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n            if (this.nodes[i].fileNode === filenode) {\r\n                this.nodes[i].tab.remove();\r\n                this.nodes[i].tab = undefined;\r\n                this._delete(this.nodes[i]);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    addEditor(filenode) {\r\n        if (EditorStack.maxEditors === this.nodes.length) {\r\n            alert('maximum number of editors reached');\r\n            return;\r\n        }\r\n        // if (filenode.mode !== undefined) {\r\n            // Create tab\r\n            // let tab = document.createElement('span');\r\n            let tab = document.createElement('button');\r\n\r\n            // Mode is known => display new text content\r\n            let item = new EditorItem(filenode, this.editortextarea, tab, this.framework.readOnly);\r\n            filenode.getContent()\r\n                .then(text => {\r\n                    if (text === undefined) {\r\n                        text = '???';\r\n                    }\r\n                    item.editor.setValue(text);\r\n                    if (filenode.mode !== undefined) {\r\n                        item.editor.setOption(\"mode\", filenode.mode);\r\n                    } // else {\r\n                        // E.g. makefile has no extension and therefore no known mode.\r\n                        // console.error('unknown file mode');\r\n                    // }\r\n                    // item.editor.setOption(\"readOnly\", this.readOnly);\r\n                    item.editor.refresh(); // for old version of Codemirror\r\n                })\r\n                .catch( error => {\r\n                    console.error('error:', error);\r\n                    alert(error);\r\n                });\r\n\r\n            tab.classList.add('tab');\r\n            let close = document.createElement('span');\r\n            close.classList.add('close');\r\n            close.innerHTML = '&#x2715';\r\n            close.addEventListener('click', event => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                this._delete(item);\r\n                close.parentElement.remove();\r\n            });\r\n            tab.innerHTML = filenode.name;\r\n            tab.append(close);\r\n            tab.addEventListener('click', event => {\r\n                event.preventDefault();\r\n                event.stopPropagation();\r\n                this._switchTo(item);\r\n            });\r\n            this.donNodeTabs.append(tab);\r\n\r\n            this.nodes.push(item);\r\n            this._switchTo(item);\r\n/*        } else {\r\n            console.error('unknown file mode');\r\n        }*/\r\n    }\r\n\r\n    switchEditorTo(filenode) {\r\n        // Check if filenode is already in stack\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n            if (this.nodes[i].fileNode === filenode) {\r\n                // filenode is in list\r\n                this._switchTo(this.nodes[i], i);\r\n                return;\r\n            }\r\n        }\r\n        this.addEditor(filenode);\r\n        // Start auto-save timer\r\n        if (this.timer) {\r\n            clearInterval(this.timer);\r\n        }\r\n        let that = this;\r\n        if (autosaveIntervall > 0) {\r\n            this.timer = setInterval(function() {\r\n                console.log('proforma editor autosave');\r\n                that.saveCurrentEditor(true);\r\n            }, autosaveIntervall);\r\n        }\r\n    }\r\n\r\n    saveCurrentEditor(async) {\r\n        let currentNode = this._getCurrentNode();\r\n        if (currentNode) {\r\n            // save content of current editor\r\n            if (currentNode.editor.getValue().trim().length > 0) {\r\n                currentNode.fileNode.updateContent(currentNode.editor.getValue(), async);\r\n            } else {\r\n                // currentNode.fileNode.updateContent(' ', true);\r\n            }\r\n        }\r\n    }\r\n\r\n    _getCurrentNode() {\r\n        if (this.nodes.length > 0) {\r\n            // Call refresh for current Codemirror\r\n            // in order to update text window. Otherwise\r\n            // text is cut off\r\n            return this.nodes[this.nodes.length-1];\r\n        }\r\n        return null;\r\n    }\r\n    handleResize() {\r\n        if (this.nodes.length > 0) {\r\n            // Call refresh for current Codemirror\r\n            // in order to update text window. Otherwise\r\n            // text is cut off\r\n            this.nodes[this.nodes.length-1].editor.refresh();\r\n        }\r\n    }\r\n    save() {\r\n        // Save all\r\n        // (we could save current if file is saved on switching)\r\n        // this.issaved = false;\r\n        console.log('currently open editors ' + this.nodes.length.toString());\r\n        console.timeStamp('save');\r\n        console.time('save');\r\n\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n            this.nodes[i].fileNode.updateContent(this.nodes[i].editor.getValue(), false);\r\n        }\r\n\r\n        /*\r\n        let promises = [];\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n            console.log('add promise to list ' + i.toString());\r\n            promises.push(this.nodes[i].fileNode.updateContent(this.nodes[i].editor.getValue()));\r\n        }\r\n        return Promise.all(promises).\r\n            then(() => {\r\n                console.log('all files saved');\r\n                console.timeStamp('save');\r\n                console.timeEnd('save');\r\n                this.issaved = true;\r\n\r\n            // return true;\r\n                // alert('look');\r\n            })\r\n            .catch( error => {\r\n                console.timeStamp('save');\r\n                console.timeEnd('save');\r\n                console.error('error:', error);\r\n                alert(error);\r\n            });*/\r\n        console.log('all files saved');\r\n        console.timeStamp('save');\r\n        console.timeEnd('save');\r\n    }\r\n/*    needssaving() {\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n            if (this.nodes[i].fileNode.filecontent != this.nodes[i].editor.getValue()) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    issaved() {\r\n        return this.issaved;\r\n    }*/\r\n}\r\n\r\n\r\nexport class Framework {\r\n    constructor() {\r\n        this.roots = []; // all root nodes\r\n        this.syncer = undefined;\r\n        this.editorstack = undefined;\r\n        this.mainDomNode = undefined;\r\n        this.menu = undefined;\r\n        this.menuVisible = false;\r\n        this.focus = undefined;\r\n        this.readOnly = false;\r\n        this.rootnode = 'Submission';\r\n    }\r\n\r\n    buildFramework(domnode) {\r\n        console.log('buildFramework');\r\n        domnode.innerHTML = `<div class=\"ide\" style=\"display: flex;flex-direction: column; align-items: stretch;\r\n    resize: vertical;\r\n    overflow: hidden;\r\n    min-height: 150px\">\r\n    <!--<div class=\"menu\" style=\"flex: none\">menu</div>-->\r\n\r\n    <div class=\"body\" style=\"display: flex; flex-direction: row; flex: 1 1 0; min-height: 0\">\r\n        <!--<div class=\"fake\" style=\"min-width: 100px; flex: 1 0 0; overflow: auto;\">Fake element</div> -->\r\n        <div class=\"explorer\" style=\"min-width: 20px; flex: 1 0 0; overflow: auto;\">\r\n        </div>\r\n        <div class=\"resize\"></div>\r\n        <div class=\"canvas\" style=\"min-width: 20px;  flex: 0 0 75%; display: flex; flex-direction: row;\">\r\n            <!-- set flex-basis = 50% for 2 two columns and 100%V for one column -->\r\n            <div class=\"canvascol\" style=\"display: flex; flex-direction: column; flex: 1 1 50%; overflow: hidden;\">\r\n                <div class=\"tabs\" style=\"flex: none; \">\r\n                </div>\r\n                <div class=\"editor\" style=\"flex: 1 1 0; overflow: hidden;\">\r\n                    <textarea></textarea>\r\n                </div>\r\n            </div>\r\n            <!--\r\n            <div class=\"resize\"></div>\r\n            <div class=\"canvascol\" style=\"display: flex; flex-direction: column; flex: 1 1 50%; min-height: 0;\">\r\n                <div class=\"tabs\" style=\"flex: none; \">\r\n                </div>\r\n                <div class=\"editor\" style=\"flex: 1 1 0; min-height: 0; overflow: hidden;\">\r\n                    <textarea></textarea>\r\n                </div>\r\n            </div> --> \r\n        </div>\r\n    </div>\r\n\r\n    <!--<div class=\"status\" style=\"flex: none\">status</div>-->\r\n</div>\r\n<p><!--<label>File or Folder Selected: <input id=\"last_action\" type=\"text\" size=\"15\" readonly=\"\"></label>--></p>\r\n`;\r\n        // We only need one context menu that must be placed outside\r\n        // all other elements (esp. those that are positioned relative)\r\n        // in order to have the menu placed correctly.\r\n        let contextmenu = `<div class=\"contextmenu\" id=\"context-menu\">\r\n    <ul class=\"menu-options\">\r\n        <li class=\"menu-option\">New file</li>\r\n        <li class=\"menu-option\">New folder</li>\r\n        <li class=\"menu-option\">Delete...</li>\r\n    </ul>\r\n</div>`;\r\n        const menu = document.createElement('div');\r\n        menu.innerHTML = contextmenu;\r\n        let body = document.querySelector('body');\r\n        body.appendChild(menu);\r\n\r\n        this.mainDomNode = domnode;\r\n        this.editorstack = new EditorStack(domnode.querySelector('.editor'),\r\n            domnode.querySelector('.tabs'), this);\r\n    }\r\n\r\n    init(node, syncer, readOnly, rootnode = 'Files') {\r\n        this.readOnly = readOnly;\r\n        this.rootnode = rootnode;\r\n        const initSplit = resizer =>  {\r\n            // from https://htmldom.dev/create-resizable-split-views/\r\n            const before = resizer.previousElementSibling;\r\n            const after = resizer.nextElementSibling;\r\n\r\n            // The current position of mouse\r\n            let x = 0;\r\n\r\n            let oldValue = 0;\r\n            let mousedown = false;\r\n\r\n            const removeSelection = () => {\r\n                resizer.style.removeProperty('cursor');\r\n                document.body.style.removeProperty('cursor');\r\n\r\n                before.style.removeProperty('user-select');\r\n                before.style.removeProperty('pointer-events');\r\n\r\n                if (after != undefined) {\r\n                    after.style.removeProperty('user-select');\r\n                    after.style.removeProperty('pointer-events');\r\n                }\r\n            };\r\n            // Handle the mousedown event\r\n            // that's triggered when user drags the resizer\r\n            const mouseDownHandler = e => {\r\n                // Get the current mouse position\r\n                x = e.clientX;\r\n\r\n                this.toggleContextmenu(\"hide\");\r\n                oldValue = before.getBoundingClientRect().width;\r\n                mousedown = true;\r\n                // Attach the listeners to `document`\r\n                document.addEventListener('mousemove', mouseMoveHandler);\r\n                document.addEventListener('mouseup', mouseUpHandler);\r\n\r\n                removeSelection();\r\n            };\r\n\r\n            const mouseMoveHandler = e =>  {\r\n                if (mousedown) {\r\n                    // How far the mouse has been moved\r\n                    const dx = e.clientX - x;\r\n                    let newBasis = ((oldValue + dx) * 100) / resizer.parentNode.getBoundingClientRect().width;\r\n                    before.style.flexBasis =`${newBasis}%`;\r\n                    if (after != undefined) {\r\n                        after.style.flexBasis =`${100-newBasis}%`;\r\n                    } else {\r\n                        resizer.parentNode.getBoundingClientRect().width =\r\n                            resizer.parentNode.getBoundingClientRect().width - dx;\r\n                    }\r\n                    removeSelection();\r\n                } else {\r\n                    mouseUpHandler();\r\n                }\r\n            };\r\n\r\n            const mouseUpHandler = function () {\r\n                removeSelection();\r\n\r\n                // Remove the handlers of `mousemove` and `mouseup`\r\n                document.removeEventListener('mousemove', mouseMoveHandler);\r\n                document.removeEventListener('mouseup', mouseUpHandler);\r\n            };\r\n            // Attach the handler\r\n            resizer.addEventListener('mousedown', mouseDownHandler);\r\n        };\r\n\r\n        const fileviewer = node.querySelector('.explorer');\r\n        // Prevent browser from opening a dropped file in a new tab.\r\n        fileviewer.addEventListener('drop', event => {\r\n            event.preventDefault();\r\n        });\r\n        fileviewer.addEventListener('dragover', event => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        let ul = document.createElement(\"ul\");\r\n        ul.setAttribute('role', 'tree');\r\n        ul.setAttribute('aria-labelledby', 'fileviewer');\r\n        fileviewer.appendChild(ul);\r\n\r\n        this.syncer = syncer;\r\n        // build folder/file structure.\r\n        /* this.syncer.dir(); Da fehlen die Dateien */\r\n        this.createPath('/'); // needed when no files come from syncer.\r\n        this.syncer.list(this)\r\n            .then (() => {\r\n                console.log('DISPLAY ROOTS');\r\n                console.log(this.roots);\r\n                for (let i = 0; i < this.roots.length; i++) {\r\n                    let root = this.roots[i];\r\n                    root.displayInTreeview(ul);\r\n                    root.toggleExpand();\r\n                }\r\n            });\r\n\r\n        // Hide context menu on every left click\r\n        window.addEventListener(\"click\", e => {\r\n            this.handleClick();\r\n        });\r\n\r\n        let el = this.mainDomNode.querySelector('.ide');\r\n        const observer = new ResizeObserver(() => {\r\n            this.editorstack.handleResize();\r\n        });\r\n        observer.observe(el);\r\n        initSplit(node.querySelector('.ide .body > .resize'),  'w');\r\n        // initSplit(node.querySelector('.ide .canvas > .resize'), 'w');\r\n\r\n        // Read context menu strings in order to have them in\r\n        // the browser cache and the menu can open immediately\r\n        /*\r\n        Str.get_strings([\r\n            {key: 'delete', component: 'qtype_proforma'},\r\n            {key: 'rename', component: 'qtype_proforma'},\r\n            {key: 'loadfile', component: 'qtype_proforma'},\r\n            {key: 'newemptyfile', component: 'qtype_proforma'},\r\n            {key: 'newfolder', component: 'qtype_proforma'},\r\n        ]).done(function(strings) {\r\n            console.log('context menu string read.');\r\n            console.log(strings);\r\n        }).fail(function (response) {\r\n            console.error(response);\r\n        }); */\r\n\r\n        /*\r\n        RootNode.syncer.sendRequest('mkdir', 'newproformafolder');\r\n        RootNode.syncer.sendRequest('dir'); */\r\n    }\r\n\r\n    switchEditorTo(filenode) {\r\n        this.editorstack.switchEditorTo(filenode);\r\n    }\r\n    addEditor(filenode) {\r\n        this.editorstack.switchEditorTo(filenode);\r\n        // this.editorstack.addEditor(filenode);\r\n    }\r\n    deleteEditor(filenode) {\r\n        this.editorstack.deleteEditor(filenode);\r\n    }\r\n\r\n    findNodeByPath(path) {\r\n        console.log('find <' + path + '>');\r\n        if (path.substr(0,1) != '/') {\r\n            console.error('path does not start with /: ' + path);\r\n            return undefined;\r\n        }\r\n\r\n        let pathsplit = path.split('/');\r\n        pathsplit.shift(); // first element is always empty\r\n        // let first = pathsplit.shift();\r\n        let root = this.roots[0];\r\n        return root.findNodeByPath(pathsplit);\r\n\r\n        /*\r\n        for (let i = 0; i < this.roots.length; i++) {\r\n            if (this.roots[i].name === first) {\r\n                return this.roots[i].findNodeByPath(pathsplit);\r\n            }\r\n        }\r\n        return undefined; */\r\n    }\r\n\r\n    createPath(path) {\r\n        console.log('Framework: create folder ' + path);\r\n        // Assume first char is always /\r\n        if (path[0] !== '/') {\r\n            console.error('first char in path is not /: ' + path);\r\n        }\r\n        let pathsplit = path.split('/');\r\n        pathsplit.shift(); // first element in array is always empty\r\n\r\n        let root;\r\n        let context = this;\r\n        if (this.roots.length === 0) {\r\n            root = new RootNode(context.rootnode, context);\r\n            return root.createPath(pathsplit);\r\n/*\r\n            getString('rootsubmission', 'qtype_proforma')\r\n                .done(function(string) {\r\n                    root = new RootNode(string, context);\r\n                    return root.createPath(pathsplit);\r\n                })\r\n                .fail(function (response) {\r\n                    console.error(response);\r\n                });*/\r\n        } else {\r\n            root = this.roots[0];\r\n            return root.createPath(pathsplit);\r\n        }\r\n    }\r\n\r\n    createContextMenu(list) {\r\n        if (this.readOnly) {\r\n            return;\r\n        }\r\n        console.log('createContextMenu ' + list.length);\r\n        // console.log(list);\r\n        // let ul = this.mainDomNode.querySelector(\".contextmenu .menu-options\");\r\n        let ul = document.querySelector(\".contextmenu .menu-options\");\r\n        // console.log(ul);\r\n        ul.innerHTML = ''; // Delete all children\r\n        for (let i = 0; i < list.length; i++) {\r\n            const li = document.createElement('li');\r\n            li.setAttribute('class', 'menu-option');\r\n            li.innerHTML = list[i][0];\r\n            li.addEventListener('click', list[i][1]);\r\n            console.log(list[i][0]);\r\n            ul.appendChild(li);\r\n        }\r\n\r\n        this.menu = ul.parentNode;\r\n    }\r\n\r\n    toggleContextmenu = command => {\r\n        if (this.menu === undefined) {\r\n            return;\r\n        }\r\n        this.menu.style.display = command === \"show\" ? \"block\" : \"none\";\r\n        this.menuVisible = (command === \"show\");\r\n    };\r\n\r\n    handleClick() {\r\n        this.toggleContextmenu(\"hide\");\r\n        this.setFocusTo(undefined);\r\n    }\r\n    setFocusTo(element) {\r\n        if (this.focus !== undefined) {\r\n            this.focus.classList.remove('focus');\r\n        }\r\n        if (element !== undefined) {\r\n            element.classList.add('focus');\r\n            this.focus = element;\r\n        } else {\r\n            this.focus = undefined;\r\n        }\r\n    }\r\n\r\n/*    needssaving() {\r\n        return this.editorstack.needssaving();\r\n    }\r\n    issaved() {\r\n        return this.editorstack.issaved();\r\n    } */\r\n    save() {\r\n        console.log(this);\r\n        console.log(this.editorstack);\r\n        return this.editorstack.save();\r\n        // alert('hallo');\r\n        // setTimeout(() => { return p1; }, 60000);\r\n    }\r\n}"],"names":["TreeNode","constructor","name","element","undefined","parent","boundHandleContextMenu","event","preventDefault","stopPropagation","setContextMenu","then","this","getFramework","menu","_ref","top","left","style","toggleContextmenu","showMenu","pageX","pageY","handleDragStart","dataTransfer","getData","length","setData","getPath","Promise","resolve","displayInTreeview","domnode","li","document","createElement","setAttribute","appendChild","addEventListener","text","alert","prompt","callback","confirm","FileNode","filename","split","pop","toLowerCase","filecontent","mode","getEditorModeFromFilename","handleDelete","handleClick","context","confirmAndDo","deleteEditor","syncer","deleteFileOrFolder","remove","files","filter","item","boundHandleRename","thecontext","Str","get_strings","key","component","done","strings","isNameChildUnique","alreadyExists","oldpath","innerHTML","newpath","renameFile","fail","response","console","error","boundHandleClick","setFocusTo","handleDoubleClick","switchEditorTo","getContent","p1","download","result","updateContent","newcontent","async","log","substr","update","super","classList","add","createContextMenu","FolderNode","folders","boundHandleNewFile","titleId","labelId","defaultValue","node","appendFile","querySelector","expand","newfile","ModalFactory","create","type","types","SAVE_CANCEL","title","buttons","save","body","modal","getRoot","on","ModalEvents","value","show","focus","defaultButton","find","keyCode","click","boundHandleLoadFile","input","onchange","e","file","target","_addFileFromOs","handleDragOver","handleDragEnter","readOnly","handleDragLeave","handleDrop","path","findNodeByPath","appendFolder","renameFolder","items","i","webkitGetAsEntry","_getFileTree","boundHandleNewFolder","foldername","mkdir","toggleExpand","isExpanded","handleMouseOver","currentTarget","handleMouseOut","first","shift","createPath","lenghth","localeCompare","recurseinit","isFile","isDirectory","reader","FileReader","readAsText","onload","readerEvent","content","addEditor","upload","doit","span2","subul","j","getAttribute","push","RootNode","framework","roots","EditorItem","fileNode","textarea","tabDomNode","editor","CodeMirror","fromTextArea","tabMode","indentUnit","matchBrackets","autoCloseBrackets","styleActiveLine","extraKeys","replaceSelection","lineNumbers","setSize","setOption","tab","EditorStack","donNodeEditor","donNodeTabs","editortextarea","activeNode","nodes","cleanup","timer","clearInterval","_switchTo","index","saveCurrentEditor","splice","getWrapperElement","display","refresh","_delete","getValue","filenode","maxEditors","setValue","catch","close","parentElement","append","that","setInterval","currentNode","_getCurrentNode","trim","handleResize","toString","timeStamp","time","timeEnd","command","menuVisible","editorstack","mainDomNode","rootnode","buildFramework","init","fileviewer","ul","list","root","window","el","ResizeObserver","observe","resizer","before","previousElementSibling","after","nextElementSibling","x","oldValue","mousedown","removeSelection","removeProperty","mouseMoveHandler","dx","clientX","newBasis","parentNode","getBoundingClientRect","width","flexBasis","mouseUpHandler","removeEventListener","initSplit","pathsplit"],"mappings":";;;;;;;;;q8BAgKMA,SACFC,YAAYC,WACHA,KAAOA,UACPC,aAAUC,OACVC,YAASD,OAETE,uBAAyBC,QAE1BA,MAAMC,iBACND,MAAME,uBAEDC,iBACAC,MAAK,aAC+BP,IAA7BQ,KAAKC,eAAeC,YAGPC,YAACC,IAAEA,IAAFC,KAAOA,gBAChBJ,eAAeC,KAAKI,MAAMD,eAAUA,gBACpCJ,eAAeC,KAAKI,MAAMF,cAASA,eAGnCH,eAAeM,kBAAkB,SAW1CC,CANe,CACXH,KAAMV,MAAMc,MACZL,IAAKT,MAAMe,OAIf,UAGPC,gBAAkBhB,QACkC,GAAjDA,MAAMiB,aAAaC,QAAQ,YAAYC,QAEvCnB,MAAMiB,aAAaG,QAAQ,WAAYf,KAAKgB,YAIxDA,sBAC2BxB,IAAhBQ,KAAKP,OAAsBO,KAAKV,KAAOU,KAAKP,OAAOuB,UAAY,IAAMhB,KAAKV,KAGrFQ,wBACIV,SAASc,UAAOV,EACTyB,QAAQC,QAAQ,MAE3BC,kBAAkBC,eACRC,GAAKC,SAASC,cAAc,aAClCF,GAAGG,aAAa,OAAQ,YACxBH,GAAGG,aAAa,YAAa,QAC7BJ,QAAQK,YAAYJ,IACpBA,GAAGK,iBAAiB,cAAe1B,KAAKN,wBACxC2B,GAAGK,iBAAiB,YAAa1B,KAAKW,sBACjCpB,QAAU8B,GACRA,GAGXpB,sBACWD,KAAKP,OAAOQ,mCAGHX,UACZqC,WAAa,kBAAU,gBAAiB,iBAAkBrC,MAC9DsC,MAAMD,yBAGSE,OAAQC,SAAUxC,UAC7BqC,WAAa,kBAAUE,OAAQ,iBAAkBvC,MACjDyC,QAAQJ,OACRG,kBAmBCE,iBAAiB5C,0CACO6C,iBACXA,SAASC,MAAM,KAAKC,MAAMC,mBAEnC,aACM,kBACN,WACM,oBACN,cACM,gBACN,UACM,kBACN,UACA,UACA,QACA,YACM,oBACN,YACM,sBACN,aACM,gBACN,YACM,iBACN,WACM,sBACN,YACM,8BACN,UACA,UACA,SACA,YACM,QAInB/C,YAAYC,YACFA,WACD+C,YAAc,QACdC,KAAON,SAASO,0BAA0BvC,KAAKV,WAC/CkD,aAAe7C,aACXM,eAAewC,YAAY9C,WAC5B+C,QAAU1C,UACT2C,aAAa,cAAc,WAC5BD,QAAQzC,eAAe2C,aAAaF,SACpCA,QAAQzC,eAAe4C,OAAOC,mBAAmBJ,QAAQ1B,WACzD0B,QAAQnD,QAAQwD,SAChBL,QAAQjD,OAAOuD,MAAQN,QAAQjD,OAAOuD,MAAMC,QAAOC,MAAQA,OAASR,YACrE1C,KAAKgB,iBAEPmC,kBAAoBxD,aAChBM,eAAewC,YAAY9C,WAC5ByD,WAAapD,KACjBqD,IAAIC,YAAY,CACZ,CAACC,IAAK,gBAAiBC,UAAW,oBACnCC,MAAK,SAASC,aACTpE,KAAOuC,OAAO6B,QAAQ,GAAK,IAAKN,WAAW9D,SAClC,OAATA,MAAiBA,KAAKwB,OAAS,EAAG,KAC7BsC,WAAW3D,OAAOkE,kBAAkBrE,kBACrC8D,WAAWQ,cAActE,YAGvBuE,QAAUT,WAAWpC,UAC3BoC,WAAW9D,KAAOA,KAClB8D,WAAW7D,QAAQuE,UAAYxE,WACzByE,QAAUX,WAAWpC,UAC3BoC,WAAWnD,eAAe4C,OAAOmB,WAAWH,QAASE,aAIxDE,MAAK,SAAUC,UACZC,QAAQC,MAAMF,mBAGrBG,iBAAmB1E,aACfM,eAAeM,kBAAkB,aACjCN,eAAeqE,WAAWtE,KAAKT,SACpCI,MAAME,wBAGL0E,kBAAoB5E,aAChBM,eAAeM,kBAAkB,QAEdf,MAApBQ,KAAKqC,kBACApC,eAAeuE,eAAexE,WAElCC,eAAeqE,WAAWtE,KAAKT,SACpCI,MAAME,mBAId4E,gBACmC,GAA3BzE,KAAKqC,YAAYvB,OAAa,OACxB4D,GAAK1E,KAAKC,eAAe4C,OAAO8B,SAAS3E,KAAKgB,kBAGpD0D,GAAG3E,MAAK6E,cAECvC,YAAcuC,OACZA,UAEJF,UAEAzD,QAAQC,QAAQlB,KAAKqC,aAGpCwC,cAAcC,WAAYC,mBACjB1C,YAAcyC,WACnBX,QAAQa,IAAI,UAAYhF,KAAKgB,UAAY,SAAW8D,WAAWG,OAAO,EAAG,IAAM,OACxEjF,KAAKC,eAAe4C,OAAOqC,OAAOlF,KAAKgB,UAAW8D,WAAYC,OAEzE5D,kBAAkBC,eACRC,GAAK8D,MAAMhE,kBAAkBC,SACnCC,GAAGyC,UAAY9D,KAAKV,KACpB+B,GAAG+D,UAAUC,IAAI,OAEjBhE,GAAGK,iBAAiB,WAAY1B,KAAKuE,mBACrClD,GAAGK,iBAAiB,QAAS1B,KAAKqE,kBAMtCvE,iBACIqE,QAAQa,IAAI,+BAGR5B,WAAapD,YACVqD,IAAIC,YAAY,CACnB,CAACC,IAAK,SAAUC,UAAW,kBAC3B,CAACD,IAAK,SAAUC,UAAW,oBAC5BC,MAAK,SAASC,SACbN,WAAWnD,eAAeqF,kBAAkB,CACxC,CAAC5B,QAAQ,GAAK,MAAON,WAAWZ,cAChC,CAACkB,QAAQ,GAAIN,WAAWD,wBAG3Bc,MAAK,SAAUC,UACZC,QAAQC,MAAMF,+CAQjBqB,mBAAmBnG,SAC5BC,YAAYC,YACFA,WACD0D,MAAQ,QACRwC,QAAU,QACVhD,aAAe7C,aACXM,eAAewC,YAAY9C,WAC5B+C,QAAU1C,UACT2C,aAAa,gBAAgB,WAC9BD,QAAQzC,eAAe4C,OAAOC,mBAAmBJ,QAAQ1B,UAAY,MACrE0B,QAAQnD,QAAQwD,SAChBL,QAAQjD,OAAO+F,QAAU9C,QAAQjD,OAAO+F,QAAQvC,QAAOC,MAAQA,OAASR,YAEzE1C,KAAKgB,iBAEPyE,mBAAqB9F,aACjBM,eAAewC,YAAY9C,WAC5ByD,WAAapD,SA1SR0F,QAASC,QAASC,aAAc9D,SAAhC4D,QA2SG,eA3SMC,QA2SU,WA3SDC,aA2Sa,GA3SC9D,SA2SIG,cACxB,OAAbA,UAAqBA,SAASnB,OAAS,EAAG,KACrCsC,WAAWO,kBAAkB1B,sBAC9BmB,WAAWQ,cAAc3B,cAIzB4D,KAAO,IAAI7D,SAASC,UACxBmB,WAAW0C,WAAWD,MACtBA,KAAK1E,kBAAkBiC,WAAW7D,QAAQwG,cAAc,mBACxD3C,WAAW4C,QAAO,GAClB5C,WAAWnD,eAAe4C,OAAOoD,QAAQJ,KAAK7E,aApT9DqC,IAAIC,YAAY,CACZ,CAACC,IAAKmC,QAASlC,UAAW,kBAC1B,CAACD,IAAKoC,QAASnC,UAAW,oBAE7BzD,MAAM2D,SACIwC,uBAAaC,OAAO,CACvBC,KAAMF,uBAAaG,MAAMC,YACzBC,MAAO7C,QAAQ,GACf8C,QAAS,CACLC,KAAM,MAEVC,KACIhD,QAAQ,GACR,+CAAiDkC,aAAe,2BAG3E7F,MAAK4G,QACFA,MAAMC,UAAUC,GAAGC,sBAAYL,MAAM,SAC7B7B,OAAStD,SAASyE,cAAc,4BAA4BgB,MAEhEJ,MAAMC,UAAU7D,SAChBjB,SAAS8C,OAAT,IAEJ+B,MAAMK,OAEDjH,MAAK,IAAMuB,SAASyE,cAAc,4BAA4BkB,cAG/DC,cAAgBP,MAAMC,UAAUO,KAAK,gBACzC7F,SAASyE,cAAc,4BAClBrE,iBAAiB,SAAS,SAAS/B,OAChCA,MAAMC,iBACgB,KAAlBD,MAAMyH,SACNF,cAAcG,aAwQtB,OAeCC,oBAAsB3H,aAClBM,eAAewC,YAAY9C,WAC5B4H,MAAQjG,SAASC,cAAc,SACnCgG,MAAMnB,KAAO,OACbmB,MAAMC,SAAWC,QACTC,KAAOD,EAAEE,OAAO3E,MAAM,QACrB4E,eAAeF,MAAM,IAE9BH,MAAMF,cAELQ,eAAiBlI,QAClBA,MAAMC,uBAELkI,gBAAkB,KACf9H,KAAKC,eAAe8H,eAGnBxI,QAAQwG,cAAc,SAASX,UAAUC,IAAI,kBAEjD2C,gBAAkB,KACfhI,KAAKC,eAAe8H,eAGnBxI,QAAQwG,cAAc,SAASX,UAAUrC,OAAO,kBAGpDkF,WAAatI,WACdA,MAAMC,iBACND,MAAME,uBACDI,eAAeM,kBAAkB,QAClCP,KAAKC,eAAe8H,qBAGnBxI,QAAQwG,cAAc,SAASX,UAAUrC,OAAO,kBAC/CmF,KAAOvI,MAAMiB,aAAaC,QAAQ,oBAC3BrB,IAAT0I,MAAsBA,KAAKpH,OAAS,EAAG,CACvCqD,QAAQa,IAAI,QAAUkD,KAAO,SAAWlI,KAAKgB,iBAEvC6E,KAAO7F,KAAKC,eAAekI,eAAeD,cACnC1I,IAATqG,OAAuB7F,KAAK2D,kBAAkBkC,KAAKvG,uBAG9CsE,cAAciC,KAAKvG,SAGxBuG,gBAAgBN,WAAY,OAEtB1B,QAAUgC,KAAK7E,UACrB6E,KAAKpG,OAAO+F,QAAUK,KAAKpG,OAAO+F,QAAQvC,QAAOC,MAAQA,OAAS2C,YAE7DuC,aAAavC,WACbtG,QAAQwG,cAAc,MAAMtE,YAAYoE,KAAKtG,cAE7CyG,QAAO,QACP/F,eAAe4C,OAAOwF,aAAaxE,QAASgC,KAAK7E,gBACnD,GAAI6E,gBAAgB7D,SAAU,OAC3B6B,QAAUgC,KAAK7E,UACrB6E,KAAKpG,OAAOuD,MAAQ6C,KAAKpG,OAAOuD,MAAMC,QAAOC,MAAQA,OAAS2C,YAEzDC,WAAWD,WAEXtG,QAAQwG,cAAc,MAAMtE,YAAYoE,KAAKtG,cAC7CyG,QAAO,QACP/F,eAAe4C,OAAOmB,WAAWH,QAASgC,KAAK7E,gBAEpDmD,QAAQC,MAAM,wBACdD,QAAQa,IAAIa,UAEb,CAEH1B,QAAQa,IAAI,wBACRsD,MAAQ3I,MAAMiB,aAAa0H,UAC1B,IAAIC,EAAE,EAAGA,EAAED,MAAMxH,OAAQyH,IAAK,KAC3BrF,KAAOoF,MAAMC,GAAGC,mBAChBtF,WACKuF,aAAavF,cAK7BwF,qBAAuB/I,aACnBM,eAAewC,YAAY9C,WAC5ByD,WAAapD,KACjBqD,IAAIC,YAAY,CACZ,CAACC,IAAK,kBAAmBC,UAAW,oBACrCC,MAAK,SAASC,aACTiF,WAAa9G,OAAO6B,QAAQ,GAAK,IAAK,OACvB,OAAfiF,YAAuBA,WAAW7H,OAAS,EAAG,KACzCsC,WAAWO,kBAAkBgF,wBAC9BvF,WAAWQ,cAAc+E,gBAIzB9C,KAAO,IAAIN,WAAWoD,YAC1BvF,WAAWgF,aAAavC,MACxBA,KAAK1E,kBAAkBiC,WAAW7D,QAAQwG,cAAc,mBACxD3C,WAAW4C,QAAO,GAClB7B,QAAQa,IAAI,qBAAuBa,KAAK7E,WACxCoC,WAAWnD,eAAe4C,OAAO+F,MAAM/C,KAAK7E,eAI/CiD,MAAK,SAAUC,UACZC,QAAQC,MAAMF,mBAIrBG,iBAAmB1E,QACpBwE,QAAQa,IAAI,yBACP/E,eAAeM,kBAAkB,aAEjCN,eAAeqE,WAAWtE,KAAKT,SACpCI,MAAME,kBACNF,MAAMC,uBAELuD,kBAAoBxD,aAChBM,eAAewC,YAAY9C,WAC5ByD,WAAapD,KACjBqD,IAAIC,YAAY,CACZ,CAACC,IAAK,kBAAmBC,UAAW,oBACrCC,MAAK,SAASC,aACTpE,KAAOuC,OAAO6B,QAAQ,GAAK,IAAKN,WAAW9D,SAClC,OAATA,MAAiBA,KAAKwB,OAAS,EAAG,KAC7BsC,WAAW3D,OAAOkE,kBAAkBrE,kBACrC8D,WAAWQ,cAActE,YAGvBuE,QAAUT,WAAWpC,UAAY,KACvCoC,WAAW9D,KAAOA,KAClB8D,WAAW7D,QAAQwG,cAAc,SAASjC,UAAYxE,WAChDyE,QAAUX,WAAWpC,UAAY,KACvCoC,WAAWnD,eAAe4C,OAAOwF,aAAaxE,QAASE,aAG1DE,MAAK,SAAUC,UACZC,QAAQC,MAAMF,mBAGrB2E,aAAe,UACXtJ,QAAQiC,aAAa,iBAAkBxB,KAAK8I,oBAEhDC,gBAAkBpJ,QACnBA,MAAMqJ,cAAc5D,UAAUC,IAAI,eAEjC4D,eAAiBtJ,QAClBA,MAAMqJ,cAAc5D,UAAUrC,OAAO,UAG7CoF,eAAeD,UACPgB,MAAQhB,KAAKiB,YACZ,IAAIZ,EAAI,EAAGA,EAAIvI,KAAKgD,MAAMlC,OAAQyH,OAC/BvI,KAAKgD,MAAMuF,GAAGjJ,OAAS4J,aAChBlJ,KAAKgD,MAAMuF,OAGrB,IAAIA,EAAI,EAAGA,EAAIvI,KAAKwF,QAAQ1E,OAAQyH,OACjCvI,KAAKwF,QAAQ+C,GAAGjJ,OAAS4J,aACN,GAAfhB,KAAKpH,OACEd,KAAKwF,QAAQ+C,GAEbvI,KAAKwF,QAAQ+C,GAAGJ,eAAeD,MAMtDkB,WAAWlB,UAEHgB,MAAQhB,KAAKiB,gBAEH3J,IAAV0J,OAAuC,GAAhBA,MAAMpI,cACzBoH,KAAKmB,QAAU,GACflF,QAAQC,MAAM,wBAEXpE,SAEN,IAAIuI,EAAI,EAAGA,EAAIvI,KAAKwF,QAAQ1E,OAAQyH,OACjCvI,KAAKwF,QAAQ+C,GAAGjJ,OAAS4J,aAEN,GAAfhB,KAAKpH,OAEEd,KAAKwF,QAAQ+C,GAEbvI,KAAKwF,QAAQ+C,GAAGa,WAAWlB,UAM1CrC,KAAO,IAAIN,WAAW2D,mBACrBd,aAAavC,MACXA,KAAKuD,WAAWlB,MAG3BvE,kBAAkBrE,UACT,IAAIiJ,EAAI,EAAGA,EAAIvI,KAAKgD,MAAMlC,OAAQyH,OACW,GAA1CjJ,KAAKgK,cAActJ,KAAKgD,MAAMuF,GAAGjJ,aAC1B,MAGV,IAAIiJ,EAAI,EAAGA,EAAIvI,KAAKwF,QAAQ1E,OAAQyH,OACW,GAA5CjJ,KAAKgK,cAActJ,KAAKwF,QAAQ+C,GAAGjJ,aAC5B,SAGR,EAGXmJ,aAAavF,UAAMgF,iEAAO1I,QAChB+J,iBAAwB/J,IAAT0I,KACrBA,KAAOA,MAAQ,GACXhF,KAAKsG,OACLtG,KAAKwE,MAAKA,YAGDE,eAAeF,KAAM6B,gBAEvBrG,KAAKuG,YAqBpB7B,eAAeF,UAAMV,iEACZhH,KAAK2D,kBAAkB+D,KAAKpI,uBACxBsE,cAAc8D,KAAKpI,UAGxBuG,KAAO,IAAI7D,SAAS0F,KAAKpI,MACzBoK,OAAS,IAAIC,WACjBD,OAAOE,WAAWlC,KAAK,SACvBgC,OAAOG,OAASC,kBACRC,QAAUD,YAAYnC,OAAO/C,OACjCiB,KAAKxD,YAAc0H,QACf/C,YACK/G,eAAe+J,UAAUnE,WACzB5F,eAAeqE,WAAWuB,KAAKtG,eAEnCU,eAAe4C,OAAOoH,OAAOpE,KAAK7E,UAAW0G,YAEjD5B,WAAWD,MAChBA,KAAK1E,kBAAkBnB,KAAKT,QAAQwG,cAAc,wBAC7CC,QAAO,GAEhBA,OAAOkE,WACE3K,QAAQiC,aAAa,gBAAiB0I,MAG/C/I,kBAAkBC,eACRC,GAAK8D,MAAMhE,kBAAkBC,SACnCC,GAAGG,aAAa,gBAAiB,eAE3B2I,MAAQ7I,SAASC,cAAc,QACrC4I,MAAMzI,iBAAiB,WAAY1B,KAAK6I,cACxCsB,MAAMrG,UAAY9D,KAAKV,KACvB6K,MAAM/E,UAAUC,IAAI,QACpB8E,MAAMzI,iBAAiB,QAAS1B,KAAKqE,kBACrC8F,MAAMzI,iBAAiB,YAAa1B,KAAK8H,iBACzCqC,MAAMzI,iBAAiB,YAAa1B,KAAKgI,iBACzCmC,MAAMzI,iBAAiB,OAAQ1B,KAAKiI,YACpCkC,MAAMzI,iBAAiB,WAAY1B,KAAK6H,gBACxCxG,GAAGI,YAAY0I,aAETC,MAAQ9I,SAASC,cAAc,MACrC6I,MAAM5I,aAAa,OAAQ,SAC3BH,GAAGI,YAAY2I,WAEV,IAAIC,EAAI,EAAGA,EAAIrK,KAAKwF,QAAQ1E,OAAQuJ,SAChC7E,QAAQ6E,GAAGlJ,kBAAkBiJ,WAEjC,IAAIC,EAAI,EAAGA,EAAIrK,KAAKgD,MAAMlC,OAAQuJ,SAC9BrH,MAAMqH,GAAGlJ,kBAAkBiJ,OAIxCtB,mBAC0D,SAA/C9I,KAAKT,QAAQ+K,aAAa,iBAErCxK,iBACIqE,QAAQa,IAAI,iCACR5B,WAAapD,YACVqD,IAAIC,YAAY,CACnB,CAACC,IAAK,eAAgBC,UAAW,kBACjC,CAACD,IAAK,WAAYC,UAAW,kBAC7B,CAACD,IAAK,YAAaC,UAAW,kBAC9B,CAACD,IAAK,SAAUC,UAAW,kBAC3B,CAACD,IAAK,SAAUC,UAAW,oBAC5BC,MAAK,SAASC,SACbN,WAAWnD,eAAeqF,kBAAkB,CACxC,CAAC5B,QAAQ,GAAK,MAAON,WAAWqC,oBAChC,CAAC/B,QAAQ,GAAK,MAAON,WAAWkE,qBAEhC,CAAC5D,QAAQ,GAAIN,WAAWD,mBACxB,CAACO,QAAQ,GAAK,MAAON,WAAWZ,mBAGnCyB,MAAK,SAAUC,UACZC,QAAQC,MAAMF,aAI1B4B,WAAWD,WAAa7C,MAAMuH,KAAK1E,MAAOA,KAAKpG,OAASO,KACxDoI,aAAavC,WAAaL,QAAQ+E,KAAK1E,MAAOA,KAAKpG,OAASO,2CAMnDwK,iBAAiBjF,WAC1BlG,YAAYC,KAAMmL,iBACRnL,MACN6E,QAAQa,IAAI,oBAAsB1F,WAC7BmL,UAAYA,UACjBA,UAAUC,MAAMH,KAAKvK,MAEzBC,sBACWD,KAAKyK,UAEhBzJ,gBACW,GAEXlB,iBACIqE,QAAQa,IAAI,+BACR5B,WAAapD,YACVqD,IAAIC,YAAY,CACnB,CAACC,IAAK,eAAgBC,UAAW,kBACjC,CAACD,IAAK,WAAYC,UAAW,kBAC7B,CAACD,IAAK,YAAaC,UAAW,oBAC/BC,MAAK,SAASC,SACbN,WAAWnD,eAAeqF,kBAAkB,CACxC,CAAC5B,QAAQ,GAAK,MAAON,WAAWqC,oBAChC,CAAC/B,QAAQ,GAAK,MAAON,WAAWkE,0BAInCrD,MAAK,SAAUC,UACZC,QAAQC,MAAMF,+CAMxByG,WACFtL,YAAYuL,SAAUC,SAAUC,WAAY/C,UACxC5D,QAAQa,IAAI,qBAAuB+C,eAE9B6C,SAAWA,cACXG,OAASC,oBAAWC,aAAaJ,SAAU,CAC5CK,QAAS,SACTC,WAAY,EACZC,eAAe,EACfC,mBAAmB,EACnBC,iBAAiB,EACjBvD,SAAUA,SACVwD,UAAW,KAAQ,gBAAiBR,OAAOS,iBAAiB,OAAS,SACrEC,aAAa,SAGZV,OAAOW,QAAQ,OAAQ,aAEvBX,OAAOY,UAAU,QAAS,gBAE1BC,IAAMd,kBAIbe,YAEFxM,YAAYyM,cAAeC,YAAatB,gBAC/BuB,eAAiBF,cAAc/F,cAAc,iBAE7CgF,OAASC,oBAAWC,aAAajL,KAAKgM,eAAgB,CACvDd,QAAS,SACTC,WAAY,EACZC,eAAe,EACfC,mBAAmB,EACnBC,iBAAiB,EACjBvD,UAAU,EACVwD,UAAW,KAAQ,gBAAiBR,OAAOS,iBAAiB,OAAS,SACrEC,aAAa,SAGZV,OAAOW,QAAQ,OAAQ,aAEvBX,OAAOY,UAAU,QAAS,gBAG1BM,gBAAazM,OAEb0M,MAAQ,QAERH,YAAcA,iBACd9E,WAAQzH,OACRiL,UAAYA,UAIrB0B,UACQnM,KAAKoM,OACLC,cAAcrM,KAAKoM,OAI3BE,UAAUpJ,UAAMqJ,kEAAQ/M,UACfgN,mBAAkB,QAEThN,IAAV+M,UAEKA,MAAQ,EAAGA,MAAQvM,KAAKkM,MAAMpL,QAC3Bd,KAAKkM,MAAMK,SAAWrJ,KADaqJ,aAM/CpI,QAAQa,IAAI,iBAAmBuH,YAG1BL,MAAMO,OAAOF,MAAO,QACpBL,MAAM3B,KAAKrH,MAGXqJ,MAAQ,EAAGA,MAAQvM,KAAKkM,MAAMpL,OAAQyL,aAClCL,MAAMK,OAAOxB,OAAO2B,oBAAoBpM,MAAMqM,QAAU,UAGjEzJ,KAAK6H,OAAO2B,oBAAoBpM,MAAMqM,QAAU,QAChDzJ,KAAK6H,OAAO6B,UACZ1J,KAAK6H,OAAO9D,aAGOzH,IAAfQ,KAAKiH,MAAqB,MACrBA,MAAM7B,UAAUrC,OAAO,SACX/C,KAAKiH,MAAMlB,cAAc,UAC/BzF,MAAMqM,QAAU,OAE/BzJ,KAAK0I,IAAIxG,UAAUC,IAAI,SACvBnC,KAAK0I,IAAI7F,cAAc,UAAUzF,MAAMqM,QAAU,cAC5C1F,MAAQ/D,KAAK0I,IAGtBiB,QAAQ3J,UACC,IAAIqF,EAAI,EAAGA,EAAIvI,KAAKkM,MAAMpL,OAAQyH,OAC/BvI,KAAKkM,MAAM3D,KAAOrF,YAClBiB,QAAQa,IAAI,mCAEPkH,MAAM3D,GAAGqC,SAAS/F,cAAc7E,KAAKkM,MAAM3D,GAAGwC,OAAO+B,iBAErDZ,MAAMO,OAAOlE,EAAG,GAErBrF,KAAK6H,OAAO2B,oBAAoB3J,cAC5B/C,KAAKkM,MAAMpL,OAAS,QACfwL,UAAUtM,KAAKkM,MAAMlM,KAAKkM,MAAMpL,OAAO,GAAId,KAAKkM,MAAMpL,OAAO,IAK9EqD,QAAQC,MAAM,2BAGlBxB,aAAamK,cACJ,IAAIxE,EAAI,EAAGA,EAAIvI,KAAKkM,MAAMpL,OAAQyH,OAC/BvI,KAAKkM,MAAM3D,GAAGqC,WAAamC,qBACtBb,MAAM3D,GAAGqD,IAAI7I,cACbmJ,MAAM3D,GAAGqD,SAAMpM,YACfqN,QAAQ7M,KAAKkM,MAAM3D,IAKpCyB,UAAU+C,aACFlB,YAAYmB,aAAehN,KAAKkM,MAAMpL,mBACtCc,MAAM,yCAMFgK,IAAMtK,SAASC,cAAc,UAG7B2B,KAAO,IAAIyH,WAAWoC,SAAU/M,KAAKgM,eAAgBJ,IAAK5L,KAAKyK,UAAU1C,UAC7EgF,SAAStI,aACJ1E,MAAK4B,YACWnC,IAATmC,OACAA,KAAO,OAEXuB,KAAK6H,OAAOkC,SAAStL,WACCnC,IAAlBuN,SAASzK,MACTY,KAAK6H,OAAOY,UAAU,OAAQoB,SAASzK,MAM3CY,KAAK6H,OAAO6B,aAEfM,OAAO9I,QACJD,QAAQC,MAAM,SAAUA,OACxBxC,MAAMwC,MAAN,IAGRwH,IAAIxG,UAAUC,IAAI,WACd8H,MAAQ7L,SAASC,cAAc,QACnC4L,MAAM/H,UAAUC,IAAI,SACpB8H,MAAMrJ,UAAY,UAClBqJ,MAAMzL,iBAAiB,SAAS/B,QAC5BA,MAAMC,iBACND,MAAME,uBACDgN,QAAQ3J,MACbiK,MAAMC,cAAcrK,YAExB6I,IAAI9H,UAAYiJ,SAASzN,KACzBsM,IAAIyB,OAAOF,OACXvB,IAAIlK,iBAAiB,SAAS/B,QAC1BA,MAAMC,iBACND,MAAME,uBACDyM,UAAUpJ,cAEd6I,YAAYsB,OAAOzB,UAEnBM,MAAM3B,KAAKrH,WACXoJ,UAAUpJ,MAMvBsB,eAAeuI,cAEN,IAAIxE,EAAI,EAAGA,EAAIvI,KAAKkM,MAAMpL,OAAQyH,OAC/BvI,KAAKkM,MAAM3D,GAAGqC,WAAamC,0BAEtBT,UAAUtM,KAAKkM,MAAM3D,GAAIA,QAIjCyB,UAAU+C,UAEX/M,KAAKoM,OACLC,cAAcrM,KAAKoM,WAEnBkB,KAAOtN,UAEFoM,MAAQmB,aAAY,WACrBpJ,QAAQa,IAAI,4BACZsI,KAAKd,mBAAkB,KA/7Bb,KAo8BtBA,kBAAkBzH,WACVyI,YAAcxN,KAAKyN,kBACnBD,aAEIA,YAAYzC,OAAO+B,WAAWY,OAAO5M,OAAS,GAC9C0M,YAAY5C,SAAS/F,cAAc2I,YAAYzC,OAAO+B,WAAY/H,OAO9E0I,yBACQzN,KAAKkM,MAAMpL,OAAS,EAIbd,KAAKkM,MAAMlM,KAAKkM,MAAMpL,OAAO,GAEjC,KAEX6M,eACQ3N,KAAKkM,MAAMpL,OAAS,QAIfoL,MAAMlM,KAAKkM,MAAMpL,OAAO,GAAGiK,OAAO6B,UAG/CnG,OAIItC,QAAQa,IAAI,0BAA4BhF,KAAKkM,MAAMpL,OAAO8M,YAC1DzJ,QAAQ0J,UAAU,QAClB1J,QAAQ2J,KAAK,YAER,IAAIvF,EAAI,EAAGA,EAAIvI,KAAKkM,MAAMpL,OAAQyH,SAC9B2D,MAAM3D,GAAGqC,SAAS/F,cAAc7E,KAAKkM,MAAM3D,GAAGwC,OAAO+B,YAAY,GAyB1E3I,QAAQa,IAAI,mBACZb,QAAQ0J,UAAU,QAClB1J,QAAQ4J,QAAQ,yBAzPlBlC,yBACkB,6BAyQpBxM,wDAgSoB2O,eACExO,IAAdQ,KAAKE,YAGJA,KAAKI,MAAMqM,QAAsB,SAAZqB,QAAqB,QAAU,YACpDC,YAA2B,SAAZD,QAApB,SApSKtD,MAAQ,QACR7H,YAASrD,OACT0O,iBAAc1O,OACd2O,iBAAc3O,OACdU,UAAOV,OACPyO,aAAc,OACdhH,WAAQzH,OACRuI,UAAW,OACXqG,SAAW,aAGpBC,eAAejN,SACX+C,QAAQa,IAAI,kBACZ5D,QAAQ0C,+xDA8CF5D,KAAOoB,SAASC,cAAc,OACpCrB,KAAK4D,0PACMxC,SAASyE,cAAc,QAC7BtE,YAAYvB,WAEZiO,YAAc/M,aACd8M,YAAc,IAAIrC,YAAYzK,QAAQ2E,cAAc,WACrD3E,QAAQ2E,cAAc,SAAU/F,MAGxCsO,KAAKzI,KAAMhD,OAAQkF,cAAUqG,gEAAW,aAC/BrG,SAAWA,cACXqG,SAAWA,eAqEVG,WAAa1I,KAAKE,cAAc,aAEtCwI,WAAW7M,iBAAiB,QAAQ/B,QAChCA,MAAMC,oBAEV2O,WAAW7M,iBAAiB,YAAY/B,QACpCA,MAAMC,wBAGN4O,GAAKlN,SAASC,cAAc,MAChCiN,GAAGhN,aAAa,OAAQ,QACxBgN,GAAGhN,aAAa,kBAAmB,cACnC+M,WAAW9M,YAAY+M,SAElB3L,OAASA,YAGTuG,WAAW,UACXvG,OAAO4L,KAAKzO,MACZD,MAAM,KACHoE,QAAQa,IAAI,iBACZb,QAAQa,IAAIhF,KAAK0K,WACZ,IAAInC,EAAI,EAAGA,EAAIvI,KAAK0K,MAAM5J,OAAQyH,IAAK,KACpCmG,KAAO1O,KAAK0K,MAAMnC,GACtBmG,KAAKvN,kBAAkBqN,IACvBE,KAAK7F,mBAKjB8F,OAAOjN,iBAAiB,SAAS+F,SACxBhF,qBAGLmM,GAAK5O,KAAKmO,YAAYpI,cAAc,QACvB,IAAI8I,gBAAe,UAC3BX,YAAYP,kBAEZmB,QAAQF,IA1GCG,iBAERC,OAASD,QAAQE,uBACjBC,MAAQH,QAAQI,uBAGlBC,EAAI,EAEJC,SAAW,EACXC,WAAY,QAEVC,gBAAkB,KACpBR,QAAQzO,MAAMkP,eAAe,UAC7BlO,SAASoF,KAAKpG,MAAMkP,eAAe,UAEnCR,OAAO1O,MAAMkP,eAAe,eAC5BR,OAAO1O,MAAMkP,eAAe,kBAEfhQ,MAAT0P,QACAA,MAAM5O,MAAMkP,eAAe,eAC3BN,MAAM5O,MAAMkP,eAAe,oBAmB7BC,iBAAmBhI,OACjB6H,UAAW,OAELI,GAAKjI,EAAEkI,QAAUP,MACnBQ,SAA8B,KAAjBP,SAAWK,IAAaX,QAAQc,WAAWC,wBAAwBC,MACpFf,OAAO1O,MAAM0P,oBAAcJ,cACdpQ,MAAT0P,MACAA,MAAM5O,MAAM0P,oBAAc,IAAIJ,cAE9Bb,QAAQc,WAAWC,wBAAwBC,MACvChB,QAAQc,WAAWC,wBAAwBC,MAAQL,GAE3DH,uBAEAU,kBAIFA,eAAiB,WACnBV,kBAGAjO,SAAS4O,oBAAoB,YAAaT,kBAC1CnO,SAAS4O,oBAAoB,UAAWD,iBAG5ClB,QAAQrN,iBAAiB,aAxCA+F,IAErB2H,EAAI3H,EAAEkI,aAEDpP,kBAAkB,QACvB8O,SAAWL,OAAOc,wBAAwBC,MAC1CT,WAAY,EAEZhO,SAASI,iBAAiB,YAAa+N,kBACvCnO,SAASI,iBAAiB,UAAWuO,gBAErCV,sBAuERY,CAAUtK,KAAKE,cAAc,yBAwBjCvB,eAAeuI,eACNmB,YAAY1J,eAAeuI,UAEpC/C,UAAU+C,eACDmB,YAAY1J,eAAeuI,UAGpCnK,aAAamK,eACJmB,YAAYtL,aAAamK,UAGlC5E,eAAeD,SACX/D,QAAQa,IAAI,SAAWkD,KAAO,KACN,KAApBA,KAAKjD,OAAO,EAAE,eACdd,QAAQC,MAAM,+BAAiC8D,UAI/CkI,UAAYlI,KAAKhG,MAAM,YAC3BkO,UAAUjH,QAECnJ,KAAK0K,MAAM,GACVvC,eAAeiI,WAW/BhH,WAAWlB,MACP/D,QAAQa,IAAI,4BAA8BkD,MAE1B,MAAZA,KAAK,IACL/D,QAAQC,MAAM,gCAAkC8D,UAKhDwG,KAHA0B,UAAYlI,KAAKhG,MAAM,KAC3BkO,UAAUjH,YAGNzG,QAAU1C,YACY,IAAtBA,KAAK0K,MAAM5J,QACX4N,KAAO,IAAIlE,SAAS9H,QAAQ0L,SAAU1L,SAC/BgM,KAAKtF,WAAWgH,aAWvB1B,KAAO1O,KAAK0K,MAAM,GACXgE,KAAKtF,WAAWgH,YAI/B9K,kBAAkBmJ,SACVzO,KAAK+H,gBAGT5D,QAAQa,IAAI,qBAAuByJ,KAAK3N,YAGpC0N,GAAKlN,SAASyE,cAAc,8BAEhCyI,GAAG1K,UAAY,OACV,IAAIyE,EAAI,EAAGA,EAAIkG,KAAK3N,OAAQyH,IAAK,OAC5BlH,GAAKC,SAASC,cAAc,MAClCF,GAAGG,aAAa,QAAS,eACzBH,GAAGyC,UAAY2K,KAAKlG,GAAG,GACvBlH,GAAGK,iBAAiB,QAAS+M,KAAKlG,GAAG,IACrCpE,QAAQa,IAAIyJ,KAAKlG,GAAG,IACpBiG,GAAG/M,YAAYJ,SAGdnB,KAAOsO,GAAGqB,WAWnBpN,mBACSlC,kBAAkB,aAClB+D,gBAAW9E,GAEpB8E,WAAW/E,cACYC,IAAfQ,KAAKiH,YACAA,MAAM7B,UAAUrC,OAAO,cAEhBvD,IAAZD,SACAA,QAAQ6F,UAAUC,IAAI,cACjB4B,MAAQ1H,cAER0H,WAAQzH,EAUrBiH,cACItC,QAAQa,IAAIhF,MACZmE,QAAQa,IAAIhF,KAAKkO,aACVlO,KAAKkO,YAAYzH"}