{"version":3,"file":"FileViewer.min.js","sources":["../src/FileViewer.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * The ProFormA Question CodeMirror support functions\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2022 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     K.Borm <k.borm[at]ostfalia.de>\n */\n\n\n/** NOTE:\n * Currently creating subfolders is disabled, because the moodle question filesaver does not support it */\n\nlet autosaveIntervall = -1; // in milliseconds\n\n/* eslint-disable no-unused-vars */\n\n// Use these imports for Moodle\n// -----------------------------\nimport \"./MoodleSyncer\";\n\nimport './codemirror-global';\nimport CodeMirror from \"./codemirror\";\n\nimport \"./clike\";\nimport \"./python\";\nimport \"./javascriptmode\"; // renamed from javascript\nimport \"./xml\";\nimport \"./matchbrackets\";\nimport \"./closebrackets\";\nimport \"./active-line\";\n\n// import Config from 'core/config';\nimport * as Str from 'core/str';\n// import * as notification from 'core/notification';\nimport {get_string as getString} from 'core/str';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\n\n// Use this for editortest.html\n// -----------------------------\n/*\nimport './codemirror-global.js';\nimport \"./FakeSyncer.js\";\n\nimport CodeMirror from \"./codemirror/src/codemirror.js\";\nimport \"./codemirror/mode/clike/clike.js\";\nimport \"./codemirror/mode/javascript/javascript.js\";\nimport \"./codemirror/mode/python/python.js\";\nimport \"./codemirror/mode/xml/xml.js\";\nimport \"./codemirror/addon/selection/active-line.js\";\nimport \"./codemirror/addon/edit/matchbrackets.js\";\nimport \"./codemirror/addon/edit/closebrackets.js\";\nclass Config { // Fake\n    static wwwroot = '';\n    static sesskey = '';\n}\nclass FakeAjaxResult {\n    constructor(result) {\n        this.result = result;\n    }\n    done(callback) {\n        callback(this.result);\n        return this;\n    }\n    fail(callback) {\n        return this;\n    }\n}\nclass Str {\n    static get_strings(dict) {\n        console.log('fake get_strings');\n        console.log(dict);\n        let result = [];\n        let index = 0;\n        dict.forEach(function(item, index, array) {\n            // var value = dict[key];\n            result[index] = item['key'];\n        });\n        console.log(result);\n        return new FakeAjaxResult(result);\n        // return FakeAjaxResult.create(result);\n        // return Promise.resolve(result);\n    }\n}\nfunction getString(text) { return text; }\n*/\n\n\n// 'use strict'; ecma6 code is always strict\n\n\n// TODO:\n// - Split View: Problem mit Flackern\n// - Theme wechseln\n// - Menu erstmal raus - auÃŸer zum Wechseln des Themes\n// - Andere Browser testen\n\n// replacement for prompt needed for behat tests.\n// Behat tests fail on prompt and alert.\nfunction modalPrompt(titleId, labelId, defaultValue, callback) {\n    let stringsPromise = Str.get_strings([\n        {key: titleId, component: 'qtype_proforma'},\n        {key: labelId, component: 'qtype_proforma'},\n        ]);\n    let modalPromise = ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL});\n\n    Promise.all([stringsPromise, modalPromise])\n        .then(([strings, modal]) => {\n            modal.setTitle(strings[0]);\n            modal.setSaveButtonText('Ok');\n            modal.setBody(strings[1] +\n                '<input type=\"text\" name=\"promptname\" value=\"' + defaultValue + '\" size=\"63\"></input>');\n            modal.getRoot().on(ModalEvents.save, () => {\n                let result = document.querySelector(\"input[name='promptname']\").value;\n                // console.log(result);\n                modal.getRoot().remove();\n                callback(result);\n            });\n            modal.show()\n                // Set focus into input field.\n                .then(() => document.querySelector(\"input[name='promptname']\").focus());\n            // Add trigger for return to trigger default action.\n            let defaultButton = modal.getRoot().find('.btn-primary');\n            document.querySelector(\"input[name='promptname']\")\n                .addEventListener(\"keyup\", function(event) {\n                    event.preventDefault();\n                    if (event.keyCode === 13) {\n                        defaultButton.click();\n                    }\n                });\n        })\n        .catch( error => {\n            console.error('error:', error);\n            alert(error);\n        });\n}\n\n\nfunction modalAlert(textId, param) {\n    let stringsPromise;\n    if (param) {\n        stringsPromise = Str.get_strings([\n            {key: 'info'},\n            {key: textId, component: 'qtype_proforma', param},\n        ]);\n    } else {\n        stringsPromise = Str.get_strings([\n            {key: 'info'},\n            {key: textId, component: 'qtype_proforma'},\n        ]);\n    }\n    let modalPromise = ModalFactory.create({type: ModalFactory.types.DEFAULT});\n    Promise.all([stringsPromise, modalPromise])\n        .then(([strings, modal]) => {\n            modal.setTitle(strings[0]);\n            modal.setBody(strings[1]);\n            modal.show()\n        })\n        .catch( error => {\n            console.error('error:', error);\n            alert(error);\n        });\n}\n\nfunction modalConfirm(titleId, textId, callback, param) {\n    let stringsPromise;\n    if (param) {\n        stringsPromise = Str.get_strings([\n            {key: titleId, component: 'qtype_proforma'},\n            {key: textId, component: 'qtype_proforma', param},\n        ]);\n    } else {\n        stringsPromise = Str.get_strings([\n            {key: titleId, component: 'qtype_proforma'},\n            {key: textId, component: 'qtype_proforma'},\n        ]);\n    }\n    let modalPromise = ModalFactory.create({type: ModalFactory.types.SAVE_CANCEL});\n    Promise.all([stringsPromise, modalPromise])\n        .then(([strings, modal]) => {\n            modal.setTitle(strings[0]);\n            modal.setSaveButtonText('Ok');\n            modal.setBody(strings[1]);\n            modal.getRoot().on(ModalEvents.save, () => {\n                modal.getRoot().remove();\n                callback();\n            });\n            modal.show();\n        })\n        .catch( error => {\n            console.error('error:', error);\n            alert(error);\n        });\n}\n\n/**\n * TreeNode\n */\nclass TreeNode {\n    constructor(name) {\n        this.name = name;\n        this.element = undefined; // DOM element\n        this.parent = undefined; // parent Treenode\n\n        this.boundHandleContextMenu = event => {\n            // console.log(event)\n            event.preventDefault();\n            event.stopPropagation(); // otherwise parent node handles event, too\n\n            this.setContextMenu()\n                .then(() => {\n                    if (this.getFramework().menu === undefined) {\n                        return;\n                    }\n                    const showMenu = ({ top, left }) => {\n                        this.getFramework().menu.style.left = `${left}px`;\n                        this.getFramework().menu.style.top = `${top}px`;\n                        // this.getFramework().menu.style.setProperty('--mouse-x', event.clientX + 'px');\n                        // this.getFramework().menu.style.setProperty('--mouse-y', event.clientY + 'px');\n                        this.getFramework().toggleContextmenu('show');\n                    };\n\n                    // console.log(`contextmenu: ${event}`);\n\n                    const origin = {\n                        left: event.pageX,\n                        top: event.pageY\n                    };\n                    // console.log(`${event.pageX}px ${event.pageY}px`);\n                    // console.log(event);\n                    showMenu(origin);\n                });\n        };\n        this.handleDragStart = event => {\n            if (event.dataTransfer.getData('treeitem').length == 0) {\n                // console.log('dragstart: ' + this.getPath());\n                event.dataTransfer.setData('treeitem', this.getPath());\n            }\n        };\n    }\n    getPath() {\n        return this.parent === undefined? this.name : this.parent.getPath() + '/' + this.name ;\n    }\n    // Override\n    setContextMenu() {\n        TreeNode.menu = undefined;\n        return Promise.resolve(null);\n    }\n    displayInTreeview(domnode) {\n        const li = document.createElement('li');\n        li.setAttribute('role', 'treeitem');\n        li.setAttribute('draggable', 'true');\n        domnode.appendChild(li);\n        li.addEventListener('contextmenu', this.boundHandleContextMenu);\n        li.addEventListener('dragstart', this.handleDragStart);\n        this.element = li; // Store element\n        return li;\n    }\n\n    getFramework() {\n        return this.parent.getFramework();\n    }\n\n    async alreadyExists(name) {\n        modalAlert('alreadyexists', name);\n    }\n}\n\n/**\n * FileNode\n */\nexport class FileNode extends TreeNode {\n    static getEditorModeFromFilename(filename) {\n        const extension = filename.split('.').pop().toLowerCase();\n        switch (extension) {\n            case \"java\":\n                return \"text/x-java\";\n            case \"py\":\n                return \"text/x-python\";\n            case \"setlx\":\n                return \"text/text\";\n            case \"c\":\n                return \"text/x-csrc\";\n            case \"cpp\":\n            case \"cxx\":\n            case \"h\":\n            case \"hpp\":\n                return \"text/x-c++src\";\n            case \"xml\":\n                return \"application/xml\";\n            case \"html\":\n                return \"text/html\";\n            case \"sql\":\n                return \"text/x-sql\";\n            case \"js\":\n                return \"text/javascript\";\n            case \"php\":\n                return \"application/x-httpd-php\";\n            case 'txt':\n            case 'log':\n            case 'md':\n            case 'csv':\n                return \"text\";\n        }\n    }\n\n    constructor(name) {\n        super(name);\n        this.filecontent = '';\n        this.mode = FileNode.getEditorModeFromFilename(this.name);\n        this.handleDelete = event => {\n            this.getFramework().handleClick(event);\n            let context = this;\n            modalConfirm('delete', 'deletefile', function() {\n                context.getFramework().deleteEditor(context);\n                context.getFramework().syncer.deleteFileOrFolder(context.getPath());\n                context.element.remove();\n                context.parent.files = context.parent.files.filter(item => item !== context);\n            }, this.getPath());\n        };\n        this.boundHandleRename = event => {\n            this.getFramework().handleClick(event);\n            let thecontext = this;\n            modalPrompt('rename', 'enterfilename', thecontext.name, (name) => {\n                if (name !== null && name.length > 0) {\n                    if (!thecontext.parent.isNameChildUnique(name)) {\n                        thecontext.alreadyExists(name);\n                        return;\n                    }\n                    const oldpath = thecontext.getPath();\n                    thecontext.name = name;\n                    thecontext.element.innerHTML = name;\n                    const newpath = thecontext.getPath();\n                    thecontext.mode = FileNode.getEditorModeFromFilename(thecontext.name);\n                    thecontext.getFramework().syncer.renameFile(oldpath, newpath);\n                    // thecontext.element.tabIndex = 0;\n                    // Update name in tab if open\n                    thecontext.getFramework().editorstack.update(thecontext);\n                }\n            });\n        };\n        this.boundHandleClick = event => {\n            this.getFramework().toggleContextmenu(\"hide\");\n            this.getFramework().setFocusTo(this.element);\n            event.stopPropagation();\n            // event.preventDefault();\n        };\n        this.handleDoubleClick = event => {\n            this.getFramework().toggleContextmenu(\"hide\");\n            // document.getElementById('last_action').value = this.name;\n            if (this.filecontent != undefined) {\n                this.getFramework().switchEditorTo(this);\n            }\n            this.getFramework().setFocusTo(this.element);\n            event.stopPropagation();\n            // event.preventDefault();\n        };\n    }\n    getContent() {\n        if (this.filecontent.length == 0) {\n            const p1 = this.getFramework().syncer.download(this.getPath());\n            // console.log('Fileviewer promise result');\n            // console.log(p1);\n            p1.then(result => {\n                // console.log('Downloaded text is: '+ result);\n                this.filecontent = result;\n                return result;\n            });\n            return p1;\n        } else {\n            return Promise.resolve(this.filecontent);\n        }\n    }\n    updateContent(newcontent, async) {\n        this.filecontent = newcontent;\n        console.log('Update ' + this.getPath() + ' with ' + newcontent.substr(0, 20) + '...');\n        return this.getFramework().syncer.update(this.getPath(), newcontent, async);\n    }\n    displayInTreeview(domnode) {\n        const li = super.displayInTreeview(domnode);\n        li.innerHTML = this.name;\n        li.classList.add('doc');\n\n        li.addEventListener('dblclick', this.handleDoubleClick);\n        li.addEventListener('click', this.boundHandleClick);\n\n//        li.addEventListener('mouseover', this.handleMouseOver);\n//        li.addEventListener('mouseout', this.handleMouseOut);\n    }\n\n    setContextMenu() {\n        console.log('FileNode setContextMenu');\n        // this is something from codemirror in promise done function???\n        // so this is renamed\n        let thecontext = this;\n        return Str.get_strings([\n            {key: 'delete', component: 'qtype_proforma'},\n            {key: 'rename', component: 'qtype_proforma'}\n        ]).done(function(strings) {\n            thecontext.getFramework().createContextMenu([\n                [strings[0] + '...', thecontext.handleDelete], // Delete\n                [strings[1] + '...', thecontext.boundHandleRename] // Rename\n            ]);\n        }) /*.fail(notification.exception)*/\n            .fail(function (response) {\n                console.error(response);\n        });\n    }\n}\n\n/**\n * FolderNode\n */\nexport class FolderNode extends TreeNode {\n    constructor(name) {\n        super(name);\n        this.files = []; // Empty list of files.\n        this.folders = []; // Empty list of folders.\n        this.handleDelete = event => {\n            this.getFramework().handleClick(event);\n            let context = this;\n            modalConfirm('delete', 'deletefolder', function() {\n                context.getFramework().syncer.deleteFileOrFolder(context.getPath() + '/.');\n                context.element.remove();\n                context.parent.folders = context.parent.folders.filter(item => item !== context);\n                // console.log(RootNode.projects);\n            }, this.getPath());\n        };\n        this.boundHandleNewFile = event => {\n            this.getFramework().handleClick(event);\n            let thecontext = this;\n            modalPrompt('newemptyfile', 'filename', '', (filename) => {\n                if (filename !== null && filename.length > 0) {\n                    if (!thecontext.isNameChildUnique(filename)) {\n                        thecontext.alreadyExists(filename);\n                        // alert(filename + ' already exists');\n                        return;\n                    }\n                    let node = new FileNode(filename);\n                    thecontext.appendFile(node);\n                    node.displayInTreeview(thecontext.element.querySelector('[role=\"group\"]'));\n                    thecontext.expand(true);\n                    thecontext.getFramework().syncer.newfile(node.getPath());\n                    // Open editor with new empty file for input\n                    thecontext.getFramework().addEditor(node);\n                    thecontext.getFramework().setFocusTo(node.element);\n                }\n            });\n        };\n        this.boundHandleLoadFile = event => {\n            this.getFramework().handleClick(event);\n            let input = document.createElement('input');\n            input.type = 'file';\n            input.onchange = e => {\n                let file = e.target.files[0];\n                this._addFileFromOs(file, true);\n            };\n            input.click();\n        };\n        this.handleDragOver = event => {\n            event.preventDefault();\n        };\n        this.handleDragEnter = () =>  {\n            if (this.getFramework().readOnly) {\n                return;\n            }\n            this.element.querySelector('.name').classList.add('dragover');\n        };\n        this.handleDragLeave = () => {\n            if (this.getFramework().readOnly) {\n                return;\n            }\n            this.element.querySelector('.name').classList.remove('dragover');\n        };\n\n        this.handleDrop = event => {\n            event.preventDefault();\n            event.stopPropagation();\n            this.getFramework().toggleContextmenu(\"hide\");\n            if (this.getFramework().readOnly) {\n                return;\n            }\n            this.element.querySelector('.name').classList.remove('dragover');\n            const path = event.dataTransfer.getData('treeitem');\n            if (path !== undefined && path.length > 0) {\n                console.log('drop ' + path + ' onto ' + this.getPath());\n                // Node element from tree\n                const node = this.getFramework().findNodeByPath(path);\n                if (node !== undefined && !this.isNameChildUnique(node.name)) {\n                    // TODO: wenn der Ordner schon existiert, sollte nur der Inhalt gemergt werden\n                    // alert(node.name + ' already exists');\n                    this.alreadyExists(node.name);\n                    return;\n                }\n                if (node instanceof FolderNode) {\n                    // remove folder in old parent\n                    const oldpath = node.getPath();\n                    node.parent.folders = node.parent.folders.filter(item => item !== node);\n                    // add folder to this\n                    this.appendFolder(node);\n                    this.element.querySelector('ul').appendChild(node.element);\n                    // node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\n                    this.expand(true);\n                    this.getFramework().syncer.renameFolder(oldpath, node.getPath());\n                } else if (node instanceof FileNode) {\n                    const oldpath = node.getPath();\n                    node.parent.files = node.parent.files.filter(item => item !== node);\n                    // add folder to this\n                    this.appendFile(node);\n                    // node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\n                    this.element.querySelector('ul').appendChild(node.element);\n                    this.expand(true);\n                    this.getFramework().syncer.renameFile(oldpath, node.getPath());\n                } else {\n                    console.error('node cannot be moved');\n                    console.log(node);\n                }\n            } else {\n                // External file or folder\n                console.log('drop file/folder');\n                let items = event.dataTransfer.items;\n                for (let i=0; i<items.length; i++) {\n                    let item = items[i].webkitGetAsEntry();  //Might be renamed to GetAsEntry()\n                    if (item) {\n                        this._getFileTree(item);\n                    }\n                }\n            }\n        };\n        this.boundHandleNewFolder = event => {\n            this.getFramework().handleClick(event);\n            let thecontext = this;\n            modalPrompt('newfolder', 'enterfoldername', '', (foldername) => {\n                if (foldername !== null && foldername.length > 0) {\n                    if (!thecontext.isNameChildUnique(foldername)) {\n                        thecontext.alreadyExists(foldername);\n                        // alert(foldername + ' already exists');\n                        return;\n                    }\n                    let node = new FolderNode(foldername);\n                    thecontext.appendFolder(node);\n                    node.displayInTreeview(thecontext.element.querySelector('[role=\"group\"]'));\n                    thecontext.expand(true);\n                    console.log('create new folder ' + node.getPath());\n                    thecontext.getFramework().syncer.mkdir(node.getPath());\n                }\n            });\n        };\n\n        this.boundHandleClick = event => {\n            console.log('FolderNode click');\n            this.getFramework().toggleContextmenu(\"hide\");\n            // Problem: child nodes also get focus\n            this.getFramework().setFocusTo(this.element);\n            event.stopPropagation();\n            event.preventDefault();\n        };\n        this.boundHandleRename = event => {\n            this.getFramework().handleClick(event);\n            let thecontext = this;\n            modalPrompt('rename', 'enterfoldername', thecontext.name, (name) => {\n                if (name !== null && name.length > 0) {\n                    if (!thecontext.parent.isNameChildUnique(name)) {\n                        thecontext.alreadyExists(name);\n                        return;\n                    }\n                    const oldpath = thecontext.getPath() + '/.';\n                    thecontext.name = name;\n                    thecontext.element.querySelector('.name').innerHTML = name;\n                    const newpath = thecontext.getPath() + '/.';\n                    thecontext.getFramework().syncer.renameFolder(oldpath, newpath);\n                }\n            });\n        };\n        this.toggleExpand = () => {\n            this.element.setAttribute('aria-expanded', !this.isExpanded());\n        };\n        this.handleMouseOver = event => {\n            event.currentTarget.classList.add('hover');\n        };\n        this.handleMouseOut = event => {\n            event.currentTarget.classList.remove('hover');\n        };\n    }\n    findNodeByPath(path) {\n        let first = path.shift();\n        for (let i = 0; i < this.files.length; i++) {\n            if (this.files[i].name === first) {\n                return this.files[i];\n            }\n        }\n        for (let i = 0; i < this.folders.length; i++) {\n            if (this.folders[i].name === first) {\n                if (path.length == 0) {\n                    return this.folders[i];\n                } else {\n                    return this.folders[i].findNodeByPath(path);\n                }\n            }\n        }\n        return undefined;\n    }\n    createPath(path) {\n        // console.log(path);\n        let first = path.shift();\n        // console.log('foldernode: create node for <' + first + '>');\n        if (first === undefined || first.length == 0) {\n            if (path.lenghth > 0) {\n                console.error('Bug in creating path');\n            }\n            return this;\n        }\n        for (let i = 0; i < this.folders.length; i++) {\n            if (this.folders[i].name === first) {\n                // Subpath exists\n                if (path.length == 0) {\n                    // full path exists => return folder object.\n                    return this.folders[i];\n                } else {\n                    return this.folders[i].createPath(path);\n                }\n            }\n        }\n        // Path does not exist => create.\n        // console.log('create folder node for ' + first);\n        let node = new FolderNode(first);\n        this.appendFolder(node);\n        return node.createPath(path);\n    }\n\n    isNameChildUnique(name) {\n        for (let i = 0; i < this.files.length; i++) {\n            if (name.localeCompare(this.files[i].name) == 0 ) {\n                return false;\n            }\n        }\n        for (let i = 0; i < this.folders.length; i++) {\n            if (name.localeCompare(this.folders[i].name) == 0 ) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    _getFileTree(item, path = undefined) {\n        const recurseinit = (path === undefined);\n        path = path || \"\";\n        if (item.isFile) {\n            item.file(file => {\n                // Show file content only if no path given\n                // i.e. no recursion\n                this._addFileFromOs(file, recurseinit);\n            });\n        } else if (item.isDirectory) {\n/*******\n            // Create new folder\n            let node = new FolderNode(item.name);\n            this.appendFolder(node);\n            node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\n            this.expand(true);\n            this.getFramework().syncer.mkdir(node.getPath());\n\n            // Get folder contents\n            // console.log(item.fullPath);\n            let dirReader = item.createReader();\n            dirReader.readEntries(entries => {\n                for (let i=0; i < entries.length; i++) {\n                    node._getFileTree(entries[i], path + item.name + \"/\");\n                }\n            });\n */\n        }\n    }\n\n    _addFileFromOs(file, show = false) {\n        if (!this.isNameChildUnique(file.name)) {\n            this.alreadyExists(file.name);\n            return;\n        }\n        let node = new FileNode(file.name);\n        let reader = new FileReader();\n        reader.readAsText(file,'UTF-8');\n        reader.onload = readerEvent => {\n            let content = readerEvent.target.result; // this is the content!\n            node.filecontent = content;\n            if (show) {\n                this.getFramework().addEditor(node);\n                this.getFramework().setFocusTo(node.element);\n            }\n            this.getFramework().syncer.upload(node.getPath(), file);\n        };\n        this.appendFile(node);\n        node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\n        this.expand(true);\n    }\n    expand(doit) {\n        this.element.setAttribute('aria-expanded', doit);\n    }\n\n    displayInTreeview(domnode) {\n        const li = super.displayInTreeview(domnode);\n        li.setAttribute('aria-expanded', 'false');\n\n        const span2 = document.createElement('span');\n        span2.addEventListener('dblclick', this.toggleExpand);\n        span2.innerHTML = this.name;\n        span2.classList.add('name');\n        span2.addEventListener('click', this.boundHandleClick);\n        span2.addEventListener('dragenter', this.handleDragEnter);\n        span2.addEventListener('dragleave', this.handleDragLeave);\n        span2.addEventListener('drop', this.handleDrop);\n        span2.addEventListener('dragover', this.handleDragOver);\n        li.appendChild(span2);\n\n        const subul = document.createElement('ul');\n        subul.setAttribute('role', 'group');\n        li.appendChild(subul);\n\n        for (let j = 0; j < this.folders.length; j++) {\n            this.folders[j].displayInTreeview(subul);\n        }\n        for (let j = 0; j < this.files.length; j++) {\n            this.files[j].displayInTreeview(subul);\n        }\n    }\n\n    isExpanded() {\n        return this.element.getAttribute('aria-expanded') === 'true';\n    }\n    setContextMenu() {\n        console.log('FolderNode setContextMenu');\n        let thecontext = this; // This is changed to something codemirror in promise\n        return Str.get_strings([\n            {key: 'newemptyfile', component: 'qtype_proforma'},\n            {key: 'loadfile', component: 'qtype_proforma'},\n            {key: 'newfolder', component: 'qtype_proforma'},\n            {key: 'rename', component: 'qtype_proforma'},\n            {key: 'delete', component: 'qtype_proforma'}\n        ]).done(function(strings) {\n            thecontext.getFramework().createContextMenu([\n                [strings[0] + '...', thecontext.boundHandleNewFile], // newemptyfile\n                [strings[1] + '...', thecontext.boundHandleLoadFile], // loadfile\n\n//***               [strings[2] + '...', thecontext.boundHandleNewFolder], // newfolder\n                [strings[3] + '...', thecontext.boundHandleRename], // Rename\n                [strings[4] + '...', thecontext.handleDelete], // delete\n            ]);\n        }) //. fail(notification.exception)\n            .fail(function (response) {\n                console.error(response);\n            });\n    }\n\n    appendFile(node) { this.files.push(node); node.parent = this; }\n    appendFolder(node) { this.folders.push(node); node.parent = this; }\n}\n\n/**\n * RootNode\n */\nexport class RootNode extends FolderNode {\n    constructor(name, framework) {\n        super(name);\n        console.log('CREATE root node ' + name);\n        this.framework = framework;\n        framework.roots.push(this);\n    }\n    getFramework() {\n        return this.framework;\n    }\n    getPath() {\n        return '';\n    }\n    setContextMenu() {\n        console.log('RootNode setContextMenu');\n        let thecontext = this; // This is changed to something codemirror in promise\n        return Str.get_strings([\n            {key: 'newemptyfile', component: 'qtype_proforma'},\n            {key: 'loadfile', component: 'qtype_proforma'},\n            {key: 'newfolder', component: 'qtype_proforma'}\n        ]).done(function(strings) {\n            thecontext.getFramework().createContextMenu([\n                [strings[0] + '...', thecontext.boundHandleNewFile], // newemptyfile\n                [strings[1] + '...', thecontext.boundHandleLoadFile], // loadfile\n//***                [strings[2] + '...', thecontext.boundHandleNewFolder], // newfolder\n            ]);\n        }) //. fail(notification.exception)\n            .fail(function (response) {\n                console.error(response);\n            });\n    }\n\n}\n\nclass EditorItem {\n    constructor(fileNode, textarea, tabDomNode, readOnly) {\n        console.log('Create Codemirror ' + readOnly);\n\n        this.fileNode = fileNode;\n        this.editor = CodeMirror.fromTextArea(textarea, {\n            tabMode: \"indent\",\n            indentUnit: 4,\n            matchBrackets: true,\n            autoCloseBrackets: true,\n            styleActiveLine: true,\n            readOnly: readOnly,\n            extraKeys: {'Tab': function(){ this.editor.replaceSelection('    ' , 'end');}},\n            lineNumbers: true\n            //viewportMargin: Infinity\n        });\n        this.editor.setSize(\"100%\", \"100%\");\n        // RootNode.editor.setOption('theme', \"blackboard\");\n        this.editor.setOption('theme', \"darcula\");\n        // this.editor.setOption('theme', \"abcdef\");\n        this.tab = tabDomNode;\n    }\n}\n\nclass EditorStack {\n    static maxEditors = 12;\n    constructor(donNodeEditor, donNodeTabs, framework) {\n        this.editortextarea = donNodeEditor.querySelector('textarea');\n        // Initialise readonly editor\n        this.editor = CodeMirror.fromTextArea(this.editortextarea, {\n            tabMode: \"indent\",\n            indentUnit: 4,\n            matchBrackets: true,\n            autoCloseBrackets: true,\n            styleActiveLine: true,\n            readOnly: true,\n            extraKeys: {'Tab': function(){ this.editor.replaceSelection('    ' , 'end');}},\n            lineNumbers: true\n            //viewportMargin: Infinity\n        });\n        this.editor.setSize(\"100%\", \"100%\");\n        // RootNode.editor.setOption('theme', \"blackboard\");\n        this.editor.setOption('theme', \"darcula\");\n        // this.editor.setOption('theme', \"abcdef\");\n\n        this.activeNode = undefined; // activeNode associated with Codemirror\n\n        this.nodes = []; // all filenodes with open editor\n        // this.donNodeEditor = donNodeEditor;\n        this.donNodeTabs = donNodeTabs;\n        this.focus = undefined; // the tab that has got the focus\n        this.framework = framework;\n\n    }\n\n    cleanup() {\n        if (this.timer) {\n            clearInterval(this.timer);\n        }\n    }\n\n    _switchTo(item, index = undefined) {\n        this.saveCurrentEditor(true);\n\n        if (index === undefined) {\n            // figure out value of i\n            for (index = 0; index < this.nodes.length; index++) {\n                if (this.nodes[index] === item) {\n                    break;\n                }\n            }\n        }\n        console.log('item index is ' + index);\n\n        // move on top\n        this.nodes.splice(index, 1);\n        this.nodes.push(item);\n\n        // Hide all editors\n        for (index = 0; index < this.nodes.length; index++) {\n            this.nodes[index].editor.getWrapperElement().style.display = 'none';\n        }\n\n        item.editor.getWrapperElement().style.display = 'block';\n        item.editor.refresh();\n        item.editor.focus();\n\n        // Switch focus\n        if (this.focus !== undefined) {\n            this.focus.classList.remove('focus');\n            let focusClose = this.focus.querySelector('.close');\n            focusClose.style.display = 'none';\n        }\n        item.tab.classList.add('focus');\n        item.tab.querySelector('.close').style.display = 'inline';\n        this.focus = item.tab;\n    }\n\n    _delete(item) {\n        for (let i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i] === item) {\n                console.log('** Delete item from editor');\n                // Read back (modified) content\n                this.nodes[i].fileNode.updateContent(this.nodes[i].editor.getValue());\n\n                this.nodes.splice(i, 1);\n                // Delete Codemirror element (in order to avoid resource leak)\n                item.editor.getWrapperElement().remove();\n                if (this.nodes.length > 0) {\n                    this._switchTo(this.nodes[this.nodes.length-1], this.nodes.length-1);\n                }\n                return;\n            }\n        }\n        console.error('could not find filenode');\n    }\n\n    deleteEditor(filenode) {\n        for (let i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i].fileNode === filenode) {\n                this.nodes[i].tab.remove();\n                this.nodes[i].tab = undefined;\n                this._delete(this.nodes[i]);\n                return;\n            }\n        }\n    }\n    addEditor(filenode) {\n        if (EditorStack.maxEditors === this.nodes.length) {\n            alert('maximum number of editors reached');\n            return;\n        }\n        // Create tab\n        // let tab = document.createElement('span');\n        let tab = document.createElement('button');\n\n        // Mode is known => display new text content\n        let item = new EditorItem(filenode, this.editortextarea, tab, this.framework.readOnly);\n        filenode.getContent()\n            .then(text => {\n                if (text === undefined) {\n                    text = '???';\n                }\n                item.editor.setValue(text);\n                if (filenode.mode !== undefined) {\n                    item.editor.setOption(\"mode\", filenode.mode);\n                } // else {\n                    // E.g. makefile has no extension and therefore no known mode.\n                    // console.error('unknown file mode');\n                // }\n                // item.editor.setOption(\"readOnly\", this.readOnly);\n                item.editor.refresh(); // for old version of Codemirror\n            })\n            .catch( error => {\n                console.error('error:', error);\n                alert(error);\n            });\n\n        tab.classList.add('tab');\n        let close = document.createElement('span');\n        close.classList.add('close');\n        close.innerHTML = '&#x2715';\n        close.addEventListener('click', event => {\n            event.preventDefault();\n            event.stopPropagation();\n            this._delete(item);\n            close.parentElement.remove();\n        });\n        tab.innerHTML = filenode.name;\n        tab.append(close);\n        tab.addEventListener('click', event => {\n            event.preventDefault();\n            event.stopPropagation();\n            this._switchTo(item);\n        });\n        this.donNodeTabs.append(tab);\n\n        this.nodes.push(item);\n        this._switchTo(item);\n\n    }\n\n    // Handle filename update\n    update(filenode) {\n        for (let i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i].fileNode === filenode) {\n                // filenode is in list\n                // => update filename\n                this.nodes[i].tab.innerHTML = filenode.name;\n                // update filemode\n                if (filenode.mode !== undefined) {\n                    this.nodes[i].editor.setOption(\"mode\", filenode.mode);\n                }\n                return;\n            }\n        }\n    }\n    switchEditorTo(filenode) {\n        // Check if filenode is already in stack\n        for (let i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i].fileNode === filenode) {\n                // filenode is in list\n                this._switchTo(this.nodes[i], i);\n                return;\n            }\n        }\n        this.addEditor(filenode);\n        // Start auto-save timer\n        if (this.timer) {\n            clearInterval(this.timer);\n        }\n        let that = this;\n        if (autosaveIntervall > 0) {\n            this.timer = setInterval(function() {\n                console.log('proforma editor autosave');\n                that.saveCurrentEditor(true);\n            }, autosaveIntervall);\n        }\n    }\n\n    saveCurrentEditor(async) {\n        let currentNode = this._getCurrentNode();\n        if (currentNode) {\n            // save content of current editor\n            const text = currentNode.editor.getValue();\n            if (text.length > 0) {\n                currentNode.fileNode.updateContent(text, async);\n            } else {\n                // currentNode.fileNode.updateContent(' ', true);\n            }\n        }\n    }\n\n    _getCurrentNode() {\n        if (this.nodes.length > 0) {\n            // Call refresh for current Codemirror\n            // in order to update text window. Otherwise\n            // text is cut off\n            return this.nodes[this.nodes.length-1];\n        }\n        return null;\n    }\n    handleResize() {\n        if (this.nodes.length > 0) {\n            // Call refresh for current Codemirror\n            // in order to update text window. Otherwise\n            // text is cut off\n            this.nodes[this.nodes.length-1].editor.refresh();\n        }\n    }\n    save() {\n        // Save all\n        // (we could save current if file is saved on switching)\n        // this.issaved = false;\n        console.log('currently open editors ' + this.nodes.length.toString());\n        console.timeStamp('save');\n        console.time('save');\n\n        for (let i = 0; i < this.nodes.length; i++) {\n            this.nodes[i].fileNode.updateContent(this.nodes[i].editor.getValue(), false);\n        }\n\n        /*\n        let promises = [];\n        for (let i = 0; i < this.nodes.length; i++) {\n            console.log('add promise to list ' + i.toString());\n            promises.push(this.nodes[i].fileNode.updateContent(this.nodes[i].editor.getValue()));\n        }\n        return Promise.all(promises).\n            then(() => {\n                console.log('all files saved');\n                console.timeStamp('save');\n                console.timeEnd('save');\n                this.issaved = true;\n\n            // return true;\n                // alert('look');\n            })\n            .catch( error => {\n                console.timeStamp('save');\n                console.timeEnd('save');\n                console.error('error:', error);\n                alert(error);\n            });*/\n        console.log('all files saved');\n        console.timeStamp('save');\n        console.timeEnd('save');\n    }\n/*    needssaving() {\n        for (let i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i].fileNode.filecontent != this.nodes[i].editor.getValue()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    issaved() {\n        return this.issaved;\n    }*/\n}\n\n\nexport class Framework {\n    constructor() {\n        this.roots = []; // all root nodes\n        this.syncer = undefined;\n        this.editorstack = undefined;\n        this.mainDomNode = undefined;\n        this.menu = undefined;\n        this.menuVisible = false;\n        this.focus = undefined;\n        this.readOnly = false;\n        this.rootnode = 'Submission';\n    }\n\n    buildFramework(domnode) {\n        console.log('buildFramework');\n        domnode.innerHTML = `<div class=\"ide\" style=\"display: flex;flex-direction: column; align-items: stretch;\n    resize: vertical;\n    overflow: hidden;\n    min-height: 150px\">\n    <!--<div class=\"menu\" style=\"flex: none\">menu</div>-->\n\n    <div class=\"body\" style=\"display: flex; flex-direction: row; flex: 1 1 0; min-height: 0\">\n        <!--<div class=\"fake\" style=\"min-width: 100px; flex: 1 0 0; overflow: auto;\">Fake element</div> -->\n        <div class=\"explorer\" style=\"min-width: 20px; flex: 1 0 0; overflow: auto;\">\n        </div>\n        <div class=\"resize\"></div>\n        <div class=\"canvas\" style=\"min-width: 20px;  flex: 0 0 75%; display: flex; flex-direction: row;\">\n            <!-- set flex-basis = 50% for 2 two columns and 100%V for one column -->\n            <div class=\"canvascol\" style=\"display: flex; flex-direction: column; flex: 1 1 50%; overflow: hidden;\">\n                <div class=\"tabs\" style=\"flex: none; \">\n                </div>\n                <div class=\"editor\" style=\"flex: 1 1 0; overflow: hidden;\">\n                    <textarea></textarea>\n                </div>\n            </div>\n            <!--\n            <div class=\"resize\"></div>\n            <div class=\"canvascol\" style=\"display: flex; flex-direction: column; flex: 1 1 50%; min-height: 0;\">\n                <div class=\"tabs\" style=\"flex: none; \">\n                </div>\n                <div class=\"editor\" style=\"flex: 1 1 0; min-height: 0; overflow: hidden;\">\n                    <textarea></textarea>\n                </div>\n            </div> --> \n        </div>\n    </div>\n\n    <!--<div class=\"status\" style=\"flex: none\">status</div>-->\n</div>\n<p><!--<label>File or Folder Selected: <input id=\"last_action\" type=\"text\" size=\"15\" readonly=\"\"></label>--></p>\n`;\n        // We only need one context menu that must be placed outside\n        // all other elements (esp. those that are positioned relative)\n        // in order to have the menu placed correctly.\n        let contextmenu = `<div class=\"contextmenu\" id=\"context-menu\">\n    <ul class=\"menu-options\">\n        <li class=\"menu-option\">New file</li>\n        <li class=\"menu-option\">New folder</li>\n        <li class=\"menu-option\">Delete...</li>\n    </ul>\n</div>`;\n        const menu = document.createElement('div');\n        menu.innerHTML = contextmenu;\n        let body = document.querySelector('body');\n        body.appendChild(menu);\n\n        this.mainDomNode = domnode;\n        this.editorstack = new EditorStack(domnode.querySelector('.editor'),\n            domnode.querySelector('.tabs'), this);\n    }\n\n    init(node, syncer, readOnly, options) {\n        this.readOnly = readOnly;\n        this.rootnode = options['rootnode'];\n        if (options['explorerautosave'] !== undefined && options['explorerautosave'] > 0) {\n            autosaveIntervall = 1000 * options['explorerautosave'];\n        } else {\n            autosaveIntervall = -1;\n        }\n        const initSplit = resizer =>  {\n            // from https://htmldom.dev/create-resizable-split-views/\n            const before = resizer.previousElementSibling;\n            const after = resizer.nextElementSibling;\n\n            // The current position of mouse\n            let x = 0;\n\n            let oldValue = 0;\n            let mousedown = false;\n\n            const removeSelection = () => {\n                resizer.style.removeProperty('cursor');\n                document.body.style.removeProperty('cursor');\n\n                before.style.removeProperty('user-select');\n                before.style.removeProperty('pointer-events');\n\n                if (after != undefined) {\n                    after.style.removeProperty('user-select');\n                    after.style.removeProperty('pointer-events');\n                }\n            };\n            // Handle the mousedown event\n            // that's triggered when user drags the resizer\n            const mouseDownHandler = e => {\n                // Get the current mouse position\n                x = e.clientX;\n\n                this.toggleContextmenu(\"hide\");\n                oldValue = before.getBoundingClientRect().width;\n                mousedown = true;\n                // Attach the listeners to `document`\n                document.addEventListener('mousemove', mouseMoveHandler);\n                document.addEventListener('mouseup', mouseUpHandler);\n\n                removeSelection();\n            };\n\n            const mouseMoveHandler = e =>  {\n                if (mousedown) {\n                    // How far the mouse has been moved\n                    const dx = e.clientX - x;\n                    let newBasis = ((oldValue + dx) * 100) / resizer.parentNode.getBoundingClientRect().width;\n                    before.style.flexBasis =`${newBasis}%`;\n                    if (after != undefined) {\n                        after.style.flexBasis =`${100-newBasis}%`;\n                    } else {\n                        resizer.parentNode.getBoundingClientRect().width =\n                            resizer.parentNode.getBoundingClientRect().width - dx;\n                    }\n                    removeSelection();\n                } else {\n                    mouseUpHandler();\n                }\n            };\n\n            const mouseUpHandler = function () {\n                removeSelection();\n\n                // Remove the handlers of `mousemove` and `mouseup`\n                document.removeEventListener('mousemove', mouseMoveHandler);\n                document.removeEventListener('mouseup', mouseUpHandler);\n            };\n            // Attach the handler\n            resizer.addEventListener('mousedown', mouseDownHandler);\n        };\n\n        const fileviewer = node.querySelector('.explorer');\n        // Prevent browser from opening a dropped file in a new tab.\n        fileviewer.addEventListener('drop', event => {\n            event.preventDefault();\n        });\n        fileviewer.addEventListener('dragover', event => {\n            event.preventDefault();\n        });\n\n        let ul = document.createElement(\"ul\");\n        ul.setAttribute('role', 'tree');\n        ul.setAttribute('aria-labelledby', 'fileviewer');\n        fileviewer.appendChild(ul);\n\n        this.syncer = syncer;\n        // build folder/file structure.\n        /* this.syncer.dir(); Da fehlen die Dateien */\n        this.createPath('/'); // needed when no files come from syncer.\n        this.syncer.list(this)\n            .then (() => {\n                console.log('DISPLAY ROOTS');\n                console.log(this.roots);\n                for (let i = 0; i < this.roots.length; i++) {\n                    let root = this.roots[i];\n                    root.displayInTreeview(ul);\n                    root.toggleExpand();\n                }\n            });\n\n        // Hide context menu on every left click\n        window.addEventListener(\"click\", e => {\n            this.handleClick();\n        });\n\n        let el = this.mainDomNode.querySelector('.ide');\n        const observer = new ResizeObserver(() => {\n            this.editorstack.handleResize();\n        });\n        observer.observe(el);\n        initSplit(node.querySelector('.ide .body > .resize'),  'w');\n        // initSplit(node.querySelector('.ide .canvas > .resize'), 'w');\n\n        // Read context menu strings in order to have them in\n        // the browser cache and the menu can open immediately\n        /*\n        Str.get_strings([\n            {key: 'delete', component: 'qtype_proforma'},\n            {key: 'rename', component: 'qtype_proforma'},\n            {key: 'loadfile', component: 'qtype_proforma'},\n            {key: 'newemptyfile', component: 'qtype_proforma'},\n            {key: 'newfolder', component: 'qtype_proforma'},\n        ]).done(function(strings) {\n            console.log('context menu string read.');\n            console.log(strings);\n        }).fail(function (response) {\n            console.error(response);\n        }); */\n\n        /*\n        RootNode.syncer.sendRequest('mkdir', 'newproformafolder');\n        RootNode.syncer.sendRequest('dir'); */\n    }\n\n    switchEditorTo(filenode) {\n        this.editorstack.switchEditorTo(filenode);\n    }\n    addEditor(filenode) {\n        this.editorstack.switchEditorTo(filenode);\n        // this.editorstack.addEditor(filenode);\n    }\n    deleteEditor(filenode) {\n        this.editorstack.deleteEditor(filenode);\n    }\n\n    findNodeByPath(path) {\n        console.log('find <' + path + '>');\n        if (path.substr(0,1) != '/') {\n            console.error('path does not start with /: ' + path);\n            return undefined;\n        }\n\n        let pathsplit = path.split('/');\n        pathsplit.shift(); // first element is always empty\n        // let first = pathsplit.shift();\n        let root = this.roots[0];\n        return root.findNodeByPath(pathsplit);\n\n        /*\n        for (let i = 0; i < this.roots.length; i++) {\n            if (this.roots[i].name === first) {\n                return this.roots[i].findNodeByPath(pathsplit);\n            }\n        }\n        return undefined; */\n    }\n\n    createPath(path) {\n        console.log('Framework: create folder ' + path);\n        // Assume first char is always /\n        if (path[0] !== '/') {\n            console.error('first char in path is not /: ' + path);\n        }\n        let pathsplit = path.split('/');\n        pathsplit.shift(); // first element in array is always empty\n\n        let root;\n        let context = this;\n        if (this.roots.length === 0) {\n            root = new RootNode(context.rootnode, context);\n            return root.createPath(pathsplit);\n/*\n            getString('rootsubmission', 'qtype_proforma')\n                .done(function(string) {\n                    root = new RootNode(string, context);\n                    return root.createPath(pathsplit);\n                })\n                .fail(function (response) {\n                    console.error(response);\n                });*/\n        } else {\n            root = this.roots[0];\n            return root.createPath(pathsplit);\n        }\n    }\n\n    createContextMenu(list) {\n        if (this.readOnly) {\n            return;\n        }\n        console.log('createContextMenu ' + list.length);\n        // console.log(list);\n        // let ul = this.mainDomNode.querySelector(\".contextmenu .menu-options\");\n        let ul = document.querySelector(\".contextmenu .menu-options\");\n        // console.log(ul);\n        ul.innerHTML = ''; // Delete all children\n        for (let i = 0; i < list.length; i++) {\n            const li = document.createElement('li');\n            li.setAttribute('class', 'menu-option');\n            li.innerHTML = list[i][0];\n            li.addEventListener('click', list[i][1]);\n            console.log(list[i][0]);\n            ul.appendChild(li);\n        }\n\n        this.menu = ul.parentNode;\n    }\n\n    toggleContextmenu = command => {\n        if (this.menu === undefined) {\n            return;\n        }\n        this.menu.style.display = command === \"show\" ? \"block\" : \"none\";\n        this.menuVisible = (command === \"show\");\n    };\n\n    handleClick() {\n        this.toggleContextmenu(\"hide\");\n        this.setFocusTo(undefined);\n    }\n    setFocusTo(element) {\n        if (this.focus !== undefined) {\n            this.focus.classList.remove('focus');\n        }\n        if (element !== undefined) {\n            element.classList.add('focus');\n            this.focus = element;\n        } else {\n            this.focus = undefined;\n        }\n    }\n\n/*    needssaving() {\n        return this.editorstack.needssaving();\n    }\n    issaved() {\n        return this.editorstack.issaved();\n    } */\n    save() {\n        console.log(this);\n        console.log(this.editorstack);\n        return this.editorstack.save();\n        // alert('hallo');\n        // setTimeout(() => { return p1; }, 60000);\n    }\n}"],"names":["autosaveIntervall","modalPrompt","titleId","labelId","defaultValue","callback","stringsPromise","Str","get_strings","key","component","modalPromise","ModalFactory","create","type","types","SAVE_CANCEL","Promise","all","then","_ref","strings","modal","setTitle","setSaveButtonText","setBody","getRoot","on","ModalEvents","save","result","document","querySelector","value","remove","show","focus","defaultButton","find","addEventListener","event","preventDefault","keyCode","click","catch","error","console","alert","modalConfirm","textId","param","_ref3","TreeNode","constructor","name","element","undefined","parent","boundHandleContextMenu","stopPropagation","setContextMenu","this","getFramework","menu","_ref4","top","left","style","toggleContextmenu","showMenu","pageX","pageY","handleDragStart","dataTransfer","getData","length","setData","getPath","resolve","displayInTreeview","domnode","li","createElement","setAttribute","appendChild","DEFAULT","_ref2","modalAlert","FileNode","filename","split","pop","toLowerCase","filecontent","mode","getEditorModeFromFilename","handleDelete","handleClick","context","deleteEditor","syncer","deleteFileOrFolder","files","filter","item","boundHandleRename","thecontext","isNameChildUnique","alreadyExists","oldpath","innerHTML","newpath","renameFile","editorstack","update","boundHandleClick","setFocusTo","handleDoubleClick","switchEditorTo","getContent","p1","download","updateContent","newcontent","async","log","substr","super","classList","add","done","createContextMenu","fail","response","FolderNode","folders","boundHandleNewFile","node","appendFile","expand","newfile","addEditor","boundHandleLoadFile","input","onchange","e","file","target","_addFileFromOs","handleDragOver","handleDragEnter","readOnly","handleDragLeave","handleDrop","path","findNodeByPath","appendFolder","renameFolder","items","i","webkitGetAsEntry","_getFileTree","boundHandleNewFolder","foldername","mkdir","toggleExpand","isExpanded","handleMouseOver","currentTarget","handleMouseOut","first","shift","createPath","lenghth","localeCompare","recurseinit","isFile","isDirectory","reader","FileReader","readAsText","onload","readerEvent","content","upload","doit","span2","subul","j","getAttribute","push","RootNode","framework","roots","EditorItem","fileNode","textarea","tabDomNode","editor","CodeMirror","fromTextArea","tabMode","indentUnit","matchBrackets","autoCloseBrackets","styleActiveLine","extraKeys","replaceSelection","lineNumbers","setSize","setOption","tab","EditorStack","donNodeEditor","donNodeTabs","editortextarea","activeNode","nodes","cleanup","timer","clearInterval","_switchTo","index","saveCurrentEditor","splice","getWrapperElement","display","refresh","_delete","getValue","filenode","maxEditors","text","setValue","close","parentElement","append","that","setInterval","currentNode","_getCurrentNode","handleResize","toString","timeStamp","time","timeEnd","command","menuVisible","mainDomNode","rootnode","buildFramework","init","options","fileviewer","ul","list","root","window","el","ResizeObserver","observe","resizer","before","previousElementSibling","after","nextElementSibling","x","oldValue","mousedown","removeSelection","removeProperty","body","mouseMoveHandler","dx","clientX","newBasis","parentNode","getBoundingClientRect","width","flexBasis","mouseUpHandler","removeEventListener","initSplit","pathsplit"],"mappings":"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"}