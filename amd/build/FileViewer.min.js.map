{"version":3,"file":"FileViewer.min.js","sources":["../src/FileViewer.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * The ProFormA Question CodeMirror support functions\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2022 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     K.Borm <k.borm[at]ostfalia.de>\n */\n\n/* eslint-disable no-unused-vars */\n\n// Use these imports for Moodle\n// -----------------------------\n\nimport \"./MoodleSyncer\";\n\nimport './codemirror-global';\nimport CodeMirror from \"./codemirror\";\n\nimport \"./clike\";\nimport \"./python\";\nimport \"./javascriptmode\"; // renamed from javascript\nimport \"./xml\";\nimport \"./matchbrackets\";\nimport \"./closebrackets\";\nimport \"./active-line\";\n\n// import {get_string as getString} from 'core/str';\nimport Config from 'core/config';\nimport * as Str from 'core/str';\nimport * as notification from 'core/notification';\n\n// Use this for editortest.html\n// -----------------------------\n/*\nimport './codemirror-global.js';\n\nimport CodeMirror from \"./codemirror/src/codemirror.js\";\nimport \"./codemirror/mode/clike/clike.js\";\nimport \"./codemirror/mode/javascript/javascript.js\";\nimport \"./codemirror/mode/python/python.js\";\nimport \"./codemirror/mode/xml/xml.js\";\nimport \"./codemirror/addon/selection/active-line.js\";\nimport \"./codemirror/addon/edit/matchbrackets.js\";\nimport \"./codemirror/addon/edit/closebrackets.js\";\nclass Config { // Fake\n    static wwwroot = '';\n    static sesskey = '';\n}\n*/\n\n\n// 'use strict'; ecma6 code is always strict\n\n\n// TODO:\n// - Split View: Problem mit Flackern\n// - Theme wechseln\n// - Menu erstmal raus - auÃŸer zum Wechseln des Themes\n// - Andere Browser testen\n\n/**\n * TreeNode\n */\nclass TreeNode {\n    constructor(name) {\n        this.name = name;\n        this.element = undefined; // DOM element\n        this.parent = undefined; // parent Treenode\n\n        this.boundHandleContextMenu = event => {\n            this.setContextMenu();\n            if (this.getFramework().menu === undefined) {\n                return;\n            }\n            const showMenu = ({ top, left }) => {\n                this.getFramework().menu.style.left = `${left}px`;\n                this.getFramework().menu.style.top = `${top}px`;\n                // this.getFramework().menu.style.setProperty('--mouse-x', event.clientX + 'px');\n                // this.getFramework().menu.style.setProperty('--mouse-y', event.clientY + 'px');\n                this.getFramework().toggleContextmenu('show');\n            };\n\n            console.log(`contextmenu: ${event}`);\n            // console.log(event)\n            event.preventDefault();\n            event.stopPropagation(); // otherwise parent node handles event, too\n\n            const origin = {\n                left: event.pageX,\n                top: event.pageY\n            };\n            console.log(`${event.pageX}px ${event.pageY}px`);\n            console.log(event);\n            showMenu(origin);\n        };\n        this.handleDragStart = event => {\n            if (event.dataTransfer.getData('treeitem').length == 0) {\n                console.log('dragstart: ' + this.getPath());\n                event.dataTransfer.setData('treeitem', this.getPath());\n            }\n        };\n    }\n    getPath() {\n        return this.parent === undefined? this.name : this.parent.getPath() + '/' + this.name ;\n    }\n\n    // Override\n    setContextMenu() {\n        TreeNode.menu = undefined;\n    }\n\n    displayInTreeview(domnode) {\n        const li = document.createElement('li');\n        li.setAttribute('role', 'treeitem');\n        li.setAttribute('draggable', 'true');\n        domnode.appendChild(li);\n        li.addEventListener('contextmenu', this.boundHandleContextMenu);\n        li.addEventListener('dragstart', this.handleDragStart);\n        this.element = li; // Store element\n        return li;\n    }\n\n    getFramework() {\n        return this.parent.getFramework();\n    }\n}\n\n/**\n * FileNode\n */\nexport class FileNode extends TreeNode {\n    static getEditorModeFromFilename(filename) {\n        const extension = filename.split('.').pop().toLowerCase();\n        switch (extension) {\n            case \"java\":\n                return \"text/x-java\";\n            case \"py\":\n                return \"text/x-python\";\n            case \"setlx\":\n                return \"text/text\";\n            case \"c\":\n                return \"text/x-csrc\";\n            case \"cpp\":\n            case \"cxx\":\n            case \"h\":\n            case \"hpp\":\n                return \"text/x-c++src\";\n            case \"xml\":\n                return \"application/xml\";\n            case \"html\":\n                return \"text/html\";\n            case \"sql\":\n                return \"text/x-sql\";\n            case \"js\":\n                return \"text/javascript\";\n            case \"php\":\n                return \"application/x-httpd-php\";\n            case 'txt':\n            case 'log':\n            case 'md':\n            case 'csv':\n                return \"text\";\n        }\n    }\n\n    constructor(name) {\n        super(name);\n        this.filecontent = '';\n        this.mode = FileNode.getEditorModeFromFilename(this.name);\n        this.handleDelete = event => {\n            this.getFramework().handleClick(event);\n            this.getFramework().syncer.deleteFileOrFolder(this.getPath());\n            this.element.remove();\n            this.parent.files = this.parent.files.filter(item => item !== this);\n        };\n        this.boundHandleRename = event => {\n            this.getFramework().handleClick(event);\n            let thecontext = this;\n            Str.get_strings([\n                {key: 'enterfilename', component: 'qtype_proforma'},\n            ]).done(function(strings) {\n                let name = prompt(strings[0] + ':', thecontext.name);\n                if (name !== null && name.length > 0) {\n                    const oldpath = thecontext.getPath();\n                    thecontext.name = name;\n                    thecontext.element.innerHTML = name;\n                    const newpath = thecontext.getPath();\n                    thecontext.getFramework().syncer.renameFile(oldpath, newpath);\n                    // thecontext.element.tabIndex = 0;\n                }\n            }) //. fail(notification.exception)\n                .fail(function (response) {\n                    console.error(response);\n                });\n        };\n        this.boundHandleClick = event => {\n            this.getFramework().toggleContextmenu(\"hide\");\n            this.getFramework().setFocusTo(this.element);\n            event.stopPropagation();\n            // event.preventDefault();\n        };\n        this.handleDoubleClick = event => {\n            this.getFramework().toggleContextmenu(\"hide\");\n            // document.getElementById('last_action').value = this.name;\n            if (this.filecontent != undefined) {\n                this.getFramework().switchEditorTo(this);\n            }\n            this.getFramework().setFocusTo(this.element);\n            event.stopPropagation();\n            // event.preventDefault();\n        };\n    }\n    getContent() {\n        if (this.filecontent.length == 0) {\n            const p1 = this.getFramework().syncer.download(this.getPath());\n            // console.log('Fileviewer promise result');\n            // console.log(p1);\n            p1.then(result => {\n                // console.log('Downloaded text is: '+ result);\n                this.filecontent = result;\n                return result;\n            });\n            return p1;\n        } else {\n            return Promise.resolve(this.filecontent);\n        }\n    }\n    updateContent(newcontent, async) {\n        this.filecontent = newcontent;\n        return this.getFramework().syncer.update(this.getPath(), newcontent, async);\n    }\n    displayInTreeview(domnode) {\n        const li = super.displayInTreeview(domnode);\n        li.innerHTML = this.name;\n        li.classList.add('doc');\n\n        li.addEventListener('dblclick', this.handleDoubleClick);\n        li.addEventListener('click', this.boundHandleClick);\n\n//        li.addEventListener('mouseover', this.handleMouseOver);\n//        li.addEventListener('mouseout', this.handleMouseOut);\n    }\n\n    setContextMenu() {\n        console.log('FileNode setContextMenu');\n        // this is something from codemirror in promise done function???\n        // so this is renamed\n        let thecontext = this;\n        Str.get_strings([\n            {key: 'delete', component: 'qtype_proforma'},\n            {key: 'rename', component: 'qtype_proforma'}\n        ]).done(function(strings) {\n            thecontext.getFramework().createContextMenu([\n                [strings[0], thecontext.handleDelete], // Delete\n                [strings[1], thecontext.boundHandleRename] // Rename\n            ]);\n        }) /*.fail(notification.exception)*/\n            .fail(function (response) {\n                console.error(response);\n        });\n    }\n}\n\n/**\n * FolderNode\n */\nexport class FolderNode extends TreeNode {\n    constructor(name) {\n        super(name);\n        this.files = []; // Empty list of files.\n        this.folders = []; // Empty list of folders.\n        this.handleDelete = event => {\n            this.getFramework().handleClick(event);\n            this.getFramework().syncer.deleteFileOrFolder(this.getPath() + '/.');\n            this.element.remove();\n            this.parent.folders = this.parent.folders.filter(item => item !== this);\n            // console.log(RootNode.projects);\n        };\n        this.boundHandleNewFile = event => {\n            this.getFramework().handleClick(event);\n            let thecontext = this;\n            Str.get_strings([\n                {key: 'enterfilename', component: 'qtype_proforma'},\n            ]).done(function(strings) {\n                let filename = prompt(strings[0] + ':', \"\");\n                if (filename !== null && filename.length > 0) {\n                    if (!thecontext.isNameChildUnique(filename)) {\n                        alert(filename + ' already exists');\n                        return;\n                    }\n                    let node = new FileNode(filename);\n                    thecontext.appendFile(node);\n                    node.displayInTreeview(thecontext.element.querySelector('[role=\"group\"]'));\n                    thecontext.expand(true);\n                    thecontext.getFramework().syncer.newfile(node.getPath());\n                }\n            }) //. fail(notification.exception)\n                .fail(function (response) {\n                    console.error(response);\n                });\n        };\n        this.boundHandleLoadFile = event => {\n            this.getFramework().handleClick(event);\n            let input = document.createElement('input');\n            input.type = 'file';\n            input.onchange = e => {\n                let file = e.target.files[0];\n                this._addFileFromOs(file, true);\n            };\n            input.click();\n        };\n        this.handleDragOver = event => {\n            event.preventDefault();\n        };\n        this.handleDragEnter = () =>  {\n            if (this.getFramework().readOnly) {\n                return;\n            }\n            this.element.querySelector('.name').classList.add('dragover');\n        };\n        this.handleDragLeave = () => {\n            if (this.getFramework().readOnly) {\n                return;\n            }\n            this.element.querySelector('.name').classList.remove('dragover');\n        };\n\n        this.handleDrop = event => {\n            event.preventDefault();\n            event.stopPropagation();\n            this.getFramework().toggleContextmenu(\"hide\");\n            if (this.getFramework().readOnly) {\n                return;\n            }\n            this.element.querySelector('.name').classList.remove('dragover');\n            const path = event.dataTransfer.getData('treeitem');\n            if (path !== undefined && path.length > 0) {\n                console.log('drop ' + path + ' onto ' + this.getPath());\n                // Node element from tree\n                const node = this.getFramework().findNodeByPath(path);\n                if (node !== undefined && !this.isNameChildUnique(node.name)) {\n                    // TODO: wenn der Ordner schon existiert, sollte nur der Inhalt gemergt werden\n                    alert(node.name + ' already exists');\n                    return;\n                }\n                if (node instanceof FolderNode) {\n                    // remove folder in old parent\n                    const oldpath = node.getPath();\n                    node.parent.folders = node.parent.folders.filter(item => item !== node);\n                    // add folder to this\n                    this.appendFolder(node);\n                    this.element.querySelector('ul').appendChild(node.element);\n                    // node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\n                    this.expand(true);\n                    this.getFramework().syncer.renameFolder(oldpath, node.getPath());\n                } else if (node instanceof FileNode) {\n                    const oldpath = node.getPath();\n                    node.parent.files = node.parent.files.filter(item => item !== node);\n                    // add folder to this\n                    this.appendFile(node);\n                    // node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\n                    this.element.querySelector('ul').appendChild(node.element);\n                    this.expand(true);\n                    this.getFramework().syncer.renameFile(oldpath, node.getPath());\n                } else {\n                    console.error('node cannot be moved');\n                    console.log(node);\n                }\n            } else {\n                // External file or folder\n                console.log('drop file/folder');\n                let items = event.dataTransfer.items;\n                for (let i=0; i<items.length; i++) {\n                    let item = items[i].webkitGetAsEntry();  //Might be renamed to GetAsEntry()\n                    if (item) {\n                        this._getFileTree(item);\n                    }\n                }\n            }\n        };\n        this.boundHandleNewFolder = event => {\n            this.getFramework().handleClick(event);\n            let thecontext = this;\n            Str.get_strings([\n                {key: 'enterfolder', component: 'qtype_proforma'},\n            ]).done(function(strings) {\n                let foldername = prompt(strings[0] + ':', \"\");\n                if (foldername !== null && foldername.length > 0) {\n                    if (!thecontext.isNameChildUnique(foldername)) {\n                        alert(foldername + ' already exists');\n                        return;\n                    }\n                    let node = new FolderNode(foldername);\n                    thecontext.appendFolder(node);\n                    node.displayInTreeview(thecontext.element.querySelector('[role=\"group\"]'));\n                    thecontext.expand(true);\n                    console.log('create new folder ' + node.getPath());\n                    thecontext.getFramework().syncer.mkdir(node.getPath());\n                }\n\n            }) //. fail(notification.exception)\n                .fail(function (response) {\n                    console.error(response);\n                });\n        };\n\n        this.boundHandleClick = event => {\n            console.log('FolderNode click');\n            this.getFramework().toggleContextmenu(\"hide\");\n            // TreeNode.setFocusTo(this.element);\n            // this.element.classList.add('focus');\n            event.stopPropagation();\n            event.preventDefault();\n        };\n        this.boundHandleRename = event => {\n            this.getFramework().handleClick(event);\n            let thecontext = this;\n            Str.get_strings([\n                {key: 'enterfoldername', component: 'qtype_proforma'},\n            ]).done(function(strings) {\n                let name = prompt(strings[0] + ':', thecontext.name);\n                if (name !== null && name.length > 0) {\n                    if (!thecontext.parent.isNameChildUnique(name)) {\n                        alert(name + ' already exists');\n                        return;\n                    }\n                    const oldpath = thecontext.getPath() + '/.';\n                    thecontext.name = name;\n                    thecontext.element.querySelector('.name').innerHTML = name;\n                    const newpath = thecontext.getPath() + '/.';\n                    thecontext.getFramework().syncer.renameFolder(oldpath, newpath);\n                }\n            }) //. fail(notification.exception)\n                .fail(function (response) {\n                    console.error(response);\n                });\n\n            /*\n            let name = prompt(\"Please enter new name:\", this.name);\n            if (name !== null && name.length > 0) {\n                if (!this.parent.isNameChildUnique(name)) {\n                    alert(name + ' already exists');\n                    return;\n                }\n                const oldpath = this.getPath() + '/.';\n                this.name = name;\n                this.element.querySelector('.name').innerHTML = name;\n                const newpath = this.getPath() + '/.';\n                this.getFramework().syncer.renameFolder(oldpath, newpath);\n            }*/\n        };\n        this.toggleExpand = () => {\n            this.element.setAttribute('aria-expanded', !this.isExpanded());\n        };\n        this.handleMouseOver = event => {\n            event.currentTarget.classList.add('hover');\n        };\n        this.handleMouseOut = event => {\n            event.currentTarget.classList.remove('hover');\n        };\n    }\n    findNodeByPath(path) {\n        let first = path.shift();\n        for (let i = 0; i < this.files.length; i++) {\n            if (this.files[i].name === first) {\n                return this.files[i];\n            }\n        }\n        for (let i = 0; i < this.folders.length; i++) {\n            if (this.folders[i].name === first) {\n                if (path.length == 0) {\n                    return this.folders[i];\n                } else {\n                    return this.folders[i].findNodeByPath(path);\n                }\n            }\n        }\n        return undefined;\n    }\n    createPath(path) {\n        // console.log(path);\n        let first = path.shift();\n        // console.log('foldernode: create node for <' + first + '>');\n        if (first === undefined || first.length == 0) {\n            if (path.lenghth > 0) {\n                console.error('Bug in creating path');\n            }\n            return this;\n        }\n        for (let i = 0; i < this.folders.length; i++) {\n            if (this.folders[i].name === first) {\n                // Subpath exists\n                if (path.length == 0) {\n                    // full path exists => return folder object.\n                    return this.folders[i];\n                } else {\n                    return this.folders[i].createPath(path);\n                }\n            }\n        }\n        // Path does not exist => create.\n        // console.log('create folder node for ' + first);\n        let node = new FolderNode(first);\n        this.appendFolder(node);\n        return node.createPath(path);\n    }\n\n    isNameChildUnique(name) {\n        for (let i = 0; i < this.files.length; i++) {\n            if (name.localeCompare(this.files[i].name) == 0 ) {\n                return false;\n            }\n        }\n        for (let i = 0; i < this.folders.length; i++) {\n            if (name.localeCompare(this.folders[i].name) == 0 ) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    _getFileTree(item, path = undefined) {\n        const recurseinit = (path === undefined);\n        path = path || \"\";\n        if (item.isFile) {\n            item.file(file => {\n                // Show file content only if no path given\n                // i.e. no recursion\n                this._addFileFromOs(file, recurseinit);\n            });\n        } else if (item.isDirectory) {\n            // Create new folder\n            let node = new FolderNode(item.name);\n            this.appendFolder(node);\n            node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\n            this.expand(true);\n            this.getFramework().syncer.mkdir(node.getPath());\n\n            // Get folder contents\n            // console.log(item.fullPath);\n            let dirReader = item.createReader();\n            dirReader.readEntries(entries => {\n                for (let i=0; i < entries.length; i++) {\n                    node._getFileTree(entries[i], path + item.name + \"/\");\n                }\n            });\n        }\n    }\n\n    _addFileFromOs(file, show = false) {\n        if (!this.isNameChildUnique(file.name)) {\n            alert(file.name + ' already exists');\n            return;\n        }\n        let node = new FileNode(file.name);\n        let reader = new FileReader();\n        reader.readAsText(file,'UTF-8');\n        reader.onload = readerEvent => {\n            let content = readerEvent.target.result; // this is the content!\n            node.filecontent = content;\n            if (show) {\n                this.getFramework().addEditor(node);\n                this.getFramework().setFocusTo(node.element);\n            }\n            this.getFramework().syncer.upload(node.getPath(), file);\n        };\n        this.appendFile(node);\n        node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\n        this.expand(true);\n    }\n    expand(doit) {\n        this.element.setAttribute('aria-expanded', doit);\n    }\n\n    displayInTreeview(domnode) {\n        const li = super.displayInTreeview(domnode);\n        li.setAttribute('aria-expanded', 'false');\n\n        const span1 = document.createElement('span');\n        span1.classList.add('before');\n        span1.addEventListener('click', this.toggleExpand);\n        li.appendChild(span1);\n\n        const span2 = document.createElement('span');\n        span2.innerHTML = this.name;\n        span2.classList.add('name');\n        span2.addEventListener('click', this.boundHandleClick);\n        span2.addEventListener('dragenter', this.handleDragEnter);\n        span2.addEventListener('dragleave', this.handleDragLeave);\n        span2.addEventListener('drop', this.handleDrop);\n        span2.addEventListener('dragover', this.handleDragOver);\n        li.appendChild(span2);\n\n        const subul = document.createElement('ul');\n        subul.setAttribute('role', 'group');\n        li.appendChild(subul);\n\n        for (let j = 0; j < this.folders.length; j++) {\n            this.folders[j].displayInTreeview(subul);\n        }\n        for (let j = 0; j < this.files.length; j++) {\n            this.files[j].displayInTreeview(subul);\n        }\n    }\n\n    isExpanded() {\n        return this.element.getAttribute('aria-expanded') === 'true';\n    }\n    setContextMenu() {\n        console.log('FolderNode setContextMenu');\n        let thecontext = this; // This is changed to something codemirror in promise\n        Str.get_strings([\n            {key: 'newemptyfile', component: 'qtype_proforma'},\n            {key: 'loadfile', component: 'qtype_proforma'},\n            {key: 'newfolder', component: 'qtype_proforma'},\n            {key: 'rename', component: 'qtype_proforma'},\n            {key: 'delete', component: 'qtype_proforma'}\n        ]).done(function(strings) {\n            thecontext.getFramework().createContextMenu([\n                [strings[0] + '...', thecontext.boundHandleNewFile], // newemptyfile\n                [strings[1] + '...', thecontext.boundHandleLoadFile], // loadfile\n                [strings[2] + '...', thecontext.boundHandleNewFolder], // newfolder\n                [strings[3], thecontext.boundHandleRename], // Rename\n                [strings[4], thecontext.handleDelete], // delete\n            ]);\n        }) //. fail(notification.exception)\n            .fail(function (response) {\n                console.error(response);\n            });\n    }\n\n    appendFile(node) { this.files.push(node); node.parent = this; }\n    appendFolder(node) { this.folders.push(node); node.parent = this; }\n}\n\n/**\n * RootNode\n */\nexport class RootNode extends FolderNode {\n    constructor(name, framework) {\n        super(name);\n        console.log('CREATE root node ' + name);\n        this.framework = framework;\n        framework.roots.push(this);\n    }\n    getFramework() {\n        return this.framework;\n    }\n    getPath() {\n        return '';\n    }\n    setContextMenu() {\n        console.log('RootNode setContextMenu');\n        let thecontext = this; // This is changed to something codemirror in promise\n        Str.get_strings([\n            {key: 'newemptyfile', component: 'qtype_proforma'},\n            {key: 'loadfile', component: 'qtype_proforma'},\n            {key: 'newfolder', component: 'qtype_proforma'}\n        ]).done(function(strings) {\n            thecontext.getFramework().createContextMenu([\n                [strings[0] + '...', thecontext.boundHandleNewFile], // newemptyfile\n                [strings[1] + '...', thecontext.boundHandleLoadFile], // loadfile\n                [strings[2] + '...', thecontext.boundHandleNewFolder], // newfolder\n            ]);\n        }) //. fail(notification.exception)\n            .fail(function (response) {\n                console.error(response);\n            });\n    }\n\n}\n\nclass EditorItem {\n    constructor(fileNode, textarea, tabDomNode, readOnly) {\n        console.log('Create Codemirror ' + readOnly);\n\n        this.fileNode = fileNode;\n        this.editor = CodeMirror.fromTextArea(textarea, {\n            tabMode: \"indent\",\n            indentUnit: 4,\n            matchBrackets: true,\n            autoCloseBrackets: true,\n            styleActiveLine: true,\n            readOnly: readOnly,\n            extraKeys: {'Tab': function(){ this.editor.replaceSelection('    ' , 'end');}},\n            lineNumbers: true\n            //viewportMargin: Infinity\n        });\n        this.editor.setSize(\"100%\", \"100%\");\n        // RootNode.editor.setOption('theme', \"blackboard\");\n        this.editor.setOption('theme', \"darcula\");\n        // this.editor.setOption('theme', \"abcdef\");\n        this.tab = tabDomNode;\n    }\n}\n\nclass EditorStack {\n    static maxEditors = 12;\n    constructor(donNodeEditor, donNodeTabs, framework) {\n        this.editortextarea = donNodeEditor.querySelector('textarea');\n        // Initialise readonly editor\n        this.editor = CodeMirror.fromTextArea(this.editortextarea, {\n            tabMode: \"indent\",\n            indentUnit: 4,\n            matchBrackets: true,\n            autoCloseBrackets: true,\n            styleActiveLine: true,\n            readOnly: true,\n            extraKeys: {'Tab': function(){ this.editor.replaceSelection('    ' , 'end');}},\n            lineNumbers: true\n            //viewportMargin: Infinity\n        });\n        this.editor.setSize(\"100%\", \"100%\");\n        // RootNode.editor.setOption('theme', \"blackboard\");\n        this.editor.setOption('theme', \"darcula\");\n        // this.editor.setOption('theme', \"abcdef\");\n\n        this.activeNode = undefined; // activeNode associated with Codemirror\n\n        this.nodes = []; // all filenodes with open editor\n        this.donNodeEditor = donNodeEditor;\n        this.donNodeTabs = donNodeTabs;\n        this.focus = undefined; // the tab that has got the focus\n        this.framework = framework;\n    }\n\n    _switchTo(item, index = undefined) {\n        if (index === undefined) {\n            // figure out value of i\n            for (index = 0; index < this.nodes.length; index++) {\n                if (this.nodes[index] === item) {\n                    break;\n                }\n            }\n        }\n        console.log('item index is ' + index);\n\n        // move on top\n        this.nodes.splice(index, 1);\n        this.nodes.push(item);\n\n        // Hide all editors\n        for (index = 0; index < this.nodes.length; index++) {\n            this.nodes[index].editor.getWrapperElement().style.display = 'none';\n        }\n\n        item.editor.getWrapperElement().style.display = 'block';\n        item.editor.refresh();\n        item.editor.focus();\n\n        // Switch focus\n        if (this.focus !== undefined) {\n            this.focus.classList.remove('focus');\n            let focusClose = this.focus.querySelector('.close');\n            focusClose.style.display = 'none';\n        }\n        item.tab.classList.add('focus');\n        item.tab.querySelector('.close').style.display = 'inline';\n        this.focus = item.tab;\n    }\n\n    _delete(item) {\n        console.log('** Delete item from editor');\n        for (let i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i] === item) {\n                // Read back (modified) content\n                this.nodes[i].fileNode.updateContent(this.nodes[i].editor.getValue());\n\n                this.nodes.splice(i, 1);\n                // Delete Codemirror element (in order to avoid resource leak)\n                item.editor.getWrapperElement().remove();\n                if (this.nodes.length > 0) {\n                    this._switchTo(this.nodes[this.nodes.length-1], this.nodes.length-1);\n                }\n                return;\n            }\n        }\n        console.error('could not find filenode');\n    }\n\n    addEditor(filenode) {\n        if (EditorStack.maxEditors == this.nodes.length) {\n            alert('maximum number of editors reached');\n            return;\n        }\n        if (filenode.mode !== undefined) {\n            // Create tab\n            // let tab = document.createElement('span');\n            let tab = document.createElement('button');\n\n            // Mode is known => display new text content\n            let item = new EditorItem(filenode, this.editortextarea, tab, this.framework.readOnly);\n            filenode.getContent()\n                .then(text => {\n                    item.editor.setValue(text);\n                    item.editor.setOption(\"mode\", filenode.mode);\n                    // item.editor.setOption(\"readOnly\", this.readOnly);\n                    item.editor.refresh(); // for old version of Codemirror\n                })\n                .catch( error => {\n                    console.error('error:', error);\n                    alert(error);\n                });\n\n            tab.classList.add('tab');\n            let close = document.createElement('span');\n            close.classList.add('close');\n            close.innerHTML = '&#x2715';\n            close.addEventListener('click', event => {\n                event.preventDefault();\n                event.stopPropagation();\n                this._delete(item);\n                close.parentElement.remove();\n            });\n            tab.innerHTML = filenode.name;\n            tab.append(close);\n            tab.addEventListener('click', event => {\n                event.preventDefault();\n                event.stopPropagation();\n                this._switchTo(item);\n            });\n            this.donNodeTabs.append(tab);\n\n            this.nodes.push(item);\n            this._switchTo(item);\n        } else {\n            alert('unknown mode');\n        }\n    }\n\n    switchEditorTo(filenode) {\n        // Check if filenode is already in stack\n        for (let i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i].fileNode === filenode) {\n                // filenode is in list\n                this._switchTo(this.nodes[i], i);\n                return;\n            }\n        }\n        this.addEditor(filenode);\n    }\n\n    handleResize() {\n        if (this.nodes.length > 0) {\n            // Call refresh for current Codemirror\n            // in order to update text window. Otherwise\n            // text is cut off\n            this.nodes[this.nodes.length-1].editor.refresh();\n        }\n    }\n    save() {\n        // Save all\n        // (we could save current if file is saved on switching)\n        // this.issaved = false;\n        console.log('currently open editors ' + this.nodes.length.toString());\n        console.timeStamp('save');\n        console.time('save');\n\n        for (let i = 0; i < this.nodes.length; i++) {\n            this.nodes[i].fileNode.updateContent(this.nodes[i].editor.getValue(), false);\n        }\n\n        /*\n        let promises = [];\n        for (let i = 0; i < this.nodes.length; i++) {\n            console.log('add promise to list ' + i.toString());\n            promises.push(this.nodes[i].fileNode.updateContent(this.nodes[i].editor.getValue()));\n        }\n        return Promise.all(promises).\n            then(() => {\n                console.log('all files saved');\n                console.timeStamp('save');\n                console.timeEnd('save');\n                this.issaved = true;\n\n            // return true;\n                // alert('look');\n            })\n            .catch( error => {\n                console.timeStamp('save');\n                console.timeEnd('save');\n                console.error('error:', error);\n                alert(error);\n            });*/\n        console.log('all files saved');\n        console.timeStamp('save');\n        console.timeEnd('save');\n    }\n/*    needssaving() {\n        for (let i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i].fileNode.filecontent != this.nodes[i].editor.getValue()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    issaved() {\n        return this.issaved;\n    }*/\n}\n\n\nexport class Framework {\n    constructor() {\n        this.roots = []; // all root nodes\n        this.syncer = undefined;\n        this.editorstack = undefined;\n        this.mainDomNode = undefined;\n        this.menu = undefined;\n        this.menuVisible = false;\n        this.focus = undefined;\n        this.readOnly = false;\n    }\n\n    buildFramework(domnode) {\n        console.log('buildFramework');\n        domnode.innerHTML = `<div class=\"ide\" style=\"display: flex;flex-direction: column; align-items: stretch;\n    resize: vertical;\n    overflow: hidden;\n    min-height: 150px\">\n    <div class=\"menu\" style=\"flex: none\">menu</div>\n\n    <div class=\"body\" style=\"display: flex; flex-direction: row; flex: 1 1 0; min-height: 0\">\n        <!--<div class=\"fake\" style=\"min-width: 100px; flex: 1 0 0; overflow: auto;\">Fake element</div> -->\n        <div class=\"explorer\" style=\"min-width: 20px; flex: 1 0 0; overflow: auto;\">\n        </div>\n        <div class=\"resize\"></div>\n        <div class=\"canvas\" style=\"min-width: 20px;  flex: 0 0 75%; display: flex; flex-direction: row;\">\n            <!-- set flex-basis = 50% for 2 two columns and 100%V for one column -->\n            <div class=\"canvascol\" style=\"display: flex; flex-direction: column; flex: 1 1 50%; overflow: hidden;\">\n                <div class=\"tabs\" style=\"flex: none; \">\n                </div>\n                <div class=\"editor\" style=\"flex: 1 1 0; overflow: hidden;\">\n                    <textarea></textarea>\n                </div>\n            </div>\n            <!--\n            <div class=\"resize\"></div>\n            <div class=\"canvascol\" style=\"display: flex; flex-direction: column; flex: 1 1 50%; min-height: 0;\">\n                <div class=\"tabs\" style=\"flex: none; \">\n                </div>\n                <div class=\"editor\" style=\"flex: 1 1 0; min-height: 0; overflow: hidden;\">\n                    <textarea></textarea>\n                </div>\n            </div> --> \n        </div>\n    </div>\n\n    <div class=\"status\" style=\"flex: none\">status</div>\n</div>\n<p><!--<label>File or Folder Selected: <input id=\"last_action\" type=\"text\" size=\"15\" readonly=\"\"></label>--></p>\n`;\n        // We only need one context menu that must be placed outside\n        // all other elements (esp. those that are positioned relative)\n        // in order to have the menu placed correctly.\n        let contextmenu = `<div class=\"contextmenu\" id=\"context-menu\">\n    <ul class=\"menu-options\">\n        <li class=\"menu-option\">New file</li>\n        <li class=\"menu-option\">New folder</li>\n        <li class=\"menu-option\">Delete...</li>\n    </ul>\n</div>`;\n        const menu = document.createElement('div');\n        menu.innerHTML = contextmenu;\n        let body = document.querySelector('body');\n        body.appendChild(menu);\n\n        this.mainDomNode = domnode;\n        this.editorstack = new EditorStack(domnode.querySelector('.editor'),\n            domnode.querySelector('.tabs'), this);\n    }\n\n    init(node, syncer, readOnly) {\n        this.readOnly = readOnly;\n        const initSplit = resizer =>  {\n            // from https://htmldom.dev/create-resizable-split-views/\n            const before = resizer.previousElementSibling;\n            const after = resizer.nextElementSibling;\n\n            // The current position of mouse\n            let x = 0;\n\n            let oldValue = 0;\n            let mousedown = false;\n\n            const removeSelection = () => {\n                resizer.style.removeProperty('cursor');\n                document.body.style.removeProperty('cursor');\n\n                before.style.removeProperty('user-select');\n                before.style.removeProperty('pointer-events');\n\n                if (after != undefined) {\n                    after.style.removeProperty('user-select');\n                    after.style.removeProperty('pointer-events');\n                }\n            };\n            // Handle the mousedown event\n            // that's triggered when user drags the resizer\n            const mouseDownHandler = e => {\n                // Get the current mouse position\n                x = e.clientX;\n\n                this.toggleContextmenu(\"hide\");\n                oldValue = before.getBoundingClientRect().width;\n                mousedown = true;\n                // Attach the listeners to `document`\n                document.addEventListener('mousemove', mouseMoveHandler);\n                document.addEventListener('mouseup', mouseUpHandler);\n\n                removeSelection();\n            };\n\n            const mouseMoveHandler = e =>  {\n                if (mousedown) {\n                    // How far the mouse has been moved\n                    const dx = e.clientX - x;\n                    let newBasis = ((oldValue + dx) * 100) / resizer.parentNode.getBoundingClientRect().width;\n                    before.style.flexBasis =`${newBasis}%`;\n                    if (after != undefined) {\n                        after.style.flexBasis =`${100-newBasis}%`;\n                    } else {\n                        resizer.parentNode.getBoundingClientRect().width =\n                            resizer.parentNode.getBoundingClientRect().width - dx;\n                    }\n                    removeSelection();\n                } else {\n                    mouseUpHandler();\n                }\n            };\n\n            const mouseUpHandler = function () {\n                removeSelection();\n\n                // Remove the handlers of `mousemove` and `mouseup`\n                document.removeEventListener('mousemove', mouseMoveHandler);\n                document.removeEventListener('mouseup', mouseUpHandler);\n            };\n            // Attach the handler\n            resizer.addEventListener('mousedown', mouseDownHandler);\n        };\n\n        const fileviewer = node.querySelector('.explorer');\n\n        let ul = document.createElement(\"ul\");\n        ul.setAttribute('role', 'tree');\n        ul.setAttribute('aria-labelledby', 'fileviewer');\n        fileviewer.appendChild(ul);\n\n        this.syncer = syncer;\n        // build folder/file structure.\n        /* this.syncer.dir(); Da fehlen die Dateien */\n        this.createPath('/'); // needed when no files come from syncer.\n        this.syncer.list(this)\n            .then (() => {\n                console.log('DISPLAY ROOTS');\n                console.log(this.roots);\n                for (let i = 0; i < this.roots.length; i++) {\n                    let root = this.roots[i];\n                    root.displayInTreeview(ul);\n                    root.toggleExpand();\n                }\n            });\n\n        // Hide context menu on every left click\n        window.addEventListener(\"click\", e => {\n            this.handleClick();\n        });\n\n        let el = this.mainDomNode.querySelector('.ide');\n        const observer = new ResizeObserver(() => {\n            this.editorstack.handleResize();\n        });\n        observer.observe(el);\n        initSplit(node.querySelector('.ide .body > .resize'),  'w');\n        // initSplit(node.querySelector('.ide .canvas > .resize'), 'w');\n\n        /*\n        RootNode.syncer.sendRequest('mkdir', 'newproformafolder');\n        RootNode.syncer.sendRequest('dir'); */\n    }\n\n    switchEditorTo(filenode) {\n        this.editorstack.switchEditorTo(filenode);\n    }\n    addEditor(filenode) {\n        this.editorstack.addEditor(filenode);\n    }\n\n    findNodeByPath(path) {\n        console.log('find <' + path + '>');\n        if (path.substr(0,1) != '/') {\n            console.error('path does not start with /: ' + path);\n            return undefined;\n        }\n\n        let pathsplit = path.split('/');\n        pathsplit.shift(); // first element is always empty\n        // let first = pathsplit.shift();\n        let root = this.roots[0];\n        return root.findNodeByPath(pathsplit);\n\n        /*\n        for (let i = 0; i < this.roots.length; i++) {\n            if (this.roots[i].name === first) {\n                return this.roots[i].findNodeByPath(pathsplit);\n            }\n        }\n        return undefined; */\n    }\n\n    createPath(path) {\n        console.log('Framework: create folder ' + path);\n        // Assume first char is always /\n        if (path[0] != '/') {\n            console.error('first char in path is not /: ' + path);\n        }\n        let root;\n        if (this.roots.length == 0) {\n            root = new RootNode('/', this);\n        } else {\n            root = this.roots[0];\n        }\n\n        let pathsplit = path.split('/');\n        pathsplit.shift(); // first element in array is always empty\n        return root.createPath(pathsplit);\n    }\n\n    createContextMenu(list) {\n        if (this.readOnly) {\n            return;\n        }\n        console.log('createContextMenu');\n        // console.log(list);\n        // let ul = this.mainDomNode.querySelector(\".contextmenu .menu-options\");\n        let ul = document.querySelector(\".contextmenu .menu-options\");\n        // console.log(ul);\n        ul.innerHTML = ''; // Delete all children\n        for (let i = 0; i < list.length; i++) {\n            const li = document.createElement('li');\n            li.setAttribute('class', 'menu-option');\n            li.innerHTML = list[i][0];\n            li.addEventListener('click', list[i][1]);\n            ul.appendChild(li);\n        }\n\n        this.menu = ul.parentNode;\n    }\n\n    toggleContextmenu = command => {\n        if (this.menu === undefined) {\n            return;\n        }\n        this.menu.style.display = command === \"show\" ? \"block\" : \"none\";\n        this.menuVisible = (command === \"show\");\n    };\n\n    handleClick() {\n        this.toggleContextmenu(\"hide\");\n        this.setFocusTo(undefined);\n    }\n    setFocusTo(element) {\n        if (this.focus !== undefined) {\n            this.focus.classList.remove('focus');\n        }\n        if (element !== undefined) {\n            element.classList.add('focus');\n            this.focus = element;\n        } else {\n            this.focus = undefined;\n        }\n    }\n\n/*    needssaving() {\n        return this.editorstack.needssaving();\n    }\n    issaved() {\n        return this.editorstack.issaved();\n    } */\n    save() {\n        console.log(this);\n        console.log(this.editorstack);\n        return this.editorstack.save();\n        // alert('hallo');\n        // setTimeout(() => { return p1; }, 60000);\n    }\n}\n"],"names":["TreeNode","name","element","undefined","parent","boundHandleContextMenu","event","_this","setContextMenu","getFramework","menu","console","log","preventDefault","stopPropagation","top","left","origin","pageX","pageY","style","toggleContextmenu","handleDragStart","dataTransfer","getData","length","getPath","setData","this","domnode","li","document","createElement","setAttribute","appendChild","addEventListener","FileNode","filecontent","mode","getEditorModeFromFilename","_this2","handleDelete","handleClick","syncer","deleteFileOrFolder","remove","files","filter","item","boundHandleRename","thecontext","Str","get_strings","key","component","done","strings","prompt","oldpath","innerHTML","newpath","renameFile","fail","response","error","boundHandleClick","setFocusTo","handleDoubleClick","switchEditorTo","p1","download","then","result","_this3","Promise","resolve","newcontent","async","update","classList","add","createContextMenu","filename","split","pop","toLowerCase","FolderNode","folders","_this4","boundHandleNewFile","isNameChildUnique","alert","node","appendFile","displayInTreeview","querySelector","expand","newfile","boundHandleLoadFile","input","type","onchange","e","file","target","_addFileFromOs","click","handleDragOver","handleDragEnter","readOnly","handleDragLeave","handleDrop","path","findNodeByPath","appendFolder","renameFolder","items","i","webkitGetAsEntry","_getFileTree","boundHandleNewFolder","foldername","mkdir","toggleExpand","isExpanded","handleMouseOver","currentTarget","handleMouseOut","first","shift","lenghth","createPath","localeCompare","recurseinit","isFile","_this5","isDirectory","dirReader","createReader","readEntries","entries","show","reader","FileReader","readAsText","onload","readerEvent","content","_this6","addEditor","upload","doit","span1","span2","subul","j","getAttribute","push","RootNode","framework","roots","EditorItem","fileNode","textarea","tabDomNode","editor","CodeMirror","fromTextArea","tabMode","indentUnit","matchBrackets","autoCloseBrackets","styleActiveLine","extraKeys","replaceSelection","lineNumbers","setSize","setOption","tab","EditorStack","donNodeEditor","donNodeTabs","editortextarea","activeNode","nodes","focus","index","splice","getWrapperElement","display","refresh","focusClose","updateContent","getValue","_switchTo","filenode","maxEditors","getContent","text","setValue","catch","close","_this8","_delete","parentElement","append","toString","timeStamp","time","timeEnd","Framework","command","_this9","menuVisible","editorstack","mainDomNode","fileviewer","ul","list","_this10","root","window","resizer","before","after","x","oldValue","mousedown","removeSelection","mouseMoveHandler","mouseUpHandler","el","ResizeObserver","handleResize","observe","previousElementSibling","nextElementSibling","removeProperty","body","dx","clientX","newBasis","parentNode","getBoundingClientRect","width","flexBasis","removeEventListener","substr","pathsplit","save"],"mappings":"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"}