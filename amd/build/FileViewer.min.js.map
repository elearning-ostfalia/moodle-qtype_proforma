{"version":3,"file":"FileViewer.min.js","sources":["../src/FileViewer.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * The ProFormA Question CodeMirror support functions\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2022 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     K.Borm <k.borm[at]ostfalia.de>\n */\n\n\n/** NOTE:\n * Currently creating subfolders is disabled, because the moodle question filesaver does not support it */\n\n/* eslint-disable no-unused-vars */\n\n// Use these imports for Moodle\n// -----------------------------\nimport \"./MoodleSyncer\";\n\nimport './codemirror-global';\nimport CodeMirror from \"./codemirror\";\n\nimport \"./clike\";\nimport \"./python\";\nimport \"./javascriptmode\"; // renamed from javascript\nimport \"./xml\";\nimport \"./matchbrackets\";\nimport \"./closebrackets\";\nimport \"./active-line\";\n\n// import Config from 'core/config';\nimport * as Str from 'core/str';\n// import * as notification from 'core/notification';\nimport {get_string as getString} from 'core/str';\n\n// Use this for editortest.html\n// -----------------------------\n/*\nimport './codemirror-global.js';\nimport \"./FakeSyncer.js\";\n\nimport CodeMirror from \"./codemirror/src/codemirror.js\";\nimport \"./codemirror/mode/clike/clike.js\";\nimport \"./codemirror/mode/javascript/javascript.js\";\nimport \"./codemirror/mode/python/python.js\";\nimport \"./codemirror/mode/xml/xml.js\";\nimport \"./codemirror/addon/selection/active-line.js\";\nimport \"./codemirror/addon/edit/matchbrackets.js\";\nimport \"./codemirror/addon/edit/closebrackets.js\";\nclass Config { // Fake\n    static wwwroot = '';\n    static sesskey = '';\n}\nclass FakeAjaxResult {\n    constructor(result) {\n        this.result = result;\n    }\n    done(callback) {\n        callback(this.result);\n        return this;\n    }\n    fail(callback) {\n        return this;\n    }\n}\nclass Str {\n    static get_strings(dict) {\n        console.log('fake get_strings');\n        console.log(dict);\n        let result = [];\n        let index = 0;\n        dict.forEach(function(item, index, array) {\n            // var value = dict[key];\n            result[index] = item['key'];\n        });\n        console.log(result);\n        return new FakeAjaxResult(result);\n        // return FakeAjaxResult.create(result);\n        // return Promise.resolve(result);\n    }\n}\nfunction getString(text) { return text; }\n*/\n\n\n// 'use strict'; ecma6 code is always strict\n\n\n// TODO:\n// - Split View: Problem mit Flackern\n// - Theme wechseln\n// - Menu erstmal raus - auÃŸer zum Wechseln des Themes\n// - Andere Browser testen\n\n/**\n * TreeNode\n */\nclass TreeNode {\n    constructor(name) {\n        this.name = name;\n        this.element = undefined; // DOM element\n        this.parent = undefined; // parent Treenode\n\n        this.boundHandleContextMenu = event => {\n            // console.log(event)\n            event.preventDefault();\n            event.stopPropagation(); // otherwise parent node handles event, too\n\n            this.setContextMenu();\n            if (this.getFramework().menu === undefined) {\n                return;\n            }\n            const showMenu = ({ top, left }) => {\n                this.getFramework().menu.style.left = `${left}px`;\n                this.getFramework().menu.style.top = `${top}px`;\n                // this.getFramework().menu.style.setProperty('--mouse-x', event.clientX + 'px');\n                // this.getFramework().menu.style.setProperty('--mouse-y', event.clientY + 'px');\n                this.getFramework().toggleContextmenu('show');\n            };\n\n            // console.log(`contextmenu: ${event}`);\n\n            const origin = {\n                left: event.pageX,\n                top: event.pageY\n            };\n            // console.log(`${event.pageX}px ${event.pageY}px`);\n            // console.log(event);\n            showMenu(origin);\n        };\n        this.handleDragStart = event => {\n            if (event.dataTransfer.getData('treeitem').length == 0) {\n                // console.log('dragstart: ' + this.getPath());\n                event.dataTransfer.setData('treeitem', this.getPath());\n            }\n        };\n    }\n    getPath() {\n        return this.parent === undefined? this.name : this.parent.getPath() + '/' + this.name ;\n    }\n    // Override\n    setContextMenu() {\n        TreeNode.menu = undefined;\n    }\n    displayInTreeview(domnode) {\n        const li = document.createElement('li');\n        li.setAttribute('role', 'treeitem');\n        li.setAttribute('draggable', 'true');\n        domnode.appendChild(li);\n        li.addEventListener('contextmenu', this.boundHandleContextMenu);\n        li.addEventListener('dragstart', this.handleDragStart);\n        this.element = li; // Store element\n        return li;\n    }\n\n    getFramework() {\n        return this.parent.getFramework();\n    }\n\n    async alreadyExists(name) {\n        let text = await getString('alreadyexists', 'qtype_proforma', name);\n        alert(text);\n    }\n\n    async confirmAndDo(prompt, callback, name) {\n        let text = await getString(prompt, 'qtype_proforma', name);\n        if (confirm(text)) {\n            callback();\n        }\n    }\n}\n\n/**\n * FileNode\n */\nexport class FileNode extends TreeNode {\n    static getEditorModeFromFilename(filename) {\n        const extension = filename.split('.').pop().toLowerCase();\n        switch (extension) {\n            case \"java\":\n                return \"text/x-java\";\n            case \"py\":\n                return \"text/x-python\";\n            case \"setlx\":\n                return \"text/text\";\n            case \"c\":\n                return \"text/x-csrc\";\n            case \"cpp\":\n            case \"cxx\":\n            case \"h\":\n            case \"hpp\":\n                return \"text/x-c++src\";\n            case \"xml\":\n                return \"application/xml\";\n            case \"html\":\n                return \"text/html\";\n            case \"sql\":\n                return \"text/x-sql\";\n            case \"js\":\n                return \"text/javascript\";\n            case \"php\":\n                return \"application/x-httpd-php\";\n            case 'txt':\n            case 'log':\n            case 'md':\n            case 'csv':\n                return \"text\";\n        }\n    }\n\n    constructor(name) {\n        super(name);\n        this.filecontent = '';\n        this.mode = FileNode.getEditorModeFromFilename(this.name);\n        this.handleDelete = event => {\n            this.getFramework().handleClick(event);\n            let context = this;\n            this.confirmAndDo('deletefile', function() {\n                context.getFramework().deleteEditor(context);\n                context.getFramework().syncer.deleteFileOrFolder(context.getPath());\n                context.element.remove();\n                context.parent.files = context.parent.files.filter(item => item !== context);\n            }, this.getPath());\n        };\n        this.boundHandleRename = event => {\n            this.getFramework().handleClick(event);\n            let thecontext = this;\n            Str.get_strings([\n                {key: 'enterfilename', component: 'qtype_proforma'},\n            ]).done(function(strings) {\n                let name = prompt(strings[0] + ':', thecontext.name);\n                if (name !== null && name.length > 0) {\n                    if (!thecontext.parent.isNameChildUnique(name)) {\n                        thecontext.alreadyExists(name);\n                        return;\n                    }\n                    const oldpath = thecontext.getPath();\n                    thecontext.name = name;\n                    thecontext.element.innerHTML = name;\n                    const newpath = thecontext.getPath();\n                    thecontext.getFramework().syncer.renameFile(oldpath, newpath);\n                    // thecontext.element.tabIndex = 0;\n                }\n            }) //. fail(notification.exception)\n                .fail(function (response) {\n                    console.error(response);\n                });\n        };\n        this.boundHandleClick = event => {\n            this.getFramework().toggleContextmenu(\"hide\");\n            this.getFramework().setFocusTo(this.element);\n            event.stopPropagation();\n            // event.preventDefault();\n        };\n        this.handleDoubleClick = event => {\n            this.getFramework().toggleContextmenu(\"hide\");\n            // document.getElementById('last_action').value = this.name;\n            if (this.filecontent != undefined) {\n                this.getFramework().switchEditorTo(this);\n            }\n            this.getFramework().setFocusTo(this.element);\n            event.stopPropagation();\n            // event.preventDefault();\n        };\n    }\n    getContent() {\n        if (this.filecontent.length == 0) {\n            const p1 = this.getFramework().syncer.download(this.getPath());\n            // console.log('Fileviewer promise result');\n            // console.log(p1);\n            p1.then(result => {\n                // console.log('Downloaded text is: '+ result);\n                this.filecontent = result;\n                return result;\n            });\n            return p1;\n        } else {\n            return Promise.resolve(this.filecontent);\n        }\n    }\n    updateContent(newcontent, async) {\n        this.filecontent = newcontent;\n        return this.getFramework().syncer.update(this.getPath(), newcontent, async);\n    }\n    displayInTreeview(domnode) {\n        const li = super.displayInTreeview(domnode);\n        li.innerHTML = this.name;\n        li.classList.add('doc');\n\n        li.addEventListener('dblclick', this.handleDoubleClick);\n        li.addEventListener('click', this.boundHandleClick);\n\n//        li.addEventListener('mouseover', this.handleMouseOver);\n//        li.addEventListener('mouseout', this.handleMouseOut);\n    }\n\n    setContextMenu() {\n        console.log('FileNode setContextMenu');\n        // this is something from codemirror in promise done function???\n        // so this is renamed\n        let thecontext = this;\n        Str.get_strings([\n            {key: 'delete', component: 'qtype_proforma'},\n            {key: 'rename', component: 'qtype_proforma'}\n        ]).done(function(strings) {\n            thecontext.getFramework().createContextMenu([\n                [strings[0] + '...', thecontext.handleDelete], // Delete\n                [strings[1], thecontext.boundHandleRename] // Rename\n            ]);\n        }) /*.fail(notification.exception)*/\n            .fail(function (response) {\n                console.error(response);\n        });\n    }\n}\n\n/**\n * FolderNode\n */\nexport class FolderNode extends TreeNode {\n    constructor(name) {\n        super(name);\n        this.files = []; // Empty list of files.\n        this.folders = []; // Empty list of folders.\n        this.handleDelete = event => {\n            this.getFramework().handleClick(event);\n            let context = this;\n            this.confirmAndDo('deletefolder', function() {\n                context.getFramework().syncer.deleteFileOrFolder(context.getPath() + '/.');\n                context.element.remove();\n                context.parent.folders = context.parent.folders.filter(item => item !== context);\n                // console.log(RootNode.projects);\n            }, this.getPath());\n        };\n        this.boundHandleNewFile = event => {\n            this.getFramework().handleClick(event);\n            let thecontext = this;\n            Str.get_strings([\n                {key: 'enterfilename', component: 'qtype_proforma'},\n            ]).done(function(strings) {\n                let filename = prompt(strings[0] + ':', \"\");\n                if (filename !== null && filename.length > 0) {\n                    if (!thecontext.isNameChildUnique(filename)) {\n                        thecontext.alreadyExists(filename);\n                        // alert(filename + ' already exists');\n                        return;\n                    }\n                    let node = new FileNode(filename);\n                    thecontext.appendFile(node);\n                    node.displayInTreeview(thecontext.element.querySelector('[role=\"group\"]'));\n                    thecontext.expand(true);\n                    thecontext.getFramework().syncer.newfile(node.getPath());\n                }\n            }) //. fail(notification.exception)\n                .fail(function (response) {\n                    console.error(response);\n                });\n        };\n        this.boundHandleLoadFile = event => {\n            this.getFramework().handleClick(event);\n            let input = document.createElement('input');\n            input.type = 'file';\n            input.onchange = e => {\n                let file = e.target.files[0];\n                this._addFileFromOs(file, true);\n            };\n            input.click();\n        };\n        this.handleDragOver = event => {\n            event.preventDefault();\n        };\n        this.handleDragEnter = () =>  {\n            if (this.getFramework().readOnly) {\n                return;\n            }\n            this.element.querySelector('.name').classList.add('dragover');\n        };\n        this.handleDragLeave = () => {\n            if (this.getFramework().readOnly) {\n                return;\n            }\n            this.element.querySelector('.name').classList.remove('dragover');\n        };\n\n        this.handleDrop = event => {\n            event.preventDefault();\n            event.stopPropagation();\n            this.getFramework().toggleContextmenu(\"hide\");\n            if (this.getFramework().readOnly) {\n                return;\n            }\n            this.element.querySelector('.name').classList.remove('dragover');\n            const path = event.dataTransfer.getData('treeitem');\n            if (path !== undefined && path.length > 0) {\n                console.log('drop ' + path + ' onto ' + this.getPath());\n                // Node element from tree\n                const node = this.getFramework().findNodeByPath(path);\n                if (node !== undefined && !this.isNameChildUnique(node.name)) {\n                    // TODO: wenn der Ordner schon existiert, sollte nur der Inhalt gemergt werden\n                    // alert(node.name + ' already exists');\n                    this.alreadyExists(node.name);\n                    return;\n                }\n                if (node instanceof FolderNode) {\n                    // remove folder in old parent\n                    const oldpath = node.getPath();\n                    node.parent.folders = node.parent.folders.filter(item => item !== node);\n                    // add folder to this\n                    this.appendFolder(node);\n                    this.element.querySelector('ul').appendChild(node.element);\n                    // node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\n                    this.expand(true);\n                    this.getFramework().syncer.renameFolder(oldpath, node.getPath());\n                } else if (node instanceof FileNode) {\n                    const oldpath = node.getPath();\n                    node.parent.files = node.parent.files.filter(item => item !== node);\n                    // add folder to this\n                    this.appendFile(node);\n                    // node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\n                    this.element.querySelector('ul').appendChild(node.element);\n                    this.expand(true);\n                    this.getFramework().syncer.renameFile(oldpath, node.getPath());\n                } else {\n                    console.error('node cannot be moved');\n                    console.log(node);\n                }\n            } else {\n                // External file or folder\n                console.log('drop file/folder');\n                let items = event.dataTransfer.items;\n                for (let i=0; i<items.length; i++) {\n                    let item = items[i].webkitGetAsEntry();  //Might be renamed to GetAsEntry()\n                    if (item) {\n                        this._getFileTree(item);\n                    }\n                }\n            }\n        };\n        this.boundHandleNewFolder = event => {\n            this.getFramework().handleClick(event);\n            let thecontext = this;\n            Str.get_strings([\n                {key: 'enterfoldername', component: 'qtype_proforma'},\n            ]).done(function(strings) {\n                let foldername = prompt(strings[0] + ':', \"\");\n                if (foldername !== null && foldername.length > 0) {\n                    if (!thecontext.isNameChildUnique(foldername)) {\n                        thecontext.alreadyExists(foldername);\n                        // alert(foldername + ' already exists');\n                        return;\n                    }\n                    let node = new FolderNode(foldername);\n                    thecontext.appendFolder(node);\n                    node.displayInTreeview(thecontext.element.querySelector('[role=\"group\"]'));\n                    thecontext.expand(true);\n                    console.log('create new folder ' + node.getPath());\n                    thecontext.getFramework().syncer.mkdir(node.getPath());\n                }\n\n            }) //. fail(notification.exception)\n                .fail(function (response) {\n                    console.error(response);\n                });\n        };\n\n        this.boundHandleClick = event => {\n            console.log('FolderNode click');\n            this.getFramework().toggleContextmenu(\"hide\");\n            // Problem: child nodes also get focus\n            this.getFramework().setFocusTo(this.element);\n            event.stopPropagation();\n            event.preventDefault();\n        };\n        this.boundHandleRename = event => {\n            this.getFramework().handleClick(event);\n            let thecontext = this;\n            Str.get_strings([\n                {key: 'enterfoldername', component: 'qtype_proforma'},\n            ]).done(function(strings) {\n                let name = prompt(strings[0] + ':', thecontext.name);\n                if (name !== null && name.length > 0) {\n                    if (!thecontext.parent.isNameChildUnique(name)) {\n                        thecontext.alreadyExists(name);\n                        return;\n                    }\n                    const oldpath = thecontext.getPath() + '/.';\n                    thecontext.name = name;\n                    thecontext.element.querySelector('.name').innerHTML = name;\n                    const newpath = thecontext.getPath() + '/.';\n                    thecontext.getFramework().syncer.renameFolder(oldpath, newpath);\n                }\n            }) //. fail(notification.exception)\n                .fail(function (response) {\n                    console.error(response);\n                });\n        };\n        this.toggleExpand = () => {\n            this.element.setAttribute('aria-expanded', !this.isExpanded());\n        };\n        this.handleMouseOver = event => {\n            event.currentTarget.classList.add('hover');\n        };\n        this.handleMouseOut = event => {\n            event.currentTarget.classList.remove('hover');\n        };\n    }\n    findNodeByPath(path) {\n        let first = path.shift();\n        for (let i = 0; i < this.files.length; i++) {\n            if (this.files[i].name === first) {\n                return this.files[i];\n            }\n        }\n        for (let i = 0; i < this.folders.length; i++) {\n            if (this.folders[i].name === first) {\n                if (path.length == 0) {\n                    return this.folders[i];\n                } else {\n                    return this.folders[i].findNodeByPath(path);\n                }\n            }\n        }\n        return undefined;\n    }\n    createPath(path) {\n        // console.log(path);\n        let first = path.shift();\n        // console.log('foldernode: create node for <' + first + '>');\n        if (first === undefined || first.length == 0) {\n            if (path.lenghth > 0) {\n                console.error('Bug in creating path');\n            }\n            return this;\n        }\n        for (let i = 0; i < this.folders.length; i++) {\n            if (this.folders[i].name === first) {\n                // Subpath exists\n                if (path.length == 0) {\n                    // full path exists => return folder object.\n                    return this.folders[i];\n                } else {\n                    return this.folders[i].createPath(path);\n                }\n            }\n        }\n        // Path does not exist => create.\n        // console.log('create folder node for ' + first);\n        let node = new FolderNode(first);\n        this.appendFolder(node);\n        return node.createPath(path);\n    }\n\n    isNameChildUnique(name) {\n        for (let i = 0; i < this.files.length; i++) {\n            if (name.localeCompare(this.files[i].name) == 0 ) {\n                return false;\n            }\n        }\n        for (let i = 0; i < this.folders.length; i++) {\n            if (name.localeCompare(this.folders[i].name) == 0 ) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    _getFileTree(item, path = undefined) {\n        const recurseinit = (path === undefined);\n        path = path || \"\";\n        if (item.isFile) {\n            item.file(file => {\n                // Show file content only if no path given\n                // i.e. no recursion\n                this._addFileFromOs(file, recurseinit);\n            });\n        } else if (item.isDirectory) {\n/*******\n            // Create new folder\n            let node = new FolderNode(item.name);\n            this.appendFolder(node);\n            node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\n            this.expand(true);\n            this.getFramework().syncer.mkdir(node.getPath());\n\n            // Get folder contents\n            // console.log(item.fullPath);\n            let dirReader = item.createReader();\n            dirReader.readEntries(entries => {\n                for (let i=0; i < entries.length; i++) {\n                    node._getFileTree(entries[i], path + item.name + \"/\");\n                }\n            });\n */\n        }\n    }\n\n    _addFileFromOs(file, show = false) {\n        if (!this.isNameChildUnique(file.name)) {\n            this.alreadyExists(file.name);\n            return;\n        }\n        let node = new FileNode(file.name);\n        let reader = new FileReader();\n        reader.readAsText(file,'UTF-8');\n        reader.onload = readerEvent => {\n            let content = readerEvent.target.result; // this is the content!\n            node.filecontent = content;\n            if (show) {\n                this.getFramework().addEditor(node);\n                this.getFramework().setFocusTo(node.element);\n            }\n            this.getFramework().syncer.upload(node.getPath(), file);\n        };\n        this.appendFile(node);\n        node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\n        this.expand(true);\n    }\n    expand(doit) {\n        this.element.setAttribute('aria-expanded', doit);\n    }\n\n    displayInTreeview(domnode) {\n        const li = super.displayInTreeview(domnode);\n        li.setAttribute('aria-expanded', 'false');\n\n        const span2 = document.createElement('span');\n        span2.addEventListener('dblclick', this.toggleExpand);\n        span2.innerHTML = this.name;\n        span2.classList.add('name');\n        span2.addEventListener('click', this.boundHandleClick);\n        span2.addEventListener('dragenter', this.handleDragEnter);\n        span2.addEventListener('dragleave', this.handleDragLeave);\n        span2.addEventListener('drop', this.handleDrop);\n        span2.addEventListener('dragover', this.handleDragOver);\n        li.appendChild(span2);\n\n        const subul = document.createElement('ul');\n        subul.setAttribute('role', 'group');\n        li.appendChild(subul);\n\n        for (let j = 0; j < this.folders.length; j++) {\n            this.folders[j].displayInTreeview(subul);\n        }\n        for (let j = 0; j < this.files.length; j++) {\n            this.files[j].displayInTreeview(subul);\n        }\n    }\n\n    isExpanded() {\n        return this.element.getAttribute('aria-expanded') === 'true';\n    }\n    setContextMenu() {\n        console.log('FolderNode setContextMenu');\n        let thecontext = this; // This is changed to something codemirror in promise\n        Str.get_strings([\n            {key: 'newemptyfile', component: 'qtype_proforma'},\n            {key: 'loadfile', component: 'qtype_proforma'},\n            {key: 'newfolder', component: 'qtype_proforma'},\n            {key: 'rename', component: 'qtype_proforma'},\n            {key: 'delete', component: 'qtype_proforma'}\n        ]).done(function(strings) {\n            thecontext.getFramework().createContextMenu([\n                [strings[0] + '...', thecontext.boundHandleNewFile], // newemptyfile\n                [strings[1] + '...', thecontext.boundHandleLoadFile], // loadfile\n//***                [strings[2] + '...', thecontext.boundHandleNewFolder], // newfolder\n                [strings[3], thecontext.boundHandleRename], // Rename\n                [strings[4] + '...', thecontext.handleDelete], // delete\n            ]);\n        }) //. fail(notification.exception)\n            .fail(function (response) {\n                console.error(response);\n            });\n    }\n\n    appendFile(node) { this.files.push(node); node.parent = this; }\n    appendFolder(node) { this.folders.push(node); node.parent = this; }\n}\n\n/**\n * RootNode\n */\nexport class RootNode extends FolderNode {\n    constructor(name, framework) {\n        super(name);\n        console.log('CREATE root node ' + name);\n        this.framework = framework;\n        framework.roots.push(this);\n    }\n    getFramework() {\n        return this.framework;\n    }\n    getPath() {\n        return '';\n    }\n    setContextMenu() {\n        console.log('RootNode setContextMenu');\n        let thecontext = this; // This is changed to something codemirror in promise\n        Str.get_strings([\n            {key: 'newemptyfile', component: 'qtype_proforma'},\n            {key: 'loadfile', component: 'qtype_proforma'},\n            {key: 'newfolder', component: 'qtype_proforma'}\n        ]).done(function(strings) {\n            thecontext.getFramework().createContextMenu([\n                [strings[0] + '...', thecontext.boundHandleNewFile], // newemptyfile\n                [strings[1] + '...', thecontext.boundHandleLoadFile], // loadfile\n//***                [strings[2] + '...', thecontext.boundHandleNewFolder], // newfolder\n            ]);\n        }) //. fail(notification.exception)\n            .fail(function (response) {\n                console.error(response);\n            });\n    }\n\n}\n\nclass EditorItem {\n    constructor(fileNode, textarea, tabDomNode, readOnly) {\n        console.log('Create Codemirror ' + readOnly);\n\n        this.fileNode = fileNode;\n        this.editor = CodeMirror.fromTextArea(textarea, {\n            tabMode: \"indent\",\n            indentUnit: 4,\n            matchBrackets: true,\n            autoCloseBrackets: true,\n            styleActiveLine: true,\n            readOnly: readOnly,\n            extraKeys: {'Tab': function(){ this.editor.replaceSelection('    ' , 'end');}},\n            lineNumbers: true\n            //viewportMargin: Infinity\n        });\n        this.editor.setSize(\"100%\", \"100%\");\n        // RootNode.editor.setOption('theme', \"blackboard\");\n        this.editor.setOption('theme', \"darcula\");\n        // this.editor.setOption('theme', \"abcdef\");\n        this.tab = tabDomNode;\n    }\n}\n\nclass EditorStack {\n    static maxEditors = 12;\n    constructor(donNodeEditor, donNodeTabs, framework) {\n        this.editortextarea = donNodeEditor.querySelector('textarea');\n        // Initialise readonly editor\n        this.editor = CodeMirror.fromTextArea(this.editortextarea, {\n            tabMode: \"indent\",\n            indentUnit: 4,\n            matchBrackets: true,\n            autoCloseBrackets: true,\n            styleActiveLine: true,\n            readOnly: true,\n            extraKeys: {'Tab': function(){ this.editor.replaceSelection('    ' , 'end');}},\n            lineNumbers: true\n            //viewportMargin: Infinity\n        });\n        this.editor.setSize(\"100%\", \"100%\");\n        // RootNode.editor.setOption('theme', \"blackboard\");\n        this.editor.setOption('theme', \"darcula\");\n        // this.editor.setOption('theme', \"abcdef\");\n\n        this.activeNode = undefined; // activeNode associated with Codemirror\n\n        this.nodes = []; // all filenodes with open editor\n        // this.donNodeEditor = donNodeEditor;\n        this.donNodeTabs = donNodeTabs;\n        this.focus = undefined; // the tab that has got the focus\n        this.framework = framework;\n    }\n\n    _switchTo(item, index = undefined) {\n        if (index === undefined) {\n            // figure out value of i\n            for (index = 0; index < this.nodes.length; index++) {\n                if (this.nodes[index] === item) {\n                    break;\n                }\n            }\n        }\n        console.log('item index is ' + index);\n\n        // move on top\n        this.nodes.splice(index, 1);\n        this.nodes.push(item);\n\n        // Hide all editors\n        for (index = 0; index < this.nodes.length; index++) {\n            this.nodes[index].editor.getWrapperElement().style.display = 'none';\n        }\n\n        item.editor.getWrapperElement().style.display = 'block';\n        item.editor.refresh();\n        item.editor.focus();\n\n        // Switch focus\n        if (this.focus !== undefined) {\n            this.focus.classList.remove('focus');\n            let focusClose = this.focus.querySelector('.close');\n            focusClose.style.display = 'none';\n        }\n        item.tab.classList.add('focus');\n        item.tab.querySelector('.close').style.display = 'inline';\n        this.focus = item.tab;\n    }\n\n    _delete(item) {\n        for (let i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i] === item) {\n                console.log('** Delete item from editor');\n                // Read back (modified) content\n                this.nodes[i].fileNode.updateContent(this.nodes[i].editor.getValue());\n\n                this.nodes.splice(i, 1);\n                // Delete Codemirror element (in order to avoid resource leak)\n                item.editor.getWrapperElement().remove();\n                if (this.nodes.length > 0) {\n                    this._switchTo(this.nodes[this.nodes.length-1], this.nodes.length-1);\n                }\n                return;\n            }\n        }\n        console.error('could not find filenode');\n    }\n\n    deleteEditor(filenode) {\n        for (let i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i].fileNode === filenode) {\n                this.nodes[i].tab.remove();\n                this.nodes[i].tab = undefined;\n                this._delete(this.nodes[i]);\n                return;\n            }\n        }\n    }\n    addEditor(filenode) {\n        if (EditorStack.maxEditors == this.nodes.length) {\n            alert('maximum number of editors reached');\n            return;\n        }\n        if (filenode.mode !== undefined) {\n            // Create tab\n            // let tab = document.createElement('span');\n            let tab = document.createElement('button');\n\n            // Mode is known => display new text content\n            let item = new EditorItem(filenode, this.editortextarea, tab, this.framework.readOnly);\n            filenode.getContent()\n                .then(text => {\n                    if (text === undefined) {\n                        text = '???';\n                    }\n                    item.editor.setValue(text);\n                    item.editor.setOption(\"mode\", filenode.mode);\n                    // item.editor.setOption(\"readOnly\", this.readOnly);\n                    item.editor.refresh(); // for old version of Codemirror\n                })\n                .catch( error => {\n                    console.error('error:', error);\n                    alert(error);\n                });\n\n            tab.classList.add('tab');\n            let close = document.createElement('span');\n            close.classList.add('close');\n            close.innerHTML = '&#x2715';\n            close.addEventListener('click', event => {\n                event.preventDefault();\n                event.stopPropagation();\n                this._delete(item);\n                close.parentElement.remove();\n            });\n            tab.innerHTML = filenode.name;\n            tab.append(close);\n            tab.addEventListener('click', event => {\n                event.preventDefault();\n                event.stopPropagation();\n                this._switchTo(item);\n            });\n            this.donNodeTabs.append(tab);\n\n            this.nodes.push(item);\n            this._switchTo(item);\n        } else {\n            console.error('unknown file mode');\n        }\n    }\n\n    switchEditorTo(filenode) {\n        // Check if filenode is already in stack\n        for (let i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i].fileNode === filenode) {\n                // filenode is in list\n                this._switchTo(this.nodes[i], i);\n                return;\n            }\n        }\n        this.addEditor(filenode);\n    }\n\n    handleResize() {\n        if (this.nodes.length > 0) {\n            // Call refresh for current Codemirror\n            // in order to update text window. Otherwise\n            // text is cut off\n            this.nodes[this.nodes.length-1].editor.refresh();\n        }\n    }\n    save() {\n        // Save all\n        // (we could save current if file is saved on switching)\n        // this.issaved = false;\n        console.log('currently open editors ' + this.nodes.length.toString());\n        console.timeStamp('save');\n        console.time('save');\n\n        for (let i = 0; i < this.nodes.length; i++) {\n            this.nodes[i].fileNode.updateContent(this.nodes[i].editor.getValue(), false);\n        }\n\n        /*\n        let promises = [];\n        for (let i = 0; i < this.nodes.length; i++) {\n            console.log('add promise to list ' + i.toString());\n            promises.push(this.nodes[i].fileNode.updateContent(this.nodes[i].editor.getValue()));\n        }\n        return Promise.all(promises).\n            then(() => {\n                console.log('all files saved');\n                console.timeStamp('save');\n                console.timeEnd('save');\n                this.issaved = true;\n\n            // return true;\n                // alert('look');\n            })\n            .catch( error => {\n                console.timeStamp('save');\n                console.timeEnd('save');\n                console.error('error:', error);\n                alert(error);\n            });*/\n        console.log('all files saved');\n        console.timeStamp('save');\n        console.timeEnd('save');\n    }\n/*    needssaving() {\n        for (let i = 0; i < this.nodes.length; i++) {\n            if (this.nodes[i].fileNode.filecontent != this.nodes[i].editor.getValue()) {\n                return true;\n            }\n        }\n        return false;\n    }\n    issaved() {\n        return this.issaved;\n    }*/\n}\n\n\nexport class Framework {\n    constructor() {\n        this.roots = []; // all root nodes\n        this.syncer = undefined;\n        this.editorstack = undefined;\n        this.mainDomNode = undefined;\n        this.menu = undefined;\n        this.menuVisible = false;\n        this.focus = undefined;\n        this.readOnly = false;\n        this.rootnode = 'Submission';\n    }\n\n    buildFramework(domnode) {\n        console.log('buildFramework');\n        domnode.innerHTML = `<div class=\"ide\" style=\"display: flex;flex-direction: column; align-items: stretch;\n    resize: vertical;\n    overflow: hidden;\n    min-height: 150px\">\n    <!--<div class=\"menu\" style=\"flex: none\">menu</div>-->\n\n    <div class=\"body\" style=\"display: flex; flex-direction: row; flex: 1 1 0; min-height: 0\">\n        <!--<div class=\"fake\" style=\"min-width: 100px; flex: 1 0 0; overflow: auto;\">Fake element</div> -->\n        <div class=\"explorer\" style=\"min-width: 20px; flex: 1 0 0; overflow: auto;\">\n        </div>\n        <div class=\"resize\"></div>\n        <div class=\"canvas\" style=\"min-width: 20px;  flex: 0 0 75%; display: flex; flex-direction: row;\">\n            <!-- set flex-basis = 50% for 2 two columns and 100%V for one column -->\n            <div class=\"canvascol\" style=\"display: flex; flex-direction: column; flex: 1 1 50%; overflow: hidden;\">\n                <div class=\"tabs\" style=\"flex: none; \">\n                </div>\n                <div class=\"editor\" style=\"flex: 1 1 0; overflow: hidden;\">\n                    <textarea></textarea>\n                </div>\n            </div>\n            <!--\n            <div class=\"resize\"></div>\n            <div class=\"canvascol\" style=\"display: flex; flex-direction: column; flex: 1 1 50%; min-height: 0;\">\n                <div class=\"tabs\" style=\"flex: none; \">\n                </div>\n                <div class=\"editor\" style=\"flex: 1 1 0; min-height: 0; overflow: hidden;\">\n                    <textarea></textarea>\n                </div>\n            </div> --> \n        </div>\n    </div>\n\n    <!--<div class=\"status\" style=\"flex: none\">status</div>-->\n</div>\n<p><!--<label>File or Folder Selected: <input id=\"last_action\" type=\"text\" size=\"15\" readonly=\"\"></label>--></p>\n`;\n        // We only need one context menu that must be placed outside\n        // all other elements (esp. those that are positioned relative)\n        // in order to have the menu placed correctly.\n        let contextmenu = `<div class=\"contextmenu\" id=\"context-menu\">\n    <ul class=\"menu-options\">\n        <li class=\"menu-option\">New file</li>\n        <li class=\"menu-option\">New folder</li>\n        <li class=\"menu-option\">Delete...</li>\n    </ul>\n</div>`;\n        const menu = document.createElement('div');\n        menu.innerHTML = contextmenu;\n        let body = document.querySelector('body');\n        body.appendChild(menu);\n\n        this.mainDomNode = domnode;\n        this.editorstack = new EditorStack(domnode.querySelector('.editor'),\n            domnode.querySelector('.tabs'), this);\n    }\n\n    init(node, syncer, readOnly, rootnode = 'Files') {\n        this.readOnly = readOnly;\n        this.rootnode = rootnode;\n        const initSplit = resizer =>  {\n            // from https://htmldom.dev/create-resizable-split-views/\n            const before = resizer.previousElementSibling;\n            const after = resizer.nextElementSibling;\n\n            // The current position of mouse\n            let x = 0;\n\n            let oldValue = 0;\n            let mousedown = false;\n\n            const removeSelection = () => {\n                resizer.style.removeProperty('cursor');\n                document.body.style.removeProperty('cursor');\n\n                before.style.removeProperty('user-select');\n                before.style.removeProperty('pointer-events');\n\n                if (after != undefined) {\n                    after.style.removeProperty('user-select');\n                    after.style.removeProperty('pointer-events');\n                }\n            };\n            // Handle the mousedown event\n            // that's triggered when user drags the resizer\n            const mouseDownHandler = e => {\n                // Get the current mouse position\n                x = e.clientX;\n\n                this.toggleContextmenu(\"hide\");\n                oldValue = before.getBoundingClientRect().width;\n                mousedown = true;\n                // Attach the listeners to `document`\n                document.addEventListener('mousemove', mouseMoveHandler);\n                document.addEventListener('mouseup', mouseUpHandler);\n\n                removeSelection();\n            };\n\n            const mouseMoveHandler = e =>  {\n                if (mousedown) {\n                    // How far the mouse has been moved\n                    const dx = e.clientX - x;\n                    let newBasis = ((oldValue + dx) * 100) / resizer.parentNode.getBoundingClientRect().width;\n                    before.style.flexBasis =`${newBasis}%`;\n                    if (after != undefined) {\n                        after.style.flexBasis =`${100-newBasis}%`;\n                    } else {\n                        resizer.parentNode.getBoundingClientRect().width =\n                            resizer.parentNode.getBoundingClientRect().width - dx;\n                    }\n                    removeSelection();\n                } else {\n                    mouseUpHandler();\n                }\n            };\n\n            const mouseUpHandler = function () {\n                removeSelection();\n\n                // Remove the handlers of `mousemove` and `mouseup`\n                document.removeEventListener('mousemove', mouseMoveHandler);\n                document.removeEventListener('mouseup', mouseUpHandler);\n            };\n            // Attach the handler\n            resizer.addEventListener('mousedown', mouseDownHandler);\n        };\n\n        const fileviewer = node.querySelector('.explorer');\n        // Prevent browser from opening a dropped file in a new tab.\n        fileviewer.addEventListener('drop', event => {\n            event.preventDefault();\n        });\n        fileviewer.addEventListener('dragover', event => {\n            event.preventDefault();\n        });\n\n        let ul = document.createElement(\"ul\");\n        ul.setAttribute('role', 'tree');\n        ul.setAttribute('aria-labelledby', 'fileviewer');\n        fileviewer.appendChild(ul);\n\n        this.syncer = syncer;\n        // build folder/file structure.\n        /* this.syncer.dir(); Da fehlen die Dateien */\n        this.createPath('/'); // needed when no files come from syncer.\n        this.syncer.list(this)\n            .then (() => {\n                console.log('DISPLAY ROOTS');\n                console.log(this.roots);\n                for (let i = 0; i < this.roots.length; i++) {\n                    let root = this.roots[i];\n                    root.displayInTreeview(ul);\n                    root.toggleExpand();\n                }\n            });\n\n        // Hide context menu on every left click\n        window.addEventListener(\"click\", e => {\n            this.handleClick();\n        });\n\n        let el = this.mainDomNode.querySelector('.ide');\n        const observer = new ResizeObserver(() => {\n            this.editorstack.handleResize();\n        });\n        observer.observe(el);\n        initSplit(node.querySelector('.ide .body > .resize'),  'w');\n        // initSplit(node.querySelector('.ide .canvas > .resize'), 'w');\n\n        // Read context menu strings in order to have them in\n        // the browser cache and the menu can open immediately\n        /*\n        Str.get_strings([\n            {key: 'delete', component: 'qtype_proforma'},\n            {key: 'rename', component: 'qtype_proforma'},\n            {key: 'loadfile', component: 'qtype_proforma'},\n            {key: 'newemptyfile', component: 'qtype_proforma'},\n            {key: 'newfolder', component: 'qtype_proforma'},\n        ]).done(function(strings) {\n            console.log('context menu string read.');\n            console.log(strings);\n        }).fail(function (response) {\n            console.error(response);\n        }); */\n\n        /*\n        RootNode.syncer.sendRequest('mkdir', 'newproformafolder');\n        RootNode.syncer.sendRequest('dir'); */\n    }\n\n    switchEditorTo(filenode) {\n        this.editorstack.switchEditorTo(filenode);\n    }\n    addEditor(filenode) {\n        this.editorstack.addEditor(filenode);\n    }\n    deleteEditor(filenode) {\n        this.editorstack.deleteEditor(filenode);\n    }\n\n    findNodeByPath(path) {\n        console.log('find <' + path + '>');\n        if (path.substr(0,1) != '/') {\n            console.error('path does not start with /: ' + path);\n            return undefined;\n        }\n\n        let pathsplit = path.split('/');\n        pathsplit.shift(); // first element is always empty\n        // let first = pathsplit.shift();\n        let root = this.roots[0];\n        return root.findNodeByPath(pathsplit);\n\n        /*\n        for (let i = 0; i < this.roots.length; i++) {\n            if (this.roots[i].name === first) {\n                return this.roots[i].findNodeByPath(pathsplit);\n            }\n        }\n        return undefined; */\n    }\n\n    createPath(path) {\n        console.log('Framework: create folder ' + path);\n        // Assume first char is always /\n        if (path[0] !== '/') {\n            console.error('first char in path is not /: ' + path);\n        }\n        let pathsplit = path.split('/');\n        pathsplit.shift(); // first element in array is always empty\n\n        let root;\n        let context = this;\n        if (this.roots.length === 0) {\n            root = new RootNode(context.rootnode, context);\n            return root.createPath(pathsplit);\n/*\n            getString('rootsubmission', 'qtype_proforma')\n                .done(function(string) {\n                    root = new RootNode(string, context);\n                    return root.createPath(pathsplit);\n                })\n                .fail(function (response) {\n                    console.error(response);\n                });*/\n        } else {\n            root = this.roots[0];\n            return root.createPath(pathsplit);\n        }\n    }\n\n    createContextMenu(list) {\n        if (this.readOnly) {\n            return;\n        }\n        console.log('createContextMenu ' + list.length);\n        // console.log(list);\n        // let ul = this.mainDomNode.querySelector(\".contextmenu .menu-options\");\n        let ul = document.querySelector(\".contextmenu .menu-options\");\n        // console.log(ul);\n        ul.innerHTML = ''; // Delete all children\n        for (let i = 0; i < list.length; i++) {\n            const li = document.createElement('li');\n            li.setAttribute('class', 'menu-option');\n            li.innerHTML = list[i][0];\n            li.addEventListener('click', list[i][1]);\n            console.log(list[i][0]);\n            ul.appendChild(li);\n        }\n\n        this.menu = ul.parentNode;\n    }\n\n    toggleContextmenu = command => {\n        if (this.menu === undefined) {\n            return;\n        }\n        this.menu.style.display = command === \"show\" ? \"block\" : \"none\";\n        this.menuVisible = (command === \"show\");\n    };\n\n    handleClick() {\n        this.toggleContextmenu(\"hide\");\n        this.setFocusTo(undefined);\n    }\n    setFocusTo(element) {\n        if (this.focus !== undefined) {\n            this.focus.classList.remove('focus');\n        }\n        if (element !== undefined) {\n            element.classList.add('focus');\n            this.focus = element;\n        } else {\n            this.focus = undefined;\n        }\n    }\n\n/*    needssaving() {\n        return this.editorstack.needssaving();\n    }\n    issaved() {\n        return this.editorstack.issaved();\n    } */\n    save() {\n        console.log(this);\n        console.log(this.editorstack);\n        return this.editorstack.save();\n        // alert('hallo');\n        // setTimeout(() => { return p1; }, 60000);\n    }\n}\n"],"names":["TreeNode","constructor","name","element","undefined","parent","boundHandleContextMenu","event","preventDefault","stopPropagation","setContextMenu","this","getFramework","menu","_ref","top","left","style","toggleContextmenu","showMenu","pageX","pageY","handleDragStart","dataTransfer","getData","length","setData","getPath","displayInTreeview","domnode","li","document","createElement","setAttribute","appendChild","addEventListener","text","alert","prompt","callback","confirm","FileNode","filename","split","pop","toLowerCase","filecontent","mode","getEditorModeFromFilename","handleDelete","handleClick","context","confirmAndDo","deleteEditor","syncer","deleteFileOrFolder","remove","files","filter","item","boundHandleRename","thecontext","Str","get_strings","key","component","done","strings","isNameChildUnique","alreadyExists","oldpath","innerHTML","newpath","renameFile","fail","response","console","error","boundHandleClick","setFocusTo","handleDoubleClick","switchEditorTo","getContent","p1","download","then","result","Promise","resolve","updateContent","newcontent","async","update","super","classList","add","log","createContextMenu","FolderNode","folders","boundHandleNewFile","node","appendFile","querySelector","expand","newfile","boundHandleLoadFile","input","type","onchange","e","file","target","_addFileFromOs","click","handleDragOver","handleDragEnter","readOnly","handleDragLeave","handleDrop","path","findNodeByPath","appendFolder","renameFolder","items","i","webkitGetAsEntry","_getFileTree","boundHandleNewFolder","foldername","mkdir","toggleExpand","isExpanded","handleMouseOver","currentTarget","handleMouseOut","first","shift","createPath","lenghth","localeCompare","recurseinit","isFile","isDirectory","show","reader","FileReader","readAsText","onload","readerEvent","content","addEditor","upload","doit","span2","subul","j","getAttribute","push","RootNode","framework","roots","EditorItem","fileNode","textarea","tabDomNode","editor","CodeMirror","fromTextArea","tabMode","indentUnit","matchBrackets","autoCloseBrackets","styleActiveLine","extraKeys","replaceSelection","lineNumbers","setSize","setOption","tab","EditorStack","donNodeEditor","donNodeTabs","editortextarea","activeNode","nodes","focus","_switchTo","index","splice","getWrapperElement","display","refresh","_delete","getValue","filenode","maxEditors","setValue","catch","close","parentElement","append","handleResize","save","toString","timeStamp","time","timeEnd","command","menuVisible","editorstack","mainDomNode","rootnode","buildFramework","init","fileviewer","ul","list","root","window","el","ResizeObserver","observe","resizer","before","previousElementSibling","after","nextElementSibling","x","oldValue","mousedown","removeSelection","removeProperty","body","mouseMoveHandler","dx","clientX","newBasis","parentNode","getBoundingClientRect","width","flexBasis","mouseUpHandler","removeEventListener","initSplit","substr","pathsplit"],"mappings":"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"}