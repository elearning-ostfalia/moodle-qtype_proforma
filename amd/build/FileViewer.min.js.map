{"version":3,"file":"FileViewer.min.js","sources":["../src/FileViewer.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\r\n//\r\n// ProFormA Question Type for Moodle is free software:\r\n// you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with ProFormA Question Type for Moodle.\r\n// If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * The ProFormA Question CodeMirror support functions\r\n *\r\n * @package    qtype\r\n * @subpackage proforma\r\n * @copyright  2022 Ostfalia Hochschule fuer angewandte Wissenschaften\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n * @author     K.Borm <k.borm[at]ostfalia.de>\r\n */\r\n\r\n\r\n/** NOTE:\r\n * Currently creating subfolders is disabled, because the moodle question filesaver does not support it */\r\n\r\nconst autosaveIntervall = 30000; // in milliseconds\r\n\r\n/* eslint-disable no-unused-vars */\r\n\r\n// Use these imports for Moodle\r\n// -----------------------------\r\nimport \"./MoodleSyncer\";\r\n\r\nimport './codemirror-global';\r\nimport CodeMirror from \"./codemirror\";\r\n\r\nimport \"./clike\";\r\nimport \"./python\";\r\nimport \"./javascriptmode\"; // renamed from javascript\r\nimport \"./xml\";\r\nimport \"./matchbrackets\";\r\nimport \"./closebrackets\";\r\nimport \"./active-line\";\r\n\r\n// import Config from 'core/config';\r\nimport * as Str from 'core/str';\r\n// import * as notification from 'core/notification';\r\nimport {get_string as getString} from 'core/str';\r\nimport ModalFactory from 'core/modal_factory';\r\nimport ModalEvents from 'core/modal_events';\r\n\r\n// Use this for editortest.html\r\n// -----------------------------\r\n/*\r\nimport './codemirror-global.js';\r\nimport \"./FakeSyncer.js\";\r\n\r\nimport CodeMirror from \"./codemirror/src/codemirror.js\";\r\nimport \"./codemirror/mode/clike/clike.js\";\r\nimport \"./codemirror/mode/javascript/javascript.js\";\r\nimport \"./codemirror/mode/python/python.js\";\r\nimport \"./codemirror/mode/xml/xml.js\";\r\nimport \"./codemirror/addon/selection/active-line.js\";\r\nimport \"./codemirror/addon/edit/matchbrackets.js\";\r\nimport \"./codemirror/addon/edit/closebrackets.js\";\r\nclass Config { // Fake\r\n    static wwwroot = '';\r\n    static sesskey = '';\r\n}\r\nclass FakeAjaxResult {\r\n    constructor(result) {\r\n        this.result = result;\r\n    }\r\n    done(callback) {\r\n        callback(this.result);\r\n        return this;\r\n    }\r\n    fail(callback) {\r\n        return this;\r\n    }\r\n}\r\nclass Str {\r\n    static get_strings(dict) {\r\n        console.log('fake get_strings');\r\n        console.log(dict);\r\n        let result = [];\r\n        let index = 0;\r\n        dict.forEach(function(item, index, array) {\r\n            // var value = dict[key];\r\n            result[index] = item['key'];\r\n        });\r\n        console.log(result);\r\n        return new FakeAjaxResult(result);\r\n        // return FakeAjaxResult.create(result);\r\n        // return Promise.resolve(result);\r\n    }\r\n}\r\nfunction getString(text) { return text; }\r\n*/\r\n\r\n\r\n// 'use strict'; ecma6 code is always strict\r\n\r\n\r\n// TODO:\r\n// - Split View: Problem mit Flackern\r\n// - Theme wechseln\r\n// - Menu erstmal raus - auÃŸer zum Wechseln des Themes\r\n// - Andere Browser testen\r\n\r\nfunction modalPrompt(titleId, labelId, defaultValue, callback) {\r\n    // TODO: wait in parallel\r\n    Str.get_strings([\r\n        {key: titleId, component: 'qtype_proforma'},\r\n        {key: labelId, component: 'qtype_proforma'},\r\n        ])\r\n    .then(strings => {\r\n        return ModalFactory.create({\r\n            type: ModalFactory.types.SAVE_CANCEL,\r\n            title: strings[0],\r\n            buttons: {\r\n                save: 'Ok',\r\n            },\r\n            body:\r\n                strings[1] +\r\n                '<input type=\"text\" name=\"promptname\" value=\"' + defaultValue + '\" size=\"63\"></input>',\r\n        });\r\n    })\r\n    .then(modal => {\r\n        modal.getRoot().on(ModalEvents.save, () => {\r\n            let result = document.querySelector(\"input[name='promptname']\").value;\r\n            // console.log(result);\r\n            modal.getRoot().remove();\r\n            callback(result);\r\n        });\r\n        modal.show()\r\n            // Set focus into input field.\r\n            .then(() => document.querySelector(\"input[name='promptname']\").focus());\r\n\r\n        // Add trigger for return to trigger default action.\r\n        let defaultButton = modal.getRoot().find('.btn-primary');\r\n        document.querySelector(\"input[name='promptname']\")\r\n            .addEventListener(\"keyup\", function(event) {\r\n                event.preventDefault();\r\n                if (event.keyCode === 13) {\r\n                    defaultButton.click();\r\n                }\r\n            });\r\n    });\r\n}\r\n\r\n/**\r\n * TreeNode\r\n */\r\nclass TreeNode {\r\n    constructor(name) {\r\n        this.name = name;\r\n        this.element = undefined; // DOM element\r\n        this.parent = undefined; // parent Treenode\r\n\r\n        this.boundHandleContextMenu = event => {\r\n            // console.log(event)\r\n            event.preventDefault();\r\n            event.stopPropagation(); // otherwise parent node handles event, too\r\n\r\n            this.setContextMenu()\r\n                .then(() => {\r\n                    if (this.getFramework().menu === undefined) {\r\n                        return;\r\n                    }\r\n                    const showMenu = ({ top, left }) => {\r\n                        this.getFramework().menu.style.left = `${left}px`;\r\n                        this.getFramework().menu.style.top = `${top}px`;\r\n                        // this.getFramework().menu.style.setProperty('--mouse-x', event.clientX + 'px');\r\n                        // this.getFramework().menu.style.setProperty('--mouse-y', event.clientY + 'px');\r\n                        this.getFramework().toggleContextmenu('show');\r\n                    };\r\n\r\n                    // console.log(`contextmenu: ${event}`);\r\n\r\n                    const origin = {\r\n                        left: event.pageX,\r\n                        top: event.pageY\r\n                    };\r\n                    // console.log(`${event.pageX}px ${event.pageY}px`);\r\n                    // console.log(event);\r\n                    showMenu(origin);\r\n                });\r\n        };\r\n        this.handleDragStart = event => {\r\n            if (event.dataTransfer.getData('treeitem').length == 0) {\r\n                // console.log('dragstart: ' + this.getPath());\r\n                event.dataTransfer.setData('treeitem', this.getPath());\r\n            }\r\n        };\r\n    }\r\n    getPath() {\r\n        return this.parent === undefined? this.name : this.parent.getPath() + '/' + this.name ;\r\n    }\r\n    // Override\r\n    setContextMenu() {\r\n        TreeNode.menu = undefined;\r\n        return Promise.resolve(null);\r\n    }\r\n    displayInTreeview(domnode) {\r\n        const li = document.createElement('li');\r\n        li.setAttribute('role', 'treeitem');\r\n        li.setAttribute('draggable', 'true');\r\n        domnode.appendChild(li);\r\n        li.addEventListener('contextmenu', this.boundHandleContextMenu);\r\n        li.addEventListener('dragstart', this.handleDragStart);\r\n        this.element = li; // Store element\r\n        return li;\r\n    }\r\n\r\n    getFramework() {\r\n        return this.parent.getFramework();\r\n    }\r\n\r\n    async alreadyExists(name) {\r\n        let text = await getString('alreadyexists', 'qtype_proforma', name);\r\n        alert(text);\r\n    }\r\n\r\n    async confirmAndDo(prompt, callback, name) {\r\n        let text = await getString(prompt, 'qtype_proforma', name);\r\n        if (confirm(text)) {\r\n            callback();\r\n        }    \r\n    /*\r\n        const text = await getString(prompt, 'qtype_proforma', name);\r\n        ModalFactory.create({\r\n            type: ModalFactory.types.SAVE_CANCEL,\r\n            title: 'Confirm',\r\n            body: text,\r\n        }).then(modal => {\r\n            callback();\r\n            modal.remove();\r\n        }); */\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * FileNode\r\n */\r\nexport class FileNode extends TreeNode {\r\n    static getEditorModeFromFilename(filename) {\r\n        const extension = filename.split('.').pop().toLowerCase();\r\n        switch (extension) {\r\n            case \"java\":\r\n                return \"text/x-java\";\r\n            case \"py\":\r\n                return \"text/x-python\";\r\n            case \"setlx\":\r\n                return \"text/text\";\r\n            case \"c\":\r\n                return \"text/x-csrc\";\r\n            case \"cpp\":\r\n            case \"cxx\":\r\n            case \"h\":\r\n            case \"hpp\":\r\n                return \"text/x-c++src\";\r\n            case \"xml\":\r\n                return \"application/xml\";\r\n            case \"html\":\r\n                return \"text/html\";\r\n            case \"sql\":\r\n                return \"text/x-sql\";\r\n            case \"js\":\r\n                return \"text/javascript\";\r\n            case \"php\":\r\n                return \"application/x-httpd-php\";\r\n            case 'txt':\r\n            case 'log':\r\n            case 'md':\r\n            case 'csv':\r\n                return \"text\";\r\n        }\r\n    }\r\n\r\n    constructor(name) {\r\n        super(name);\r\n        this.filecontent = '';\r\n        this.mode = FileNode.getEditorModeFromFilename(this.name);\r\n        this.handleDelete = event => {\r\n            this.getFramework().handleClick(event);\r\n            let context = this;\r\n            this.confirmAndDo('deletefile', function() {\r\n                context.getFramework().deleteEditor(context);\r\n                context.getFramework().syncer.deleteFileOrFolder(context.getPath());\r\n                context.element.remove();\r\n                context.parent.files = context.parent.files.filter(item => item !== context);\r\n            }, this.getPath());\r\n        };\r\n        this.boundHandleRename = event => {\r\n            this.getFramework().handleClick(event);\r\n            let thecontext = this;\r\n            modalPrompt('rename', 'enterfilename', thecontext.name, (name) => {\r\n                if (name !== null && name.length > 0) {\r\n                    if (!thecontext.parent.isNameChildUnique(name)) {\r\n                        thecontext.alreadyExists(name);\r\n                        return;\r\n                    }\r\n                    const oldpath = thecontext.getPath();\r\n                    thecontext.name = name;\r\n                    thecontext.element.innerHTML = name;\r\n                    const newpath = thecontext.getPath();\r\n                    thecontext.mode = FileNode.getEditorModeFromFilename(thecontext.name);\r\n                    thecontext.getFramework().syncer.renameFile(oldpath, newpath);\r\n                    // thecontext.element.tabIndex = 0;\r\n                    // Update name in tab if open\r\n                    thecontext.getFramework().editorstack.update(thecontext);\r\n                }\r\n            });\r\n        };\r\n        this.boundHandleClick = event => {\r\n            this.getFramework().toggleContextmenu(\"hide\");\r\n            this.getFramework().setFocusTo(this.element);\r\n            event.stopPropagation();\r\n            // event.preventDefault();\r\n        };\r\n        this.handleDoubleClick = event => {\r\n            this.getFramework().toggleContextmenu(\"hide\");\r\n            // document.getElementById('last_action').value = this.name;\r\n            if (this.filecontent != undefined) {\r\n                this.getFramework().switchEditorTo(this);\r\n            }\r\n            this.getFramework().setFocusTo(this.element);\r\n            event.stopPropagation();\r\n            // event.preventDefault();\r\n        };\r\n    }\r\n    getContent() {\r\n        if (this.filecontent.length == 0) {\r\n            const p1 = this.getFramework().syncer.download(this.getPath());\r\n            // console.log('Fileviewer promise result');\r\n            // console.log(p1);\r\n            p1.then(result => {\r\n                // console.log('Downloaded text is: '+ result);\r\n                this.filecontent = result;\r\n                return result;\r\n            });\r\n            return p1;\r\n        } else {\r\n            return Promise.resolve(this.filecontent);\r\n        }\r\n    }\r\n    updateContent(newcontent, async) {\r\n        this.filecontent = newcontent;\r\n        console.log('Update ' + this.getPath() + ' with ' + newcontent.substr(0, 20) + '...');\r\n        return this.getFramework().syncer.update(this.getPath(), newcontent, async);\r\n    }\r\n    displayInTreeview(domnode) {\r\n        const li = super.displayInTreeview(domnode);\r\n        li.innerHTML = this.name;\r\n        li.classList.add('doc');\r\n\r\n        li.addEventListener('dblclick', this.handleDoubleClick);\r\n        li.addEventListener('click', this.boundHandleClick);\r\n\r\n//        li.addEventListener('mouseover', this.handleMouseOver);\r\n//        li.addEventListener('mouseout', this.handleMouseOut);\r\n    }\r\n\r\n    setContextMenu() {\r\n        console.log('FileNode setContextMenu');\r\n        // this is something from codemirror in promise done function???\r\n        // so this is renamed\r\n        let thecontext = this;\r\n        return Str.get_strings([\r\n            {key: 'delete', component: 'qtype_proforma'},\r\n            {key: 'rename', component: 'qtype_proforma'}\r\n        ]).done(function(strings) {\r\n            thecontext.getFramework().createContextMenu([\r\n                [strings[0] + '...', thecontext.handleDelete], // Delete\r\n                [strings[1] + '...', thecontext.boundHandleRename] // Rename\r\n            ]);\r\n        }) /*.fail(notification.exception)*/\r\n            .fail(function (response) {\r\n                console.error(response);\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * FolderNode\r\n */\r\nexport class FolderNode extends TreeNode {\r\n    constructor(name) {\r\n        super(name);\r\n        this.files = []; // Empty list of files.\r\n        this.folders = []; // Empty list of folders.\r\n        this.handleDelete = event => {\r\n            this.getFramework().handleClick(event);\r\n            let context = this;\r\n            this.confirmAndDo('deletefolder', function() {\r\n                context.getFramework().syncer.deleteFileOrFolder(context.getPath() + '/.');\r\n                context.element.remove();\r\n                context.parent.folders = context.parent.folders.filter(item => item !== context);\r\n                // console.log(RootNode.projects);\r\n            }, this.getPath());\r\n        };\r\n        this.boundHandleNewFile = event => {\r\n            this.getFramework().handleClick(event);\r\n            let thecontext = this;\r\n            modalPrompt('newemptyfile', 'filename', '', (filename) => {\r\n                if (filename !== null && filename.length > 0) {\r\n                    if (!thecontext.isNameChildUnique(filename)) {\r\n                        thecontext.alreadyExists(filename);\r\n                        // alert(filename + ' already exists');\r\n                        return;\r\n                    }\r\n                    let node = new FileNode(filename);\r\n                    thecontext.appendFile(node);\r\n                    node.displayInTreeview(thecontext.element.querySelector('[role=\"group\"]'));\r\n                    thecontext.expand(true);\r\n                    thecontext.getFramework().syncer.newfile(node.getPath());\r\n                    // Open editor with new empty file for input\r\n                    thecontext.getFramework().addEditor(node);\r\n                    thecontext.getFramework().setFocusTo(node.element);\r\n                }\r\n            });\r\n        };\r\n        this.boundHandleLoadFile = event => {\r\n            this.getFramework().handleClick(event);\r\n            let input = document.createElement('input');\r\n            input.type = 'file';\r\n            input.onchange = e => {\r\n                let file = e.target.files[0];\r\n                this._addFileFromOs(file, true);\r\n            };\r\n            input.click();\r\n        };\r\n        this.handleDragOver = event => {\r\n            event.preventDefault();\r\n        };\r\n        this.handleDragEnter = () =>  {\r\n            if (this.getFramework().readOnly) {\r\n                return;\r\n            }\r\n            this.element.querySelector('.name').classList.add('dragover');\r\n        };\r\n        this.handleDragLeave = () => {\r\n            if (this.getFramework().readOnly) {\r\n                return;\r\n            }\r\n            this.element.querySelector('.name').classList.remove('dragover');\r\n        };\r\n\r\n        this.handleDrop = event => {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            this.getFramework().toggleContextmenu(\"hide\");\r\n            if (this.getFramework().readOnly) {\r\n                return;\r\n            }\r\n            this.element.querySelector('.name').classList.remove('dragover');\r\n            const path = event.dataTransfer.getData('treeitem');\r\n            if (path !== undefined && path.length > 0) {\r\n                console.log('drop ' + path + ' onto ' + this.getPath());\r\n                // Node element from tree\r\n                const node = this.getFramework().findNodeByPath(path);\r\n                if (node !== undefined && !this.isNameChildUnique(node.name)) {\r\n                    // TODO: wenn der Ordner schon existiert, sollte nur der Inhalt gemergt werden\r\n                    // alert(node.name + ' already exists');\r\n                    this.alreadyExists(node.name);\r\n                    return;\r\n                }\r\n                if (node instanceof FolderNode) {\r\n                    // remove folder in old parent\r\n                    const oldpath = node.getPath();\r\n                    node.parent.folders = node.parent.folders.filter(item => item !== node);\r\n                    // add folder to this\r\n                    this.appendFolder(node);\r\n                    this.element.querySelector('ul').appendChild(node.element);\r\n                    // node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\r\n                    this.expand(true);\r\n                    this.getFramework().syncer.renameFolder(oldpath, node.getPath());\r\n                } else if (node instanceof FileNode) {\r\n                    const oldpath = node.getPath();\r\n                    node.parent.files = node.parent.files.filter(item => item !== node);\r\n                    // add folder to this\r\n                    this.appendFile(node);\r\n                    // node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\r\n                    this.element.querySelector('ul').appendChild(node.element);\r\n                    this.expand(true);\r\n                    this.getFramework().syncer.renameFile(oldpath, node.getPath());\r\n                } else {\r\n                    console.error('node cannot be moved');\r\n                    console.log(node);\r\n                }\r\n            } else {\r\n                // External file or folder\r\n                console.log('drop file/folder');\r\n                let items = event.dataTransfer.items;\r\n                for (let i=0; i<items.length; i++) {\r\n                    let item = items[i].webkitGetAsEntry();  //Might be renamed to GetAsEntry()\r\n                    if (item) {\r\n                        this._getFileTree(item);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n        this.boundHandleNewFolder = event => {\r\n            this.getFramework().handleClick(event);\r\n            let thecontext = this;\r\n            modalPrompt('newfolder', 'enterfoldername', '', (foldername) => {\r\n                if (foldername !== null && foldername.length > 0) {\r\n                    if (!thecontext.isNameChildUnique(foldername)) {\r\n                        thecontext.alreadyExists(foldername);\r\n                        // alert(foldername + ' already exists');\r\n                        return;\r\n                    }\r\n                    let node = new FolderNode(foldername);\r\n                    thecontext.appendFolder(node);\r\n                    node.displayInTreeview(thecontext.element.querySelector('[role=\"group\"]'));\r\n                    thecontext.expand(true);\r\n                    console.log('create new folder ' + node.getPath());\r\n                    thecontext.getFramework().syncer.mkdir(node.getPath());\r\n                }\r\n            });\r\n        };\r\n\r\n        this.boundHandleClick = event => {\r\n            console.log('FolderNode click');\r\n            this.getFramework().toggleContextmenu(\"hide\");\r\n            // Problem: child nodes also get focus\r\n            this.getFramework().setFocusTo(this.element);\r\n            event.stopPropagation();\r\n            event.preventDefault();\r\n        };\r\n        this.boundHandleRename = event => {\r\n            this.getFramework().handleClick(event);\r\n            let thecontext = this;\r\n            modalPrompt('rename', 'enterfoldername', thecontext.name, (name) => {\r\n                if (name !== null && name.length > 0) {\r\n                    if (!thecontext.parent.isNameChildUnique(name)) {\r\n                        thecontext.alreadyExists(name);\r\n                        return;\r\n                    }\r\n                    const oldpath = thecontext.getPath() + '/.';\r\n                    thecontext.name = name;\r\n                    thecontext.element.querySelector('.name').innerHTML = name;\r\n                    const newpath = thecontext.getPath() + '/.';\r\n                    thecontext.getFramework().syncer.renameFolder(oldpath, newpath);\r\n                }\r\n            });\r\n        };\r\n        this.toggleExpand = () => {\r\n            this.element.setAttribute('aria-expanded', !this.isExpanded());\r\n        };\r\n        this.handleMouseOver = event => {\r\n            event.currentTarget.classList.add('hover');\r\n        };\r\n        this.handleMouseOut = event => {\r\n            event.currentTarget.classList.remove('hover');\r\n        };\r\n    }\r\n    findNodeByPath(path) {\r\n        let first = path.shift();\r\n        for (let i = 0; i < this.files.length; i++) {\r\n            if (this.files[i].name === first) {\r\n                return this.files[i];\r\n            }\r\n        }\r\n        for (let i = 0; i < this.folders.length; i++) {\r\n            if (this.folders[i].name === first) {\r\n                if (path.length == 0) {\r\n                    return this.folders[i];\r\n                } else {\r\n                    return this.folders[i].findNodeByPath(path);\r\n                }\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    createPath(path) {\r\n        // console.log(path);\r\n        let first = path.shift();\r\n        // console.log('foldernode: create node for <' + first + '>');\r\n        if (first === undefined || first.length == 0) {\r\n            if (path.lenghth > 0) {\r\n                console.error('Bug in creating path');\r\n            }\r\n            return this;\r\n        }\r\n        for (let i = 0; i < this.folders.length; i++) {\r\n            if (this.folders[i].name === first) {\r\n                // Subpath exists\r\n                if (path.length == 0) {\r\n                    // full path exists => return folder object.\r\n                    return this.folders[i];\r\n                } else {\r\n                    return this.folders[i].createPath(path);\r\n                }\r\n            }\r\n        }\r\n        // Path does not exist => create.\r\n        // console.log('create folder node for ' + first);\r\n        let node = new FolderNode(first);\r\n        this.appendFolder(node);\r\n        return node.createPath(path);\r\n    }\r\n\r\n    isNameChildUnique(name) {\r\n        for (let i = 0; i < this.files.length; i++) {\r\n            if (name.localeCompare(this.files[i].name) == 0 ) {\r\n                return false;\r\n            }\r\n        }\r\n        for (let i = 0; i < this.folders.length; i++) {\r\n            if (name.localeCompare(this.folders[i].name) == 0 ) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    _getFileTree(item, path = undefined) {\r\n        const recurseinit = (path === undefined);\r\n        path = path || \"\";\r\n        if (item.isFile) {\r\n            item.file(file => {\r\n                // Show file content only if no path given\r\n                // i.e. no recursion\r\n                this._addFileFromOs(file, recurseinit);\r\n            });\r\n        } else if (item.isDirectory) {\r\n/*******\r\n            // Create new folder\r\n            let node = new FolderNode(item.name);\r\n            this.appendFolder(node);\r\n            node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\r\n            this.expand(true);\r\n            this.getFramework().syncer.mkdir(node.getPath());\r\n\r\n            // Get folder contents\r\n            // console.log(item.fullPath);\r\n            let dirReader = item.createReader();\r\n            dirReader.readEntries(entries => {\r\n                for (let i=0; i < entries.length; i++) {\r\n                    node._getFileTree(entries[i], path + item.name + \"/\");\r\n                }\r\n            });\r\n */\r\n        }\r\n    }\r\n\r\n    _addFileFromOs(file, show = false) {\r\n        if (!this.isNameChildUnique(file.name)) {\r\n            this.alreadyExists(file.name);\r\n            return;\r\n        }\r\n        let node = new FileNode(file.name);\r\n        let reader = new FileReader();\r\n        reader.readAsText(file,'UTF-8');\r\n        reader.onload = readerEvent => {\r\n            let content = readerEvent.target.result; // this is the content!\r\n            node.filecontent = content;\r\n            if (show) {\r\n                this.getFramework().addEditor(node);\r\n                this.getFramework().setFocusTo(node.element);\r\n            }\r\n            this.getFramework().syncer.upload(node.getPath(), file);\r\n        };\r\n        this.appendFile(node);\r\n        node.displayInTreeview(this.element.querySelector('[role=\"group\"]'));\r\n        this.expand(true);\r\n    }\r\n    expand(doit) {\r\n        this.element.setAttribute('aria-expanded', doit);\r\n    }\r\n\r\n    displayInTreeview(domnode) {\r\n        const li = super.displayInTreeview(domnode);\r\n        li.setAttribute('aria-expanded', 'false');\r\n\r\n        const span2 = document.createElement('span');\r\n        span2.addEventListener('dblclick', this.toggleExpand);\r\n        span2.innerHTML = this.name;\r\n        span2.classList.add('name');\r\n        span2.addEventListener('click', this.boundHandleClick);\r\n        span2.addEventListener('dragenter', this.handleDragEnter);\r\n        span2.addEventListener('dragleave', this.handleDragLeave);\r\n        span2.addEventListener('drop', this.handleDrop);\r\n        span2.addEventListener('dragover', this.handleDragOver);\r\n        li.appendChild(span2);\r\n\r\n        const subul = document.createElement('ul');\r\n        subul.setAttribute('role', 'group');\r\n        li.appendChild(subul);\r\n\r\n        for (let j = 0; j < this.folders.length; j++) {\r\n            this.folders[j].displayInTreeview(subul);\r\n        }\r\n        for (let j = 0; j < this.files.length; j++) {\r\n            this.files[j].displayInTreeview(subul);\r\n        }\r\n    }\r\n\r\n    isExpanded() {\r\n        return this.element.getAttribute('aria-expanded') === 'true';\r\n    }\r\n    setContextMenu() {\r\n        console.log('FolderNode setContextMenu');\r\n        let thecontext = this; // This is changed to something codemirror in promise\r\n        return Str.get_strings([\r\n            {key: 'newemptyfile', component: 'qtype_proforma'},\r\n            {key: 'loadfile', component: 'qtype_proforma'},\r\n            {key: 'newfolder', component: 'qtype_proforma'},\r\n            {key: 'rename', component: 'qtype_proforma'},\r\n            {key: 'delete', component: 'qtype_proforma'}\r\n        ]).done(function(strings) {\r\n            thecontext.getFramework().createContextMenu([\r\n                [strings[0] + '...', thecontext.boundHandleNewFile], // newemptyfile\r\n                [strings[1] + '...', thecontext.boundHandleLoadFile], // loadfile\r\n\r\n//***               [strings[2] + '...', thecontext.boundHandleNewFolder], // newfolder\r\n                [strings[3] + '...', thecontext.boundHandleRename], // Rename\r\n                [strings[4] + '...', thecontext.handleDelete], // delete\r\n            ]);\r\n        }) //. fail(notification.exception)\r\n            .fail(function (response) {\r\n                console.error(response);\r\n            });\r\n    }\r\n\r\n    appendFile(node) { this.files.push(node); node.parent = this; }\r\n    appendFolder(node) { this.folders.push(node); node.parent = this; }\r\n}\r\n\r\n/**\r\n * RootNode\r\n */\r\nexport class RootNode extends FolderNode {\r\n    constructor(name, framework) {\r\n        super(name);\r\n        console.log('CREATE root node ' + name);\r\n        this.framework = framework;\r\n        framework.roots.push(this);\r\n    }\r\n    getFramework() {\r\n        return this.framework;\r\n    }\r\n    getPath() {\r\n        return '';\r\n    }\r\n    setContextMenu() {\r\n        console.log('RootNode setContextMenu');\r\n        let thecontext = this; // This is changed to something codemirror in promise\r\n        return Str.get_strings([\r\n            {key: 'newemptyfile', component: 'qtype_proforma'},\r\n            {key: 'loadfile', component: 'qtype_proforma'},\r\n            {key: 'newfolder', component: 'qtype_proforma'}\r\n        ]).done(function(strings) {\r\n            thecontext.getFramework().createContextMenu([\r\n                [strings[0] + '...', thecontext.boundHandleNewFile], // newemptyfile\r\n                [strings[1] + '...', thecontext.boundHandleLoadFile], // loadfile\r\n//***                [strings[2] + '...', thecontext.boundHandleNewFolder], // newfolder\r\n            ]);\r\n        }) //. fail(notification.exception)\r\n            .fail(function (response) {\r\n                console.error(response);\r\n            });\r\n    }\r\n\r\n}\r\n\r\nclass EditorItem {\r\n    constructor(fileNode, textarea, tabDomNode, readOnly) {\r\n        console.log('Create Codemirror ' + readOnly);\r\n\r\n        this.fileNode = fileNode;\r\n        this.editor = CodeMirror.fromTextArea(textarea, {\r\n            tabMode: \"indent\",\r\n            indentUnit: 4,\r\n            matchBrackets: true,\r\n            autoCloseBrackets: true,\r\n            styleActiveLine: true,\r\n            readOnly: readOnly,\r\n            extraKeys: {'Tab': function(){ this.editor.replaceSelection('    ' , 'end');}},\r\n            lineNumbers: true\r\n            //viewportMargin: Infinity\r\n        });\r\n        this.editor.setSize(\"100%\", \"100%\");\r\n        // RootNode.editor.setOption('theme', \"blackboard\");\r\n        this.editor.setOption('theme', \"darcula\");\r\n        // this.editor.setOption('theme', \"abcdef\");\r\n        this.tab = tabDomNode;\r\n    }\r\n}\r\n\r\nclass EditorStack {\r\n    static maxEditors = 12;\r\n    constructor(donNodeEditor, donNodeTabs, framework) {\r\n        this.editortextarea = donNodeEditor.querySelector('textarea');\r\n        // Initialise readonly editor\r\n        this.editor = CodeMirror.fromTextArea(this.editortextarea, {\r\n            tabMode: \"indent\",\r\n            indentUnit: 4,\r\n            matchBrackets: true,\r\n            autoCloseBrackets: true,\r\n            styleActiveLine: true,\r\n            readOnly: true,\r\n            extraKeys: {'Tab': function(){ this.editor.replaceSelection('    ' , 'end');}},\r\n            lineNumbers: true\r\n            //viewportMargin: Infinity\r\n        });\r\n        this.editor.setSize(\"100%\", \"100%\");\r\n        // RootNode.editor.setOption('theme', \"blackboard\");\r\n        this.editor.setOption('theme', \"darcula\");\r\n        // this.editor.setOption('theme', \"abcdef\");\r\n\r\n        this.activeNode = undefined; // activeNode associated with Codemirror\r\n\r\n        this.nodes = []; // all filenodes with open editor\r\n        // this.donNodeEditor = donNodeEditor;\r\n        this.donNodeTabs = donNodeTabs;\r\n        this.focus = undefined; // the tab that has got the focus\r\n        this.framework = framework;\r\n\r\n    }\r\n\r\n    cleanup() {\r\n        if (this.timer) {\r\n            clearInterval(this.timer);\r\n        }\r\n    }\r\n\r\n    _switchTo(item, index = undefined) {\r\n        this.saveCurrentEditor(true);\r\n\r\n        if (index === undefined) {\r\n            // figure out value of i\r\n            for (index = 0; index < this.nodes.length; index++) {\r\n                if (this.nodes[index] === item) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        console.log('item index is ' + index);\r\n\r\n        // move on top\r\n        this.nodes.splice(index, 1);\r\n        this.nodes.push(item);\r\n\r\n        // Hide all editors\r\n        for (index = 0; index < this.nodes.length; index++) {\r\n            this.nodes[index].editor.getWrapperElement().style.display = 'none';\r\n        }\r\n\r\n        item.editor.getWrapperElement().style.display = 'block';\r\n        item.editor.refresh();\r\n        item.editor.focus();\r\n\r\n        // Switch focus\r\n        if (this.focus !== undefined) {\r\n            this.focus.classList.remove('focus');\r\n            let focusClose = this.focus.querySelector('.close');\r\n            focusClose.style.display = 'none';\r\n        }\r\n        item.tab.classList.add('focus');\r\n        item.tab.querySelector('.close').style.display = 'inline';\r\n        this.focus = item.tab;\r\n    }\r\n\r\n    _delete(item) {\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n            if (this.nodes[i] === item) {\r\n                console.log('** Delete item from editor');\r\n                // Read back (modified) content\r\n                this.nodes[i].fileNode.updateContent(this.nodes[i].editor.getValue());\r\n\r\n                this.nodes.splice(i, 1);\r\n                // Delete Codemirror element (in order to avoid resource leak)\r\n                item.editor.getWrapperElement().remove();\r\n                if (this.nodes.length > 0) {\r\n                    this._switchTo(this.nodes[this.nodes.length-1], this.nodes.length-1);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        console.error('could not find filenode');\r\n    }\r\n\r\n    deleteEditor(filenode) {\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n            if (this.nodes[i].fileNode === filenode) {\r\n                this.nodes[i].tab.remove();\r\n                this.nodes[i].tab = undefined;\r\n                this._delete(this.nodes[i]);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    addEditor(filenode) {\r\n        if (EditorStack.maxEditors === this.nodes.length) {\r\n            alert('maximum number of editors reached');\r\n            return;\r\n        }\r\n        // Create tab\r\n        // let tab = document.createElement('span');\r\n        let tab = document.createElement('button');\r\n\r\n        // Mode is known => display new text content\r\n        let item = new EditorItem(filenode, this.editortextarea, tab, this.framework.readOnly);\r\n        filenode.getContent()\r\n            .then(text => {\r\n                if (text === undefined) {\r\n                    text = '???';\r\n                }\r\n                item.editor.setValue(text);\r\n                if (filenode.mode !== undefined) {\r\n                    item.editor.setOption(\"mode\", filenode.mode);\r\n                } // else {\r\n                    // E.g. makefile has no extension and therefore no known mode.\r\n                    // console.error('unknown file mode');\r\n                // }\r\n                // item.editor.setOption(\"readOnly\", this.readOnly);\r\n                item.editor.refresh(); // for old version of Codemirror\r\n            })\r\n            .catch( error => {\r\n                console.error('error:', error);\r\n                alert(error);\r\n            });\r\n\r\n        tab.classList.add('tab');\r\n        let close = document.createElement('span');\r\n        close.classList.add('close');\r\n        close.innerHTML = '&#x2715';\r\n        close.addEventListener('click', event => {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            this._delete(item);\r\n            close.parentElement.remove();\r\n        });\r\n        tab.innerHTML = filenode.name;\r\n        tab.append(close);\r\n        tab.addEventListener('click', event => {\r\n            event.preventDefault();\r\n            event.stopPropagation();\r\n            this._switchTo(item);\r\n        });\r\n        this.donNodeTabs.append(tab);\r\n\r\n        this.nodes.push(item);\r\n        this._switchTo(item);\r\n\r\n    }\r\n\r\n    // Handle filename update\r\n    update(filenode) {\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n            if (this.nodes[i].fileNode === filenode) {\r\n                // filenode is in list\r\n                // => update filename\r\n                this.nodes[i].tab.innerHTML = filenode.name;\r\n                // update filemode\r\n                if (filenode.mode !== undefined) {\r\n                    this.nodes[i].editor.setOption(\"mode\", filenode.mode);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    switchEditorTo(filenode) {\r\n        // Check if filenode is already in stack\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n            if (this.nodes[i].fileNode === filenode) {\r\n                // filenode is in list\r\n                this._switchTo(this.nodes[i], i);\r\n                return;\r\n            }\r\n        }\r\n        this.addEditor(filenode);\r\n        // Start auto-save timer\r\n        if (this.timer) {\r\n            clearInterval(this.timer);\r\n        }\r\n        let that = this;\r\n        if (autosaveIntervall > 0) {\r\n            this.timer = setInterval(function() {\r\n                console.log('proforma editor autosave');\r\n                that.saveCurrentEditor(true);\r\n            }, autosaveIntervall);\r\n        }\r\n    }\r\n\r\n    saveCurrentEditor(async) {\r\n        let currentNode = this._getCurrentNode();\r\n        if (currentNode) {\r\n            // save content of current editor\r\n            if (currentNode.editor.getValue().trim().length > 0) {\r\n                currentNode.fileNode.updateContent(currentNode.editor.getValue(), async);\r\n            } else {\r\n                // currentNode.fileNode.updateContent(' ', true);\r\n            }\r\n        }\r\n    }\r\n\r\n    _getCurrentNode() {\r\n        if (this.nodes.length > 0) {\r\n            // Call refresh for current Codemirror\r\n            // in order to update text window. Otherwise\r\n            // text is cut off\r\n            return this.nodes[this.nodes.length-1];\r\n        }\r\n        return null;\r\n    }\r\n    handleResize() {\r\n        if (this.nodes.length > 0) {\r\n            // Call refresh for current Codemirror\r\n            // in order to update text window. Otherwise\r\n            // text is cut off\r\n            this.nodes[this.nodes.length-1].editor.refresh();\r\n        }\r\n    }\r\n    save() {\r\n        // Save all\r\n        // (we could save current if file is saved on switching)\r\n        // this.issaved = false;\r\n        console.log('currently open editors ' + this.nodes.length.toString());\r\n        console.timeStamp('save');\r\n        console.time('save');\r\n\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n            this.nodes[i].fileNode.updateContent(this.nodes[i].editor.getValue(), false);\r\n        }\r\n\r\n        /*\r\n        let promises = [];\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n            console.log('add promise to list ' + i.toString());\r\n            promises.push(this.nodes[i].fileNode.updateContent(this.nodes[i].editor.getValue()));\r\n        }\r\n        return Promise.all(promises).\r\n            then(() => {\r\n                console.log('all files saved');\r\n                console.timeStamp('save');\r\n                console.timeEnd('save');\r\n                this.issaved = true;\r\n\r\n            // return true;\r\n                // alert('look');\r\n            })\r\n            .catch( error => {\r\n                console.timeStamp('save');\r\n                console.timeEnd('save');\r\n                console.error('error:', error);\r\n                alert(error);\r\n            });*/\r\n        console.log('all files saved');\r\n        console.timeStamp('save');\r\n        console.timeEnd('save');\r\n    }\r\n/*    needssaving() {\r\n        for (let i = 0; i < this.nodes.length; i++) {\r\n            if (this.nodes[i].fileNode.filecontent != this.nodes[i].editor.getValue()) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    issaved() {\r\n        return this.issaved;\r\n    }*/\r\n}\r\n\r\n\r\nexport class Framework {\r\n    constructor() {\r\n        this.roots = []; // all root nodes\r\n        this.syncer = undefined;\r\n        this.editorstack = undefined;\r\n        this.mainDomNode = undefined;\r\n        this.menu = undefined;\r\n        this.menuVisible = false;\r\n        this.focus = undefined;\r\n        this.readOnly = false;\r\n        this.rootnode = 'Submission';\r\n    }\r\n\r\n    buildFramework(domnode) {\r\n        console.log('buildFramework');\r\n        domnode.innerHTML = `<div class=\"ide\" style=\"display: flex;flex-direction: column; align-items: stretch;\r\n    resize: vertical;\r\n    overflow: hidden;\r\n    min-height: 150px\">\r\n    <!--<div class=\"menu\" style=\"flex: none\">menu</div>-->\r\n\r\n    <div class=\"body\" style=\"display: flex; flex-direction: row; flex: 1 1 0; min-height: 0\">\r\n        <!--<div class=\"fake\" style=\"min-width: 100px; flex: 1 0 0; overflow: auto;\">Fake element</div> -->\r\n        <div class=\"explorer\" style=\"min-width: 20px; flex: 1 0 0; overflow: auto;\">\r\n        </div>\r\n        <div class=\"resize\"></div>\r\n        <div class=\"canvas\" style=\"min-width: 20px;  flex: 0 0 75%; display: flex; flex-direction: row;\">\r\n            <!-- set flex-basis = 50% for 2 two columns and 100%V for one column -->\r\n            <div class=\"canvascol\" style=\"display: flex; flex-direction: column; flex: 1 1 50%; overflow: hidden;\">\r\n                <div class=\"tabs\" style=\"flex: none; \">\r\n                </div>\r\n                <div class=\"editor\" style=\"flex: 1 1 0; overflow: hidden;\">\r\n                    <textarea></textarea>\r\n                </div>\r\n            </div>\r\n            <!--\r\n            <div class=\"resize\"></div>\r\n            <div class=\"canvascol\" style=\"display: flex; flex-direction: column; flex: 1 1 50%; min-height: 0;\">\r\n                <div class=\"tabs\" style=\"flex: none; \">\r\n                </div>\r\n                <div class=\"editor\" style=\"flex: 1 1 0; min-height: 0; overflow: hidden;\">\r\n                    <textarea></textarea>\r\n                </div>\r\n            </div> --> \r\n        </div>\r\n    </div>\r\n\r\n    <!--<div class=\"status\" style=\"flex: none\">status</div>-->\r\n</div>\r\n<p><!--<label>File or Folder Selected: <input id=\"last_action\" type=\"text\" size=\"15\" readonly=\"\"></label>--></p>\r\n`;\r\n        // We only need one context menu that must be placed outside\r\n        // all other elements (esp. those that are positioned relative)\r\n        // in order to have the menu placed correctly.\r\n        let contextmenu = `<div class=\"contextmenu\" id=\"context-menu\">\r\n    <ul class=\"menu-options\">\r\n        <li class=\"menu-option\">New file</li>\r\n        <li class=\"menu-option\">New folder</li>\r\n        <li class=\"menu-option\">Delete...</li>\r\n    </ul>\r\n</div>`;\r\n        const menu = document.createElement('div');\r\n        menu.innerHTML = contextmenu;\r\n        let body = document.querySelector('body');\r\n        body.appendChild(menu);\r\n\r\n        this.mainDomNode = domnode;\r\n        this.editorstack = new EditorStack(domnode.querySelector('.editor'),\r\n            domnode.querySelector('.tabs'), this);\r\n    }\r\n\r\n    init(node, syncer, readOnly, rootnode = 'Files') {\r\n        this.readOnly = readOnly;\r\n        this.rootnode = rootnode;\r\n        const initSplit = resizer =>  {\r\n            // from https://htmldom.dev/create-resizable-split-views/\r\n            const before = resizer.previousElementSibling;\r\n            const after = resizer.nextElementSibling;\r\n\r\n            // The current position of mouse\r\n            let x = 0;\r\n\r\n            let oldValue = 0;\r\n            let mousedown = false;\r\n\r\n            const removeSelection = () => {\r\n                resizer.style.removeProperty('cursor');\r\n                document.body.style.removeProperty('cursor');\r\n\r\n                before.style.removeProperty('user-select');\r\n                before.style.removeProperty('pointer-events');\r\n\r\n                if (after != undefined) {\r\n                    after.style.removeProperty('user-select');\r\n                    after.style.removeProperty('pointer-events');\r\n                }\r\n            };\r\n            // Handle the mousedown event\r\n            // that's triggered when user drags the resizer\r\n            const mouseDownHandler = e => {\r\n                // Get the current mouse position\r\n                x = e.clientX;\r\n\r\n                this.toggleContextmenu(\"hide\");\r\n                oldValue = before.getBoundingClientRect().width;\r\n                mousedown = true;\r\n                // Attach the listeners to `document`\r\n                document.addEventListener('mousemove', mouseMoveHandler);\r\n                document.addEventListener('mouseup', mouseUpHandler);\r\n\r\n                removeSelection();\r\n            };\r\n\r\n            const mouseMoveHandler = e =>  {\r\n                if (mousedown) {\r\n                    // How far the mouse has been moved\r\n                    const dx = e.clientX - x;\r\n                    let newBasis = ((oldValue + dx) * 100) / resizer.parentNode.getBoundingClientRect().width;\r\n                    before.style.flexBasis =`${newBasis}%`;\r\n                    if (after != undefined) {\r\n                        after.style.flexBasis =`${100-newBasis}%`;\r\n                    } else {\r\n                        resizer.parentNode.getBoundingClientRect().width =\r\n                            resizer.parentNode.getBoundingClientRect().width - dx;\r\n                    }\r\n                    removeSelection();\r\n                } else {\r\n                    mouseUpHandler();\r\n                }\r\n            };\r\n\r\n            const mouseUpHandler = function () {\r\n                removeSelection();\r\n\r\n                // Remove the handlers of `mousemove` and `mouseup`\r\n                document.removeEventListener('mousemove', mouseMoveHandler);\r\n                document.removeEventListener('mouseup', mouseUpHandler);\r\n            };\r\n            // Attach the handler\r\n            resizer.addEventListener('mousedown', mouseDownHandler);\r\n        };\r\n\r\n        const fileviewer = node.querySelector('.explorer');\r\n        // Prevent browser from opening a dropped file in a new tab.\r\n        fileviewer.addEventListener('drop', event => {\r\n            event.preventDefault();\r\n        });\r\n        fileviewer.addEventListener('dragover', event => {\r\n            event.preventDefault();\r\n        });\r\n\r\n        let ul = document.createElement(\"ul\");\r\n        ul.setAttribute('role', 'tree');\r\n        ul.setAttribute('aria-labelledby', 'fileviewer');\r\n        fileviewer.appendChild(ul);\r\n\r\n        this.syncer = syncer;\r\n        // build folder/file structure.\r\n        /* this.syncer.dir(); Da fehlen die Dateien */\r\n        this.createPath('/'); // needed when no files come from syncer.\r\n        this.syncer.list(this)\r\n            .then (() => {\r\n                console.log('DISPLAY ROOTS');\r\n                console.log(this.roots);\r\n                for (let i = 0; i < this.roots.length; i++) {\r\n                    let root = this.roots[i];\r\n                    root.displayInTreeview(ul);\r\n                    root.toggleExpand();\r\n                }\r\n            });\r\n\r\n        // Hide context menu on every left click\r\n        window.addEventListener(\"click\", e => {\r\n            this.handleClick();\r\n        });\r\n\r\n        let el = this.mainDomNode.querySelector('.ide');\r\n        const observer = new ResizeObserver(() => {\r\n            this.editorstack.handleResize();\r\n        });\r\n        observer.observe(el);\r\n        initSplit(node.querySelector('.ide .body > .resize'),  'w');\r\n        // initSplit(node.querySelector('.ide .canvas > .resize'), 'w');\r\n\r\n        // Read context menu strings in order to have them in\r\n        // the browser cache and the menu can open immediately\r\n        /*\r\n        Str.get_strings([\r\n            {key: 'delete', component: 'qtype_proforma'},\r\n            {key: 'rename', component: 'qtype_proforma'},\r\n            {key: 'loadfile', component: 'qtype_proforma'},\r\n            {key: 'newemptyfile', component: 'qtype_proforma'},\r\n            {key: 'newfolder', component: 'qtype_proforma'},\r\n        ]).done(function(strings) {\r\n            console.log('context menu string read.');\r\n            console.log(strings);\r\n        }).fail(function (response) {\r\n            console.error(response);\r\n        }); */\r\n\r\n        /*\r\n        RootNode.syncer.sendRequest('mkdir', 'newproformafolder');\r\n        RootNode.syncer.sendRequest('dir'); */\r\n    }\r\n\r\n    switchEditorTo(filenode) {\r\n        this.editorstack.switchEditorTo(filenode);\r\n    }\r\n    addEditor(filenode) {\r\n        this.editorstack.switchEditorTo(filenode);\r\n        // this.editorstack.addEditor(filenode);\r\n    }\r\n    deleteEditor(filenode) {\r\n        this.editorstack.deleteEditor(filenode);\r\n    }\r\n\r\n    findNodeByPath(path) {\r\n        console.log('find <' + path + '>');\r\n        if (path.substr(0,1) != '/') {\r\n            console.error('path does not start with /: ' + path);\r\n            return undefined;\r\n        }\r\n\r\n        let pathsplit = path.split('/');\r\n        pathsplit.shift(); // first element is always empty\r\n        // let first = pathsplit.shift();\r\n        let root = this.roots[0];\r\n        return root.findNodeByPath(pathsplit);\r\n\r\n        /*\r\n        for (let i = 0; i < this.roots.length; i++) {\r\n            if (this.roots[i].name === first) {\r\n                return this.roots[i].findNodeByPath(pathsplit);\r\n            }\r\n        }\r\n        return undefined; */\r\n    }\r\n\r\n    createPath(path) {\r\n        console.log('Framework: create folder ' + path);\r\n        // Assume first char is always /\r\n        if (path[0] !== '/') {\r\n            console.error('first char in path is not /: ' + path);\r\n        }\r\n        let pathsplit = path.split('/');\r\n        pathsplit.shift(); // first element in array is always empty\r\n\r\n        let root;\r\n        let context = this;\r\n        if (this.roots.length === 0) {\r\n            root = new RootNode(context.rootnode, context);\r\n            return root.createPath(pathsplit);\r\n/*\r\n            getString('rootsubmission', 'qtype_proforma')\r\n                .done(function(string) {\r\n                    root = new RootNode(string, context);\r\n                    return root.createPath(pathsplit);\r\n                })\r\n                .fail(function (response) {\r\n                    console.error(response);\r\n                });*/\r\n        } else {\r\n            root = this.roots[0];\r\n            return root.createPath(pathsplit);\r\n        }\r\n    }\r\n\r\n    createContextMenu(list) {\r\n        if (this.readOnly) {\r\n            return;\r\n        }\r\n        console.log('createContextMenu ' + list.length);\r\n        // console.log(list);\r\n        // let ul = this.mainDomNode.querySelector(\".contextmenu .menu-options\");\r\n        let ul = document.querySelector(\".contextmenu .menu-options\");\r\n        // console.log(ul);\r\n        ul.innerHTML = ''; // Delete all children\r\n        for (let i = 0; i < list.length; i++) {\r\n            const li = document.createElement('li');\r\n            li.setAttribute('class', 'menu-option');\r\n            li.innerHTML = list[i][0];\r\n            li.addEventListener('click', list[i][1]);\r\n            console.log(list[i][0]);\r\n            ul.appendChild(li);\r\n        }\r\n\r\n        this.menu = ul.parentNode;\r\n    }\r\n\r\n    toggleContextmenu = command => {\r\n        if (this.menu === undefined) {\r\n            return;\r\n        }\r\n        this.menu.style.display = command === \"show\" ? \"block\" : \"none\";\r\n        this.menuVisible = (command === \"show\");\r\n    };\r\n\r\n    handleClick() {\r\n        this.toggleContextmenu(\"hide\");\r\n        this.setFocusTo(undefined);\r\n    }\r\n    setFocusTo(element) {\r\n        if (this.focus !== undefined) {\r\n            this.focus.classList.remove('focus');\r\n        }\r\n        if (element !== undefined) {\r\n            element.classList.add('focus');\r\n            this.focus = element;\r\n        } else {\r\n            this.focus = undefined;\r\n        }\r\n    }\r\n\r\n/*    needssaving() {\r\n        return this.editorstack.needssaving();\r\n    }\r\n    issaved() {\r\n        return this.editorstack.issaved();\r\n    } */\r\n    save() {\r\n        console.log(this);\r\n        console.log(this.editorstack);\r\n        return this.editorstack.save();\r\n        // alert('hallo');\r\n        // setTimeout(() => { return p1; }, 60000);\r\n    }\r\n}"],"names":["modalPrompt","titleId","labelId","defaultValue","callback","Str","get_strings","key","component","then","strings","ModalFactory","create","type","types","SAVE_CANCEL","title","buttons","save","body","modal","getRoot","on","ModalEvents","result","document","querySelector","value","remove","show","focus","defaultButton","find","addEventListener","event","preventDefault","keyCode","click","TreeNode","constructor","name","element","undefined","parent","boundHandleContextMenu","stopPropagation","setContextMenu","this","getFramework","menu","_ref","top","left","style","toggleContextmenu","showMenu","pageX","pageY","handleDragStart","dataTransfer","getData","length","setData","getPath","Promise","resolve","displayInTreeview","domnode","li","createElement","setAttribute","appendChild","text","alert","prompt","confirm","FileNode","filename","split","pop","toLowerCase","filecontent","mode","getEditorModeFromFilename","handleDelete","handleClick","context","confirmAndDo","deleteEditor","syncer","deleteFileOrFolder","files","filter","item","boundHandleRename","thecontext","isNameChildUnique","alreadyExists","oldpath","innerHTML","newpath","renameFile","editorstack","update","boundHandleClick","setFocusTo","handleDoubleClick","switchEditorTo","getContent","p1","download","updateContent","newcontent","async","console","log","substr","super","classList","add","done","createContextMenu","fail","response","error","FolderNode","folders","boundHandleNewFile","node","appendFile","expand","newfile","addEditor","boundHandleLoadFile","input","onchange","e","file","target","_addFileFromOs","handleDragOver","handleDragEnter","readOnly","handleDragLeave","handleDrop","path","findNodeByPath","appendFolder","renameFolder","items","i","webkitGetAsEntry","_getFileTree","boundHandleNewFolder","foldername","mkdir","toggleExpand","isExpanded","handleMouseOver","currentTarget","handleMouseOut","first","shift","createPath","lenghth","localeCompare","recurseinit","isFile","isDirectory","reader","FileReader","readAsText","onload","readerEvent","content","upload","doit","span2","subul","j","getAttribute","push","RootNode","framework","roots","EditorItem","fileNode","textarea","tabDomNode","editor","CodeMirror","fromTextArea","tabMode","indentUnit","matchBrackets","autoCloseBrackets","styleActiveLine","extraKeys","replaceSelection","lineNumbers","setSize","setOption","tab","EditorStack","donNodeEditor","donNodeTabs","editortextarea","activeNode","nodes","cleanup","timer","clearInterval","_switchTo","index","saveCurrentEditor","splice","getWrapperElement","display","refresh","_delete","getValue","filenode","maxEditors","setValue","catch","close","parentElement","append","that","setInterval","currentNode","_getCurrentNode","trim","handleResize","toString","timeStamp","time","timeEnd","command","menuVisible","mainDomNode","rootnode","buildFramework","init","fileviewer","ul","list","root","window","el","ResizeObserver","observe","resizer","before","previousElementSibling","after","nextElementSibling","x","oldValue","mousedown","removeSelection","removeProperty","mouseMoveHandler","dx","clientX","newBasis","parentNode","getBoundingClientRect","width","flexBasis","mouseUpHandler","removeEventListener","initSplit","pathsplit"],"mappings":"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"}