{"version":3,"file":"explorer.min.js","sources":["../src/explorer.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Display explorer/multitab editor.\n *\n * @package    qtype_proforma\n * @copyright  2022 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     K.Borm <k.borm[at]ostfalia.de>\n */\n\n/* eslint-disable no-unused-vars */\n\nimport { Framework } from \"./FileViewer\";\nimport { MoodleQuestionAttemptSyncer, MoodleSyncer } from \"./MoodleSyncer\";\nimport * as FormChangeChecker from 'core_form/changechecker';\nimport {startWatching, watchForm} from \"core_form/changechecker\";\n\nfunction _start(nodename, options) {\n    console.log('start for ' + nodename);\n    const explorer = document.getElementById(nodename);\n\n    let framework = new Framework();\n    framework.buildFramework(explorer);\n    // let submission = new RootNode('Submission', framework);\n    if (options['readonly']) {\n        console.log('create readonly framework');\n        let syncer = new MoodleQuestionAttemptSyncer(options);\n        framework.init(explorer, syncer, true, options['rootnode']);\n    } else {\n        console.log('create readwrite framework');\n        let syncer = new MoodleSyncer(options);\n        framework.init(explorer, syncer, false, options['rootnode']);\n    }\n\n    // Change submit function: Save before submit!\n    // There is only one form in case of several questions per page\n    // as all of the buttons are secondary buttons.\n    // A common parent has class\n    /* let form = explorer.closest('form');\n    form.onsubmit = (event) => {\n        // alert('form submit');\n        // console.log('save before submit');\n        // framework.save(); // synchronous action!\n    }; */\n\n    console.log('change submit function');\n    let parent = explorer.closest('.que');\n    let submitbutton = parent.querySelector('input[type=\"submit\"]');\n    if (submitbutton !== null) {\n        // In student review there will be no button!\n        submitbutton.onclick = (event) => {\n            console.log('save before submit');\n            // alert('button submit');\n            framework.save(); // synchronous action!\n        };\n    }\n\n    if (!options['readonly']) {\n        // Mark form as dirty as there is no other change detection...\n        // This does not work as disableAllChecks() is called somewhere else\n        // which ignores all checks\n        // There is a quiz-automsave which might intercept the default form change detection\n\n/*        FormChangeChecker.startWatching();\n        FormChangeChecker.watchForm(explorer);\n        FormChangeChecker.markFormAsDirty(explorer);\n        console.log('responseform changechecker...');\n        let responseForm = explorer.closest('form');\n        console.log(responseForm.dataset);\n        console.log(responseForm.dataset.formDirty);\n        console.log(responseForm.dataset.formSubmitted);\n*/\n        console.log('set onbeforeunload');\n        window.onbeforeunload = function(event) {\n            // window.onbeforeunload = function() {\n            // Hook for saving intermediate changes on leaving the page...\n            event.preventDefault();\n            console.log('Save framework');\n            // framework.save(); // synchronous action!\n            framework.editorstack.saveCurrentEditor(false);\n            console.log('Framework saved');\n            // alert('Framework saved');\n            // This function disables everything if confirmed and page is turned.\n            // So this does not make sense this way.\n            // return confirm('Are you sure you want to leave?');\n            event.returnValue = null;\n        };\n    } else {\n        console.log('NO onbeforeunload function');\n    }\n\n\n\n/*\n    Promise.all([\n        import('./FileViewer.js')\n//    import('/amd/src/FileViewer.js') // inside Moodle\n    ])\n        .then(([\n            fileviewer]) => {\n            const explorer = document.getElementById(nodename);\n//    const explorer = document.getElementById('fileexplorer');\n            fileviewer.ProjectNode.buildFramework(explorer);\n            let submission = new fileviewer.ProjectNode('Submission');\n            fileviewer.ProjectNode.init(explorer);\n        });\n\n */\n}\n\nexport const createExplorer = (nodename, options) => {\n    console.log('createExplorer called');\n\n\n    // We must wait for the document to be ready.\n    // Otherwise Codemirror and other controls might not yet be available.\n    // Note that Codemirror is created asynchronously after document ready.\n    // So this is not enough when something has to be done with Codemirror.\n    if( document.readyState !== 'loading' ) {\n        _start(nodename, options);\n    } else {\n        document.addEventListener(\"DOMContentLoaded\", function() {\n            _start(nodename, options);\n        });\n    }\n};\n\n\n"],"names":["_start","nodename","options","console","log","explorer","document","getElementById","framework","Framework","buildFramework","syncer","MoodleQuestionAttemptSyncer","init","MoodleSyncer","submitbutton","closest","querySelector","onclick","event","save","window","onbeforeunload","preventDefault","editorstack","saveCurrentEditor","returnValue","readyState","addEventListener"],"mappings":";;;;;;;;;SAiCSA,OAAOC,SAAUC,SACtBC,QAAQC,IAAI,aAAeH,gBACrBI,SAAWC,SAASC,eAAeN,cAErCO,UAAY,IAAIC,yBACpBD,UAAUE,eAAeL,UAErBH,QAAO,SAAc,CACrBC,QAAQC,IAAI,iCACRO,OAAS,IAAIC,0CAA4BV,SAC7CM,UAAUK,KAAKR,SAAUM,QAAQ,EAAMT,QAAO,cAC3C,CACHC,QAAQC,IAAI,kCACRO,OAAS,IAAIG,2BAAaZ,SAC9BM,UAAUK,KAAKR,SAAUM,QAAQ,EAAOT,QAAO,UAcnDC,QAAQC,IAAI,8BAERW,aADSV,SAASW,QAAQ,QACJC,cAAc,wBACnB,OAAjBF,eAEAA,aAAaG,QAAWC,QACpBhB,QAAQC,IAAI,sBAEZI,UAAUY,SAIblB,QAAO,SA+BRC,QAAQC,IAAI,+BAhBZD,QAAQC,IAAI,sBACZiB,OAAOC,eAAiB,SAASH,OAG7BA,MAAMI,iBACNpB,QAAQC,IAAI,kBAEZI,UAAUgB,YAAYC,mBAAkB,GACxCtB,QAAQC,IAAI,mBAKZe,MAAMO,YAAc,wyBAyBF,CAACzB,SAAUC,WACrCC,QAAQC,IAAI,yBAOgB,YAAxBE,SAASqB,WACT3B,OAAOC,SAAUC,SAEjBI,SAASsB,iBAAiB,oBAAoB,WAC1C5B,OAAOC,SAAUC"}