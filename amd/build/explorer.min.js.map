{"version":3,"file":"explorer.min.js","sources":["../src/explorer.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Display explorer/multitab editor.\n *\n * @package    qtype_proforma\n * @copyright  2022 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     K.Borm <k.borm[at]ostfalia.de>\n */\n\n/* eslint-disable no-unused-vars */\n\nimport { Framework } from \"./FileViewer\";\nimport { MoodleQuestionAttemptSyncer, MoodleSyncer } from \"./MoodleSyncer\";\n\nfunction _start(nodename, options) {\n    console.log('start for ' + nodename);\n\n    const explorer = document.getElementById(nodename);\n\n    let framework = new Framework();\n    framework.buildFramework(explorer);\n    // let submission = new RootNode('Submission', framework);\n    if (options['readonly']) {\n        console.log('create readonly framework');\n        let syncer = new MoodleQuestionAttemptSyncer(options);\n        framework.init(explorer, syncer, true);\n    } else {\n        console.log('create readwrite framework');\n        let syncer = new MoodleSyncer(options);\n        framework.init(explorer, syncer, false);\n    }\n\n    // Change submit function: Save before submit!\n    // VORSICHT: DAS MUSS GETESTET WERDEN MIT 2 oder mehr Frameworks!!\n    console.log('change submit function');\n    let form = explorer.closest('form');\n    console.log(form);\n    let saveSubmit = (event) => {\n        console.log('save before submit');\n        // event.preventDefault();\n        framework.save(); // synchronous action!\n/*\n            .then(() => {\n                console.log('do submit');\n                // alert('jetzt sollte die Bewertung erfolgen. Aber das klappt nicht.');\n                let button = form.querySelector('input[type=\"submit\"]');\n                // see qengine.js!!!!\n                // Da ist eine Sperre gegen mehrfaches submitten :-(\n                button.disabled = false;\n                form.submit();\n            });*/\n    };\n    form.onsubmit = saveSubmit;\n\n    /*\n    let submitbutton = explorer.parentNode.parentNode.parentNode.querySelector('.submit');\n    if (submitbutton === undefined) {\n        alert('cannot find submit button');\n    } else {\n        // Add hook for saving files before submission\n        //\n        // let new_element = old_element.cloneNode(true);\n        // submitbutton.parentNode.replaceChild(new_element, submitbutton);\n        submitbutton.addEventListener('click', event => {\n            // event.preventDefault();\n            // event.stopPropagation();\n            // alert('CLICKED');\n            console.log('CLICKED');\n            framework.save();\n        });\n    }*/\n\n\n/*\n    Promise.all([\n        import('./FileViewer.js')\n//    import('/amd/src/FileViewer.js') // inside Moodle\n    ])\n        .then(([\n            fileviewer]) => {\n            const explorer = document.getElementById(nodename);\n//    const explorer = document.getElementById('fileexplorer');\n            fileviewer.ProjectNode.buildFramework(explorer);\n            let submission = new fileviewer.ProjectNode('Submission');\n            fileviewer.ProjectNode.init(explorer);\n        });\n\n */\n}\n\nexport const createExplorer = (nodename, options) => {\n    console.log('createExplorer called');\n\n\n    // We must wait for the document to be ready.\n    // Otherwise Codemirror and other controls might not yet be available.\n    // Note that Codemirror is created asynchronously after document ready.\n    // So this is not enough when something has to be done with Codemirror.\n    if( document.readyState !== 'loading' ) {\n        _start(nodename, options);\n    } else {\n        document.addEventListener(\"DOMContentLoaded\", function() {\n            _start(nodename, options);\n        });\n    }\n};\n\n\n"],"names":["_start","nodename","options","console","log","explorer","document","getElementById","framework","Framework","buildFramework","syncer","MoodleQuestionAttemptSyncer","init","MoodleSyncer","form","closest","onsubmit","event","save","readyState","addEventListener"],"mappings":";;;;;;;;;SA+BSA,OAAOC,SAAUC,SACtBC,QAAQC,IAAI,aAAeH,cAErBI,SAAWC,SAASC,eAAeN,UAErCO,UAAY,IAAIC,yBACpBD,UAAUE,eAAeL,UAErBH,QAAO,SAAc,CACrBC,QAAQC,IAAI,iCACRO,OAAS,IAAIC,0CAA4BV,SAC7CM,UAAUK,KAAKR,SAAUM,QAAQ,OAC9B,CACHR,QAAQC,IAAI,kCACRO,QAAS,IAAIG,2BAAaZ,SAC9BM,UAAUK,KAAKR,SAAUM,SAAQ,GAKrCR,QAAQC,IAAI,8BACRW,KAAOV,SAASW,QAAQ,QAC5Bb,QAAQC,IAAIW,MAgBZA,KAAKE,SAfY,SAACC,OACdf,QAAQC,IAAI,sBAEZI,UAAUW,uHAkDY,SAAClB,SAAUC,SACrCC,QAAQC,IAAI,yBAOgB,YAAxBE,SAASc,WACTpB,OAAOC,SAAUC,SAEjBI,SAASe,iBAAiB,oBAAoB,WAC1CrB,OAAOC,SAAUC"}