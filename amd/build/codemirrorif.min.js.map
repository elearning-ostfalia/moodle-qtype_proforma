{"version":3,"file":"codemirrorif.min.js","sources":["../src/codemirrorif.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * The ProFormA Question CodeMirror support functions\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2017 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     K.Borm <k.borm[at]ostfalia.de>\n */\n\n\ndefine(['jquery', 'jqueryui', 'qtype_proforma/codemirror',\n        'qtype_proforma/closebrackets', 'qtype_proforma/matchbrackets', 'qtype_proforma/active-line'\n    ],\n    function($, jqui, CodeMirror) {\n\n        // maps the programming language value used in PHP to the CodeMirror mode and\n        // the corresponding javascript file to load\n        map_proglang_to_codemirror_mode = function(moodle_mode) {\n            switch (moodle_mode) {\n                case \"java\":   return [\"text/x-java\", 'qtype_proforma/clike'];\n                case \"python\": return [\"text/x-python\", 'qtype_proforma/python'];\n                case \"setlx\":  return [\"text/text\", null];\n                case \"c\":      return [\"text/x-csrc\", 'qtype_proforma/clike'];\n                case \"cpp\":    return [\"text/x-c++src\", 'qtype_proforma/clike'];\n                // with the actual xml mode the behat tests fail (hang in some scenarios\n                // with an error message in the console output of the browser.\n                // That's why I do not use xml mode anymore :-(\n                case \"xml\":    return [\"\", null]; // return [\"application/xml\", 'qtype_proforma/xml'];\n                case \"none\":   return [\"\", null];\n                default:\n                    console.error(\"unsupported mode \" + moodle_mode + \" for map_proglang_to_codemirror_mode\");\n                    return [\"text/text\", null];\n            }\n        };\n\n\n        return {\n\n            // function is called in edit_proforma_form. It triggers the CodeMirror mode switch\n            // whenever the programming language changes\n            switch_mode: function(select_id, textarea_id) {\n\n                changeMode = function (select_id, textarea_id) {\n                    var progLang = $(\"#\" + select_id).val();\n                    // map programming language to CodeMirror mode\n                    var newMode =  map_proglang_to_codemirror_mode(progLang);\n                    // change mode in CodeMirror\n                    require([newMode[1]], function() {\n                        $(\"#\" + textarea_id).next(\".CodeMirror\").get(0).CodeMirror.setOption(\"mode\", newMode[0]);\n                    });\n                };\n                try {\n                    changeMode(select_id, textarea_id);\n                    $(\"#\" + select_id).on(\"change\", function(e) {\n                        changeMode(select_id, textarea_id);\n                    });\n                } catch(err) {\n                    console.error(\"Exception caught in codemirrorif.js function switch_mode\\n \" + err.toString());\n                    return;\n                }\n            },\n\n            // textarea_id: identifier of textarea element which shall\n            // be converted to CodeMirror\n            // readonly: readonly (1) or not (0)\n            // mode: programming language\n            // header_id: optional. If codemirror is located under a 'header'\n            // (means it is not visible if created) it must be refreshed\n            // when the header is clicked to show the Codemirror window.\n            // Otherwise the CodeMirror is not visible.\n            init_codemirror: function(textarea_id, readonly, mode, header_id, enlarge_width) {\n                //alert(\"init_codemirror called for \" + textarea_id); //  + \" Mimemodes \" + cm.mimeModes);\n                // console.log(\"init_codemirror called for \" + classname );\n                try {\n                    var editor = CodeMirror.fromTextArea(document.getElementById(textarea_id), {\n                        tabMode: \"indent\",\n                        indentUnit: 4,\n                        matchBrackets: true,\n                        autoCloseBrackets: true,\n                        styleActiveLine: true,\n                        readOnly: readonly,\n                        extraKeys: {'Tab': function(){editor.replaceSelection('    ' , 'end');}},\n                        lineNumbers: true\n                        //viewportMargin: Infinity\n                    });\n\n                    // mode is not set when fromTextArea is used (why???)\n                    // So mode is set later\n                    var newMode =  map_proglang_to_codemirror_mode(mode);\n                    require([newMode[1]], function() {\n                        editor.setOption(\"mode\", newMode[0]);\n                    });\n\n\n                    if (enlarge_width) {\n                        editor.setSize(\"100%\", \"100%\");\n                    }\n\n                    editor.refresh();\n                    // refresh codemirror editors  -\n                    // otherwise content is visible only after first click in window\n                    if (header_id) {\n                        $('#' + header_id).click(function (e) {\n                            // refresh codemirror editor  -\n                            // otherwise content is visible only after first click in window\n                            setTimeout(function () {\n                                editor.refresh();\n                            }, 5);\n                        });\n                    }\n\n                    $(editor.getWrapperElement()).resizable({\n                        handles: 's', // only resize in north-south-direction\n                        resize: function () {\n                            editor.refresh();\n                        }\n                    });\n\n/*                    editor.classList.add(\"form-control\");\n                    editor.classList.add(\"custom-select\");\n                    editor.parent.classList.add(\"form-inline\");\n                    editor.parent.classList.add(\"felement\");\n*/\n/*\n                    if (window.ResizeObserver) {\n                        // if the browser supports ResizeObserver than we make the parent window resizable\n\n                        // make Codemirror resizable which is unfortunately not a feature of Codemirror:\n                        // resize code is from https://codepen.io/sakifargo/pen/KodNyR\n                        // see https://github.com/codemirror/CodeMirror/issues/850\n                        // (does not work with Edge since Edge does not support CSS-resize)\n                        var wrapper = editor.getWrapperElement().parentNode; // get DIV parent\n                        wrapper.style.resize = \"vertical\"; // add resize handle to parent\n                        wrapper.style.overflow = \"hidden\"; // do not show scrollbars in parent\n                        // A fixed initial height is required for the resize handle to appear and\n                        // to not fall into a shrinking loop due to the neg. offset in cm_resize()! :-o\n                        // (also needed when editor initially does not contain any text)\n                        wrapper.style.height = \"25em\"; // editor.getWrapperElement().offsetHeight; // \"25em\";\n                        //wrapper.classList.add(\"form-control\");\n                        // editor.getWrapperElement().classList.add(\"form-control\");\n\n                        function resizeObserver() {\n                            function cm_resize() {\n                                // And CM needs room for the resize handle...\n                                editor.setSize(wrapper.clientWidth-10, wrapper.clientHeight-5);\n                                editor.refresh();\n                            }\n\n                            cm_resize(); // adjust size\n                            new ResizeObserver(cm_resize).observe(wrapper);\n                        }\n\n                        if( document.readyState !== 'loading' ) {\n                            resizeObserver();\n                        } else {\n                            document.addEventListener(\"DOMContentLoaded\",resizeObserver());\n                        }\n                    } else { // (MutationObserver does not work properly)\n\n                    if (window.MutationObserver) {\n                        var target = document.getElementById(textarea_id);\n                        var wrapper = editor.getWrapperElement().parentNode; // get DIV parent\n                        wrapper.style.resize = \"vertical\"; // add resize handle to parent\n                        wrapper.style.overflow = \"hidden\"; // do not show scrollbars in parent\n                        // A fixed initial height is required for the resize handle to appear and\n                        // to not fall into a shrinking loop due to the neg. offset in cm_resize()! :-o\n                        // (also needed when editor initially does not contain any text)\n                        wrapper.style.height = \"25em\"; // editor.getWrapperElement().offsetHeight; // \"25em\";\n\n                        function cm_resize(mutations) {\n                            console.log('cm_resize');\n                            //editor.disabled = target.disabled;\n                            //mutations.forEach(function(mutation) {\n                            //    console.log('CM_disable ' + mutation.type);\n                            //});\n                            editor.setSize(wrapper.clientWidth-10, wrapper.clientHeight-1);\n                            editor.refresh();\n                        }\n\n                        // Konfiguration des Observers: alles melden - Änderungen an Daten, Kindelementen und Attributen\n                        var config = { attributes: true, childList: true, characterData: true }; // , subtree:true };\n                        var observer1 = new MutationObserver(cm_resize, config);\n                        var observer2 = new MutationObserver(cm_resize, config);\n                        observer1.observe(target, config);\n                        observer2.observe(wrapper, config);\n                    }\n                    // }\n*/\n                } catch(err) {\n                    console.error(\"Exception caught in codemirrorif.js function init_codemirror\\n \" + err.toString());\n                }\n            }\n        };\n    });\n"],"names":["define","$","jqui","CodeMirror","map_proglang_to_codemirror_mode","moodle_mode","console","error","switch_mode","select_id","textarea_id","changeMode","progLang","val","newMode","require","next","get","setOption","on","e","err","toString","init_codemirror","readonly","mode","header_id","enlarge_width","editor","fromTextArea","document","getElementById","tabMode","indentUnit","matchBrackets","autoCloseBrackets","styleActiveLine","readOnly","extraKeys","replaceSelection","lineNumbers","setSize","refresh","click","setTimeout","getWrapperElement","resizable","handles","resize"],"mappings":";;;;;;;;;AA4BAA,qCAAO,CAAC,SAAU,WAAY,4BACtB,+BAAgC,+BAAgC,+BAEpE,SAASC,EAAGC,KAAMC,mBAIdC,gCAAkC,SAASC,oBAC/BA,iBACC,aAAiB,CAAC,cAAe,4BACjC,eAAiB,CAAC,gBAAiB,6BACnC,cAAiB,CAAC,YAAa,UAC/B,UAAiB,CAAC,cAAe,4BACjC,YAAiB,CAAC,gBAAiB,4BAInC,UACA,aAAiB,CAAC,GAAI,qBAEvBC,QAAQC,MAAM,oBAAsBF,YAAc,wCAC3C,CAAC,YAAa,QAK1B,CAIHG,YAAa,SAASC,UAAWC,aAE7BC,WAAa,SAAUF,UAAWC,iBAC1BE,SAAWX,EAAE,IAAMQ,WAAWI,MAE9BC,QAAWV,gCAAgCQ,UAE/CG,QAAQ,CAACD,QAAQ,KAAK,WAClBb,EAAE,IAAMS,aAAaM,KAAK,eAAeC,IAAI,GAAGd,WAAWe,UAAU,OAAQJ,QAAQ,YAIzFH,WAAWF,UAAWC,aACtBT,EAAE,IAAMQ,WAAWU,GAAG,UAAU,SAASC,GACrCT,WAAWF,UAAWC,gBAE5B,MAAMW,iBACJf,QAAQC,MAAM,8DAAgEc,IAAIC,cAa1FC,gBAAiB,SAASb,YAAac,SAAUC,KAAMC,UAAWC,uBAItDC,OAASzB,WAAW0B,aAAaC,SAASC,eAAerB,aAAc,CACvEsB,QAAS,SACTC,WAAY,EACZC,eAAe,EACfC,mBAAmB,EACnBC,iBAAiB,EACjBC,SAAUb,SACVc,UAAW,KAAQ,WAAWV,OAAOW,iBAAiB,OAAS,SAC/DC,aAAa,IAMb1B,QAAWV,gCAAgCqB,MAC/CV,QAAQ,CAACD,QAAQ,KAAK,WAClBc,OAAOV,UAAU,OAAQJ,QAAQ,OAIjCa,eACAC,OAAOa,QAAQ,OAAQ,QAG3Bb,OAAOc,UAGHhB,WACAzB,EAAE,IAAMyB,WAAWiB,OAAM,SAAUvB,GAG/BwB,YAAW,WACPhB,OAAOc,YACR,MAIXzC,EAAE2B,OAAOiB,qBAAqBC,UAAU,CACpCC,QAAS,IACTC,OAAQ,WACJpB,OAAOc,aA0EjB,MAAMrB,KACJf,QAAQC,MAAM,kEAAoEc,IAAIC"}