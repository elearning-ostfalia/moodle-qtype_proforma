{"version":3,"file":"python.min.js","sources":["../src/python.js"],"sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"qtype_proforma/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"qtype_proforma/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n  \"use strict\";\n\n  function wordRegexp(words) {\n    return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n  }\n\n  var wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\n  var commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\",\n                        \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\",\n                        \"for\", \"from\", \"global\", \"if\", \"import\",\n                        \"lambda\", \"pass\", \"raise\", \"return\",\n                        \"try\", \"while\", \"with\", \"yield\", \"in\"];\n  var commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\",\n                        \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\",\n                        \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\",\n                        \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\",\n                        \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\",\n                        \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\",\n                        \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\",\n                        \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\",\n                        \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\",\n                        \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\",\n                        \"Ellipsis\", \"__debug__\"];\n  CodeMirror.registerHelper(\"hintWords\", \"python\", commonKeywords.concat(commonBuiltins));\n\n  function top(state) {\n    return state.scopes[state.scopes.length - 1];\n  }\n\n  CodeMirror.defineMode(\"python\", function(conf, parserConf) {\n    var ERRORCLASS = \"error\";\n\n    var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/;\n    //               (Backwards-compatiblity with old, cumbersome config system)\n    var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters,\n                     parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/]\n    for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1)\n\n    var hangingIndent = parserConf.hangingIndent || conf.indentUnit;\n\n    var myKeywords = commonKeywords, myBuiltins = commonBuiltins;\n    if (parserConf.extra_keywords != undefined)\n      myKeywords = myKeywords.concat(parserConf.extra_keywords);\n\n    if (parserConf.extra_builtins != undefined)\n      myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n\n    var py3 = !(parserConf.version && Number(parserConf.version) < 3)\n    if (py3) {\n      // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n      var identifiers = parserConf.identifiers|| /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n      myKeywords = myKeywords.concat([\"nonlocal\", \"False\", \"True\", \"None\", \"async\", \"await\"]);\n      myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n      var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(fr))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    } else {\n      var identifiers = parserConf.identifiers|| /^[_A-Za-z][_A-Za-z0-9]*/;\n      myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n      myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\",\n                                      \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\",\n                                      \"unichr\", \"unicode\", \"xrange\", \"False\", \"True\", \"None\"]);\n      var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n    }\n    var keywords = wordRegexp(myKeywords);\n    var builtins = wordRegexp(myBuiltins);\n\n    // tokenizers\n    function tokenBase(stream, state) {\n      var sol = stream.sol() && state.lastToken != \"\\\\\"\n      if (sol) state.indent = stream.indentation()\n      // Handle scope changes\n      if (sol && top(state).type == \"py\") {\n        var scopeOffset = top(state).offset;\n        if (stream.eatSpace()) {\n          var lineOffset = stream.indentation();\n          if (lineOffset > scopeOffset)\n            pushPyScope(state);\n          else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\")\n            state.errorToken = true;\n          return null;\n        } else {\n          var style = tokenBaseInner(stream, state);\n          if (scopeOffset > 0 && dedent(stream, state))\n            style += \" \" + ERRORCLASS;\n          return style;\n        }\n      }\n      return tokenBaseInner(stream, state);\n    }\n\n    function tokenBaseInner(stream, state) {\n      if (stream.eatSpace()) return null;\n\n      // Handle Comments\n      if (stream.match(/^#.*/)) return \"comment\";\n\n      // Handle Number Literals\n      if (stream.match(/^[0-9\\.]/, false)) {\n        var floatLiteral = false;\n        // Floats\n        if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) { floatLiteral = true; }\n        if (stream.match(/^[\\d_]+\\.\\d*/)) { floatLiteral = true; }\n        if (stream.match(/^\\.\\d+/)) { floatLiteral = true; }\n        if (floatLiteral) {\n          // Float literals may be \"imaginary\"\n          stream.eat(/J/i);\n          return \"number\";\n        }\n        // Integers\n        var intLiteral = false;\n        // Hex\n        if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;\n        // Binary\n        if (stream.match(/^0b[01_]+/i)) intLiteral = true;\n        // Octal\n        if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;\n        // Decimal\n        if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n          // Decimal literals may be \"imaginary\"\n          stream.eat(/J/i);\n          // TODO - Can you have imaginary longs?\n          intLiteral = true;\n        }\n        // Zero by itself with no other piece of number.\n        if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n        if (intLiteral) {\n          // Integer literals may be \"long\"\n          stream.eat(/L/i);\n          return \"number\";\n        }\n      }\n\n      // Handle Strings\n      if (stream.match(stringPrefixes)) {\n        var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n        if (!isFmtString) {\n          state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        } else {\n          state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n          return state.tokenize(stream, state);\n        }\n      }\n\n      for (var i = 0; i < operators.length; i++)\n        if (stream.match(operators[i])) return \"operator\"\n\n      if (stream.match(delimiters)) return \"punctuation\";\n\n      if (state.lastToken == \".\" && stream.match(identifiers))\n        return \"property\";\n\n      if (stream.match(keywords) || stream.match(wordOperators))\n        return \"keyword\";\n\n      if (stream.match(builtins))\n        return \"builtin\";\n\n      if (stream.match(/^(self|cls)\\b/))\n        return \"variable-2\";\n\n      if (stream.match(identifiers)) {\n        if (state.lastToken == \"def\" || state.lastToken == \"class\")\n          return \"def\";\n        return \"variable\";\n      }\n\n      // Handle non-detected items\n      stream.next();\n      return ERRORCLASS;\n    }\n\n    function formatStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n        delimiter = delimiter.substr(1);\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenNestedExpr(depth) {\n        return function(stream, state) {\n          var inner = tokenBaseInner(stream, state)\n          if (inner == \"punctuation\") {\n            if (stream.current() == \"{\") {\n              state.tokenize = tokenNestedExpr(depth + 1)\n            } else if (stream.current() == \"}\") {\n              if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1)\n              else state.tokenize = tokenString\n            }\n          }\n          return inner\n        }\n      }\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol())\n              return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else if (stream.match('{{')) {\n            // ignore {{ in f-str\n            return OUTCLASS;\n          } else if (stream.match('{', false)) {\n            // switch to nested mode\n            state.tokenize = tokenNestedExpr(0)\n            if (stream.current()) return OUTCLASS;\n            else return state.tokenize(stream, state)\n          } else if (stream.match('}}')) {\n            return OUTCLASS;\n          } else if (stream.match('}')) {\n            // single } in f-string is an error\n            return ERRORCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n        if (singleline) {\n          if (parserConf.singleLineStringErrors)\n            return ERRORCLASS;\n          else\n            state.tokenize = tokenOuter;\n        }\n        return OUTCLASS;\n      }\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function tokenStringFactory(delimiter, tokenOuter) {\n      while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n        delimiter = delimiter.substr(1);\n\n      var singleline = delimiter.length == 1;\n      var OUTCLASS = \"string\";\n\n      function tokenString(stream, state) {\n        while (!stream.eol()) {\n          stream.eatWhile(/[^'\"\\\\]/);\n          if (stream.eat(\"\\\\\")) {\n            stream.next();\n            if (singleline && stream.eol())\n              return OUTCLASS;\n          } else if (stream.match(delimiter)) {\n            state.tokenize = tokenOuter;\n            return OUTCLASS;\n          } else {\n            stream.eat(/['\"]/);\n          }\n        }\n        if (singleline) {\n          if (parserConf.singleLineStringErrors)\n            return ERRORCLASS;\n          else\n            state.tokenize = tokenOuter;\n        }\n        return OUTCLASS;\n      }\n      tokenString.isString = true;\n      return tokenString;\n    }\n\n    function pushPyScope(state) {\n      while (top(state).type != \"py\") state.scopes.pop()\n      state.scopes.push({offset: top(state).offset + conf.indentUnit,\n                         type: \"py\",\n                         align: null})\n    }\n\n    function pushBracketScope(stream, state, type) {\n      var align = stream.match(/^([\\s\\[\\{\\(]|#.*)*$/, false) ? null : stream.column() + 1\n      state.scopes.push({offset: state.indent + hangingIndent,\n                         type: type,\n                         align: align})\n    }\n\n    function dedent(stream, state) {\n      var indented = stream.indentation();\n      while (state.scopes.length > 1 && top(state).offset > indented) {\n        if (top(state).type != \"py\") return true;\n        state.scopes.pop();\n      }\n      return top(state).offset != indented;\n    }\n\n    function tokenLexer(stream, state) {\n      if (stream.sol()) state.beginningOfLine = true;\n\n      var style = state.tokenize(stream, state);\n      var current = stream.current();\n\n      // Handle decorators\n      if (state.beginningOfLine && current == \"@\")\n        return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n\n      if (/\\S/.test(current)) state.beginningOfLine = false;\n\n      if ((style == \"variable\" || style == \"builtin\")\n          && state.lastToken == \"meta\")\n        style = \"meta\";\n\n      // Handle scope changes.\n      if (current == \"pass\" || current == \"return\")\n        state.dedent += 1;\n\n      if (current == \"lambda\") state.lambda = true;\n      if (current == \":\" && !state.lambda && top(state).type == \"py\")\n        pushPyScope(state);\n\n      if (current.length == 1 && !/string|comment/.test(style)) {\n        var delimiter_index = \"[({\".indexOf(current);\n        if (delimiter_index != -1)\n          pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n\n        delimiter_index = \"])}\".indexOf(current);\n        if (delimiter_index != -1) {\n          if (top(state).type == current) state.indent = state.scopes.pop().offset - hangingIndent\n          else return ERRORCLASS;\n        }\n      }\n      if (state.dedent > 0 && stream.eol() && top(state).type == \"py\") {\n        if (state.scopes.length > 1) state.scopes.pop();\n        state.dedent -= 1;\n      }\n\n      return style;\n    }\n\n    var external = {\n      startState: function(basecolumn) {\n        return {\n          tokenize: tokenBase,\n          scopes: [{offset: basecolumn || 0, type: \"py\", align: null}],\n          indent: basecolumn || 0,\n          lastToken: null,\n          lambda: false,\n          dedent: 0\n        };\n      },\n\n      token: function(stream, state) {\n        var addErr = state.errorToken;\n        if (addErr) state.errorToken = false;\n        var style = tokenLexer(stream, state);\n\n        if (style && style != \"comment\")\n          state.lastToken = (style == \"keyword\" || style == \"punctuation\") ? stream.current() : style;\n        if (style == \"punctuation\") style = null;\n\n        if (stream.eol() && state.lambda)\n          state.lambda = false;\n        return addErr ? style + \" \" + ERRORCLASS : style;\n      },\n\n      indent: function(state, textAfter) {\n        if (state.tokenize != tokenBase)\n          return state.tokenize.isString ? CodeMirror.Pass : 0;\n\n        var scope = top(state), closing = scope.type == textAfter.charAt(0)\n        if (scope.align != null)\n          return scope.align - (closing ? 1 : 0)\n        else\n          return scope.offset - (closing ? hangingIndent : 0)\n      },\n\n      electricInput: /^\\s*[\\}\\]\\)]$/,\n      closeBrackets: {triples: \"'\\\"\"},\n      lineComment: \"#\",\n      fold: \"indent\"\n    };\n    return external;\n  });\n\n  CodeMirror.defineMIME(\"text/x-python\", \"python\");\n\n  var words = function(str) { return str.split(\" \"); };\n\n  CodeMirror.defineMIME(\"text/x-cython\", {\n    name: \"python\",\n    extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \"+\n                          \"extern gil include nogil property public \"+\n                          \"readonly struct union DEF IF ELIF ELSE\")\n  });\n\n});\n"],"names":["mod","CodeMirror","wordRegexp","words","RegExp","join","str","wordOperators","commonKeywords","commonBuiltins","top","state","scopes","length","registerHelper","concat","defineMode","conf","parserConf","ERRORCLASS","delimiters","singleDelimiters","operators","singleOperators","doubleOperators","doubleDelimiters","tripleDelimiters","i","splice","hangingIndent","indentUnit","myKeywords","myBuiltins","undefined","extra_keywords","extra_builtins","py3","version","Number","identifiers","stringPrefixes","keywords","builtins","tokenBase","stream","sol","lastToken","indent","indentation","type","scopeOffset","offset","eatSpace","lineOffset","pushPyScope","dedent","peek","errorToken","style","tokenBaseInner","match","floatLiteral","eat","intLiteral","current","toLowerCase","indexOf","tokenize","delimiter","tokenOuter","charAt","substr","singleline","OUTCLASS","tokenNestedExpr","depth","inner","tokenString","eol","eatWhile","next","singleLineStringErrors","isString","formatStringFactory","tokenStringFactory","pop","push","align","indented","tokenLexer","beginningOfLine","test","lambda","delimiter_index","column","pushBracketScope","slice","startState","basecolumn","token","addErr","textAfter","Pass","scope","closing","electricInput","closeBrackets","triples","lineComment","fold","defineMIME","name","split","exports","module","require","define","amd"],"mappings":"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"}