{"version":3,"file":"logmonitor.min.js","sources":["../src/logmonitor.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * function for displaying server sent events.\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     K.Borm <k.borm[at]ostfalia.de>\n */\n\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\nimport Config from 'core/config';\n\n/**\n * shows a modal dialog with the server sent events\n *\n * @param title string identifier for localised title\n * @param url SSE url\n * @param callbackstart callback for begin feedback (Proforma XML response after grading)\n * @param callbackdata callback for end feedback (Proforma XML response after grading)\n * @param callbackend callback for handling Proforma XML response after grading\n * @returns {Promise<void>}\n */\nexport async function show(title, url, callbackstart, callbackdata, callbackend) {\n\n    let source = null;\n    let modalroot = null;\n    let closeString = 'close';\n    let titleString = title;\n\n    /**\n     * get localized string for cancel/close button\n     * @returns {Promise<void>}\n     */\n    async function init() {\n        closeString = await getString('close', 'editor');\n        titleString = await getString(title, 'qtype_proforma');\n    }\n\n    function fade(element, button) {\n        let op = 1;  // initial opacity\n        let timer = setInterval(function () {\n            if (op <= 0.1){\n                clearInterval(timer);\n                let timer1 = setInterval(function () {\n                    button.click();\n                    clearInterval(timer1);\n                }, 50);\n            } else {\n                element.style.opacity = op;\n                element.style.filter = 'alpha(opacity=' + op * 100 + \")\";\n                op -= op * 0.1;\n            }\n        }, 40);\n    }\n\n    function closeSse() {\n        source.close();\n        let dialog = document.querySelector(\".modal\");\n        if (dialog) {\n            let button = dialog.querySelector(\".btn-secondary\");\n            if (button) {\n                // Change cancel button to close button\n                button.innerHTML = closeString;\n            }\n            if (callbackstart) {\n                // If there is a callback for feedback finished then we fade the dialog.\n                // Das SchlieÃŸen des Dialogs scheint nicht zu funktionieren.\n                // Der Hintergrund bleibt grau.\n                // fade(dialog, button);\n            }\n        }\n    }\n    /**\n     * opens connection and handles events\n     * @returns {Promise<void>}\n     */\n    async function requestEventSource() {\n        // Create Eventsource with callbacks\n        source = new EventSource(url);\n        let feedbackstarted = false;\n        source.onmessage = function(event) {\n            // console.log(event.data);\n            let dialog = document.querySelector(\"#proforma-modal-message\");\n            if (dialog != null) {\n                let message = event.data;\n                if (!feedbackstarted) {\n                    message = message.trim();\n                }\n\n                // handle binary prefix (direct output from Popen)\n                if (message.startsWith('RESPONSE START####')) {\n                    feedbackstarted = true;\n                    callbackstart();\n                    return;\n                }\n                if (message.endsWith('RESPONSE END####')/* && !message.startsWith('####')*/) { // got line ending with special keys\n                    console.log('end of response found => close connection');\n                    callbackend();\n                    closeSse();\n                    return;\n                }\n                if (message.endsWith('####') && !message.startsWith('####')) { // got line ending with special keys\n                    closeSse();\n                    return;\n                }\n                if (feedbackstarted) {\n                    callbackdata(message);\n                    return;\n                }\n                // Default handling: append new message\n                if (message.startsWith(\"b'\") || message.startsWith(\"b\\\"\")) {\n                    message = '<b>' + message.substring(2, message.length - 3) + '</b>';\n                }\n                dialog.innerHTML += message + \"<br>\";\n            }\n        };\n        source.onerror = function(event) {\n            // Complete (with or without error)\n            closeSse();\n        };\n    }\n\n    /**\n     * shows dialog window\n     */\n    function showDialog() {\n        ModalFactory.create({\n            type: ModalFactory.types.CANCEL,\n            title: titleString,\n            body: '<span><code id =\"proforma-modal-message\"></code></span>',\n            large: true\n        }).then(function (modal) {\n            // close eventsource on cancel\n            modalroot = modal.getRoot();\n            modal.getModal().css('min-width', '50%');\n            modalroot.on(ModalEvents.cancel, function () {\n                source.close();\n                source = null;\n                modalroot.remove();\n            });\n            modal.show();\n            requestEventSource();\n        });\n    }\n\n    // Initialise.\n    await init();\n\n    showDialog();\n}\n\n\n/**\n * uploads the currently stored task for the currently 'open' question\n * to the grader\n * (it is not previously recreated so it might not be up-to-date)\n *\n * @param buttonid identifier of button to click on\n */\nexport const uploadToGrader = (buttonid) => {\n    const button = document.getElementById(buttonid);\n    if (button) {\n        button.addEventListener('click', function (e) {\n            // Create Moodle modal dialog.\n            const questionId = document.querySelector(\"input[name='id']\").value;\n            let url = Config.wwwroot + '/question/type/proforma/upload_sse.php';\n            url += '?sesskey=' + Config.sesskey + '&id=' + questionId;\n            show('uploadlog', url);\n        });\n    } else {\n        console.error('could not find button ' + buttonid);\n    }\n}"],"names":["show","title","url","callbackstart","callbackdata","callbackend","source","modalroot","closeString","titleString","closeSse","close","dialog","document","querySelector","button","innerHTML","init","create","type","ModalFactory","types","CANCEL","body","large","then","modal","getRoot","getModal","css","on","ModalEvents","cancel","remove","EventSource","feedbackstarted","onmessage","event","message","data","trim","startsWith","endsWith","console","log","substring","length","onerror","requestEventSource","buttonid","getElementById","addEventListener","e","questionId","value","Config","wwwroot","sesskey","error"],"mappings":";;;;;;;;;oBA2CsBA,KAAKC,MAAOC,IAAKC,cAAeC,aAAcC,iBAE5DC,OAAS,KACTC,UAAY,KACZC,YAAc,QACdC,YAAcR,eA4BTS,WACLJ,OAAOK,YACHC,OAASC,SAASC,cAAc,aAChCF,OAAQ,KACJG,OAASH,OAAOE,cAAc,kBAC9BC,SAEAA,OAAOC,UAAYR,qCA5B3BA,kBAAoB,mBAAU,QAAS,UACvCC,kBAAoB,mBAAUR,MAAO,kBA+GnCgB,0BApBWC,OAAO,CAChBC,KAAMC,uBAAaC,MAAMC,OACzBrB,MAAOQ,YACPc,KAAM,0DACNC,OAAO,IACRC,MAAK,SAAUC,OAEdnB,UAAYmB,MAAMC,UAClBD,MAAME,WAAWC,IAAI,YAAa,OAClCtB,UAAUuB,GAAGC,sBAAYC,QAAQ,WAC7B1B,OAAOK,QACPL,OAAS,KACTC,UAAU0B,YAEdP,MAAM1B,wBA9DVM,OAAS,IAAI4B,YAAYhC,SACrBiC,iBAAkB,EACtB7B,OAAO8B,UAAY,SAASC,WAEpBzB,OAASC,SAASC,cAAc,8BACtB,MAAVF,OAAgB,KACZ0B,QAAUD,MAAME,QACfJ,kBACDG,QAAUA,QAAQE,QAIlBF,QAAQG,WAAW,6BACnBN,iBAAkB,OAClBhC,mBAGAmC,QAAQI,SAAS,2BACjBC,QAAQC,IAAI,6CACZvC,mBACAK,cAGA4B,QAAQI,SAAS,UAAYJ,QAAQG,WAAW,oBAChD/B,cAGAyB,4BACA/B,aAAakC,UAIbA,QAAQG,WAAW,OAASH,QAAQG,WAAW,SAC/CH,QAAU,MAAQA,QAAQO,UAAU,EAAGP,QAAQQ,OAAS,GAAK,QAEjElC,OAAOI,WAAasB,QAAU,SAGtChC,OAAOyC,QAAU,SAASV,OAEtB3B,YAuBAsC,0RAkBmBC,iBACrBlC,OAASF,SAASqC,eAAeD,UACnClC,OACAA,OAAOoC,iBAAiB,SAAS,SAAUC,SAEjCC,WAAaxC,SAASC,cAAc,oBAAoBwC,UAC1DpD,IAAMqD,gBAAOC,QAAU,yCAC3BtD,KAAO,YAAcqD,gBAAOE,QAAU,OAASJ,WAC/CrD,KAAK,YAAaE,QAGtByC,QAAQe,MAAM,yBAA2BT"}