{"version":3,"file":"selectlang.min.js","sources":["../src/selectlang.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Modal dialog for selecting a programming language.\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2020 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     K.Borm <k.borm[at]ostfalia.de>\n */\n\ndefine(['core/modal_factory', 'core/modal_events'], function(ModalFactory, ModalEvents) {\n    function create_body(proglangs) {\n        let body = \"<form>\";\n        body += '<fieldset>';\n        // console.log(proglangs);\n        proglangs.forEach(function(item, index) {\n            // We add a human readable identifier for testing access.\n            let id = item[1].toLowerCase().split(' ')[0];\n            body += '<p><input id=\"item_' + id + '\" type=\"radio\" name=\"lang\" value=\"' + item[0] + '\"';\n            if (index == 0) {\n                // Check first element\n                body +=  'checked';\n            }\n            body += '> ' +  item[1] +'</input></p>';\n        });\n\n        // Add extra item for selecting the task editor:\n        // 1 means persistent proforma file\n        // body += '<p><input id=\"item_proforma\" type=\"radio\" name=\"lang\" value=\"1\"';\n        // body += '> Taskeditor (experimental)</input></p>';\n\n        body += '<br>';\n\n        body += '</fieldset>';\n        body += '</form>';\n        return body;\n    }\n\n    return {\n        select_lang: function(title, proglangs, returnurl) {\n            function doModal() {\n                ModalFactory.create({\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    title: title,\n                    body: create_body(proglangs),\n                    large: false\n                })\n                .then(function(modal) {\n                    modal.setSaveButtonText('Ok');\n                    modal.getRoot().on(ModalEvents.save, function() {\n                        // Check which radio button is checked.\n                        let radioButtons = modal.getRoot().find('input');\n                        for (var i = 0; i < radioButtons.length; i++) {\n                            if(radioButtons[i].checked === true) {\n                                let language = radioButtons[i].value;\n                                // Preset task storage.\n                                // document.getElementById(\"id_taskstorage\").setAttribute('value', language);\n                                // Append language value to URI and\n                                // reload page.\n                                let uri = window.location.href;\n                                uri += '&proglang=' + language;\n                                window.location.assign(uri);\n                                return;\n                            }\n                        }\n                    });\n                    modal.getRoot().on(ModalEvents.cancel, function() {\n                        // Cancel was pressed => redirect to returnurl.\n                        window.location.assign(returnurl);\n                    });\n                    modal.show();\n                }).catch(Notification.exception);\n            }\n            try {\n                doModal();\n            } catch(err) {\n                console.error(\"Exception caught in select-lang.js function select_lang\\n \" + err.toString());\n            }\n        }\n    };\n});\n"],"names":["define","ModalFactory","ModalEvents","create_body","proglangs","body","forEach","item","index","id","toLowerCase","split","select_lang","title","returnurl","create","type","types","SAVE_CANCEL","large","then","modal","setSaveButtonText","getRoot","on","save","radioButtons","find","i","length","checked","language","value","uri","window","location","href","assign","cancel","show","catch","Notification","exception","err","console","error","toString"],"mappings":";;;;;;;;;AA2BAA,mCAAO,CAAC,qBAAsB,sBAAsB,SAASC,aAAcC,sBAC9DC,YAAYC,eACbC,KAAO,gBACXA,MAAQ,aAERD,UAAUE,SAAQ,SAASC,KAAMC,WAEzBC,GAAKF,KAAK,GAAGG,cAAcC,MAAM,KAAK,GAC1CN,MAAQ,sBAAwBI,GAAK,qCAAuCF,KAAK,GAAK,IACzE,GAATC,QAEAH,MAAS,WAEbA,MAAQ,KAAQE,KAAK,GAAI,kBAQ7BF,MAAQ,OAERA,MAAQ,cACRA,MAAQ,UACDA,WAGJ,CACHO,YAAa,SAASC,MAAOT,UAAWU,eAEhCb,aAAac,OAAO,CAChBC,KAAMf,aAAagB,MAAMC,YACzBL,MAAOA,MACPR,KAAMF,YAAYC,WAClBe,OAAO,IAEVC,MAAK,SAASC,OACXA,MAAMC,kBAAkB,MACxBD,MAAME,UAAUC,GAAGtB,YAAYuB,MAAM,eAE7BC,aAAeL,MAAME,UAAUI,KAAK,aACnC,IAAIC,EAAI,EAAGA,EAAIF,aAAaG,OAAQD,QACN,IAA5BF,aAAaE,GAAGE,QAAkB,KAC7BC,SAAWL,aAAaE,GAAGI,MAK3BC,IAAMC,OAAOC,SAASC,YAC1BH,KAAO,aAAeF,cACtBG,OAAOC,SAASE,OAAOJ,SAKnCZ,MAAME,UAAUC,GAAGtB,YAAYoC,QAAQ,WAEnCJ,OAAOC,SAASE,OAAOvB,cAE3BO,MAAMkB,UACPC,MAAMC,aAAaC,WAIxB,MAAMC,KACJC,QAAQC,MAAM,6DAA+DF,IAAIG,cAIhG"}