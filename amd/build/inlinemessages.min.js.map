{"version":3,"file":"inlinemessages.min.js","sources":["../src/inlinemessages.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Display error messages inline in Codemirror editor.\n *\n * @package    qtype_proforma\n * @copyright  2021 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     K.Borm <k.borm[at]ostfalia.de>\n */\n\n// import './codemirror-global';\n// Moodle import:\n// import CodeMirror from \"./codemirror\";\n// import any mode\n\n\n/**\n * removes all widgets\n * @param {*} editor\n */\nfunction _hideWidgets(widgets) {\n    for (let i = 0; i < widgets.length; ++i) {\n        widgets[i].clear();\n    }\n    widgets.length = 0;\n    return widgets;\n}\n\n\nfunction _showMessages(editor, errors, widgets) {\n    widgets = _hideWidgets(widgets);\n    for (let i = 0; i < errors.length; ++i) {\n        let err = errors[i];\n        if (!err) {\n            continue;\n        }\n        var msg = document.createElement(\"div\");\n        var icon;\n        if (err.msgtype !== undefined) {\n            switch (err.msgtype.toLowerCase()) {\n                case 'error':\n                    icon = msg.appendChild(document.createElement(\"span\"));\n                    icon.innerHTML = \"x\";\n                    icon.className = 'proforma-dot-icon proforma-error-icon';\n                    msg.className = \"proforma-inline-error\";\n                    break;\n                case 'warn':\n                case 'warning':\n                    icon = msg.appendChild(document.createElement(\"span\"));\n                    // icon.innerHTML = \"\";\n                    icon.className = \"proforma-warn-icon proforma-warning\";\n                    msg.className = \"proforma-inline-warning\";\n                    break;\n                case 'info':\n                    icon = msg.appendChild(document.createElement(\"span\"));\n                    icon.innerHTML = \"i\";\n                    icon.className = 'proforma-dot-icon proforma-info-icon';\n                    msg.className = \"proforma-inline-info\";\n                    break;\n                default:\n                    icon = msg.appendChild(document.createElement(\"span\"));\n                    icon.innerHTML = \"?\";\n                    icon.className = 'proforma-dot-icon proforma-else-icon';\n                    msg.className = \"proforma-inline-info\";\n                    console.error('do not know message type ' + err.msgtype);\n                    break;\n            }\n        } else {\n            // No message types:\n            icon = msg.appendChild(document.createElement(\"span\"));\n            icon.innerHTML = \"x\";\n            icon.className = 'proforma-dot-icon proforma-error-icon';\n            msg.className = \"proforma-inline-error\";\n        }\n        msg.appendChild(document.createTextNode(' ' + err.text));\n        var widget = editor.addLineWidget(err.line - 1, msg, {coverGutter: true, noHScroll: true});\n        widgets.push(widget);\n    }\n    let info = editor.getScrollInfo();\n    let after = editor.charCoords({line: editor.getCursor().line + 1, ch: 0}, \"local\").top;\n    if (info.top + info.clientHeight < after) {\n        editor.scrollTo(null, after - info.clientHeight + 3);\n    }\n\n    return widgets;\n}\n\n\n// Retrieve a CodeMirror Instance.\nfunction _getCodeMirror(target) {\n    let _target = target;\n    if (typeof _target === 'string') {\n        _target = document.querySelector(_target);\n    }\n    if (_target === null || !_target.tagName === undefined) {\n        throw new Error('Element ' + target + ' does not reference a CodeMirror instance.');\n    }\n\n    if (_target.tagName === 'TEXTAREA') {\n        return _target.nextSibling.CodeMirror;\n    }\n\n    console.error('could not find Codemirror editor for ' + target);\n    return null;\n}\n\n\nfunction _getErrorsFromLog(collapsregion, regexp, editorfilename) {\n    let messages = [];\n    let region = document.getElementById(collapsregion);\n    let testlogs = region.querySelectorAll('.proforma_testlog');\n    let innertext = '';\n    let re = new RegExp(regexp, \"mg\");\n    for (let testlog of testlogs) {\n        let log = undefined;\n        if (testlog.innerText.length === 0) {\n            // HtmlPreElement\n            log = testlog.textContent;\n        } else {\n            log = testlog.innerText;\n        }\n        // only add log texts that contain messages.\n        // This is added because the log could contain just a filename.\n        if (log.match(re)) {\n            innertext = (innertext.length > 0)?(innertext + '\\n' + log):log;\n        }\n    }\n\n    // global match\n    let results = innertext.matchAll(re);\n    // console.log('innertext: ' + innertext);\n    // console.log('regexp: ' + regexp);\n\n    for (let result of results) {\n        let {msgtype, filename, line, text, symbol} = result.groups;\n        // console.log('text: ' + text);\n        // console.log('filename: ' + filename);\n        // console.log('symbol: \\'' + symbol + '\\'');\n        if (filename !== undefined && editorfilename != undefined) {\n            // Filename is in message.\n            if (editorfilename.localeCompare(filename) !== 0) {\n                // Filename does not match name of file in editor.\n                // console.log('filename does not match');\n                continue;\n            }\n        }\n        let error = {\n          line: line,\n          text: text,\n          msgtype: msgtype,\n        };\n        if (symbol !== undefined) {\n            error.text = error.text + ' \\'' + symbol.trim() + '\\'';\n        }\n        messages.push(error);\n    }\n    return messages;\n}\n\n\nfunction _countMessages(messages) {\n    let errors = 0;\n    let warnings = 0;\n    let infos = 0;\n    let somethingelse = 0;\n\n    if (messages) {\n        for (let i = 0; i < messages.length; ++i) {\n            let msg = messages[i];\n            if (!msg) {\n                continue;\n            }\n            if (typeof msg.msgtype !== 'undefined') {\n                switch (msg.msgtype.toLowerCase()) {\n                    case 'error':\n                        errors++;\n                        break;\n                    case 'warn':\n                    case 'warning':\n                        warnings++;\n                        break;\n                    case 'info':\n                        infos++;\n                        break;\n                    default:\n                        console.error('do not know message type ' + msg.msgtype);\n                        somethingelse++;\n                        break;\n                }\n            } else {\n                errors++;\n            }\n        }\n    }\n    return [errors, warnings, infos, somethingelse];\n}\n\n\nconst waitForElementById = id =>\n    new Promise(resolve => {\n        const wait = () => {\n            const element = document.getElementById(id);\n            if (element) {\n                resolve(element);\n            }\n            window.requestAnimationFrame(wait);\n        };\n        wait();\n    });\n\n\nconst waitForElement = (node, selector) =>\n    new Promise(resolve => {\n        const wait = () => {\n            const element = node.querySelector(selector);\n            if (element) {\n                resolve(element);\n            }\n            window.requestAnimationFrame(wait);\n        };\n        wait();\n    });\n\nfunction _embedErrorWithDocumentLoaded(cmid, collapsregion, regexp, filename) {\n    var widgets = [];\n    // Codemirror id must be escaped!\n    cmid = CSS.escape(cmid);\n\n    waitForElementById(collapsregion)\n        .then((region) => {\n            // wait for collapsible region\n            return waitForElement(region, 'a');\n        })\n        .then((a_element) => {\n            // Get Messages\n            let messages = _getErrorsFromLog(collapsregion, regexp, filename);\n            if (messages.length == 0) {\n                // console.log('no messages found => ready');\n                return;\n            }\n\n            // not translated correctly by Babel:\n            // const [errors, warnings, infos, somethingelse] = _countMessages(messages);\n            const values = _countMessages(messages);\n            const errors = values[0];\n            const warnings = values[1];\n            const infos = values[2];\n            const somethingelse = values[3];\n\n            // Create button label\n            const errorLabel = errors + '<span class=\"proforma-dot-icon proforma-error-icon\">x</span> ';\n            const warningLabel = warnings   + '<span class=\"proforma-warn-icon proforma-warning\"/></span> ';\n            const infoLabel = infos + '<span class=\"proforma-dot-icon proforma-info-icon\">i</span> ';\n            const elseLabel = somethingelse + '<span class=\"proforma-dot-icon proforma-else-icon\">?</span> ';\n\n            let label = ' ';\n            if (errors > 0) {\n                label += errorLabel;\n            }\n            if (warnings > 0) {\n                label += warningLabel;\n            }\n            if (infos > 0) {\n                label += infoLabel;\n            }\n            if (somethingelse > 0) {\n                label += elseLabel;\n            }\n\n            // Create button.\n            let button = document.createElement(\"button\");\n            button.type = \"button\";\n            button.className = \"proforma-feedback-msg-btn\";\n            button.innerHTML  = label;\n            a_element.insertAdjacentElement(\"afterend\", button);\n\n            let showMsg = false;\n            button.addEventListener('click',\n                function () {\n                    // The editor is evaluated here and not before in order to avoid\n                    // racing situations.\n                    let editor = _getCodeMirror('#' + cmid);\n                    if (!showMsg) {\n                        widgets = _showMessages(editor, messages, widgets);\n                        button.className =\"proforma-feedback-msg-btn active\";\n                        showMsg = true;\n                    } else {\n                        widgets = _hideWidgets(widgets);\n                        button.className =\"proforma-feedback-msg-btn\";\n                        showMsg = false;\n                    }\n                });\n        })\n        .catch((error) => {\n            console.error(error);\n        });\n}\n\n/**\n * embeds error messages found in log area using regexp\n *\n * @param {type} cmid Codemirror identifier\n * @param {type} collapsregion collapsible region with error messages\n * @param {type} regexp regulare expression for finding messages\n * @param {type} filename filename of file in editor\n * @returns {undefined}\n */\nexport const embedError = (cmid, collapsregion, regexp, filename) => {\n    if (!cmid) {\n        console.error('cmid is invalid');\n        return;\n    }\n\n    // We must wait for the document to be ready.\n    // Otherwise Codemirror and other controls might not yet be available.\n    // Note that Codemirror is created asynchronously after document ready.\n    // So this is not enough when something has to be done with Codemirror.\n    if( document.readyState !== 'loading' ) {\n        _embedErrorWithDocumentLoaded(cmid, collapsregion, regexp, filename);\n    } else {\n        document.addEventListener(\"DOMContentLoaded\", function() {\n            _embedErrorWithDocumentLoaded(cmid, collapsregion, regexp, filename);\n      });\n    }\n};\n\n\n\n"],"names":["_hideWidgets","widgets","i","length","clear","_embedErrorWithDocumentLoaded","cmid","collapsregion","regexp","filename","id","CSS","escape","Promise","resolve","wait","element","document","getElementById","window","requestAnimationFrame","then","region","node","selector","querySelector","a_element","messages","editorfilename","testlogs","querySelectorAll","innertext","re","RegExp","testlog","log","innerText","textContent","match","results","matchAll","result","msgtype","line","text","symbol","groups","undefined","localeCompare","error","trim","push","_getErrorsFromLog","values","errors","warnings","infos","somethingelse","msg","toLowerCase","console","_countMessages","label","button","createElement","type","className","innerHTML","insertAdjacentElement","showMsg","addEventListener","editor","target","_target","tagName","Error","nextSibling","CodeMirror","_getCodeMirror","err","icon","appendChild","createTextNode","widget","addLineWidget","coverGutter","noHScroll","info","getScrollInfo","after","charCoords","getCursor","ch","top","clientHeight","scrollTo","_showMessages","catch","readyState"],"mappings":"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"}