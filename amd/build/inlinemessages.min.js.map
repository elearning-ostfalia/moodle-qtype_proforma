{"version":3,"sources":["../src/inlinemessages.js"],"names":["_hideWidgets","widgets","i","length","clear","_showMessages","editor","errors","err","msg","document","createElement","icon","msgtype","toLowerCase","appendChild","innerHTML","className","console","error","createTextNode","text","widget","addLineWidget","line","coverGutter","noHScroll","push","info","getScrollInfo","after","charCoords","getCursor","ch","top","clientHeight","scrollTo","_getCodeMirror","target","_target","querySelector","tagName","Error","nextSibling","CodeMirror","_getErrorsFromLog","collapsregion","regexp","messages","region","getElementById","testlogs","querySelectorAll","innertext","testlog","innerText","textContent","re","RegExp","results","matchAll","result","groups","filename","_countMessages","warnings","infos","somethingelse","waitForElementById","id","Promise","resolve","wait","element","window","requestAnimationFrame","waitForElement","node","selector","_embedErrorWithDocumentLoaded","cmid","CSS","escape","then","a_element","values","label","button","type","insertAdjacentElement","showMsg","addEventListener","catch","embedError","readyState"],"mappings":"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","sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Display error messages inline in Codemirror editor.\n *\n * @package    qtype_proforma\n * @copyright  2021 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     K.Borm <k.borm[at]ostfalia.de>\n */\n\n// import './codemirror-global';\n// Moodle import:\nimport CodeMirror from \"./codemirror\";\n// import any mode\n\n\n/**\n * removes all widgets\n * @param {*} editor\n */\nfunction _hideWidgets(widgets) {\n    for (let i = 0; i < widgets.length; ++i) {\n        widgets[i].clear();\n    }\n    widgets.length = 0;\n    return widgets;\n}\n\n\nfunction _showMessages(editor, errors, widgets) {\n    widgets = _hideWidgets(widgets);\n    for (let i = 0; i < errors.length; ++i) {\n        let err = errors[i];\n        if (!err) {\n            continue;\n        }\n        var msg = document.createElement(\"div\");\n        var icon;\n        switch (err.msgtype.toLowerCase()) {\n            case 'error':\n                icon = msg.appendChild(document.createElement(\"span\"));\n                icon.innerHTML = \"x\";\n                icon.className = 'proforma-dot-icon proforma-error-icon';\n                msg.className = \"proforma-inline-error\";\n                break;\n            case 'warn':\n            case 'warning':\n                icon = msg.appendChild(document.createElement(\"span\"));\n                // icon.innerHTML = \"\";\n                icon.className = \"proforma-warn-icon proforma-warning\";\n                msg.className = \"proforma-inline-warning\";\n                break;\n            case 'info':\n                icon = msg.appendChild(document.createElement(\"span\"));\n                icon.innerHTML = \"i\";\n                icon.className = 'proforma-dot-icon proforma-info-icon';\n                msg.className = \"proforma-inline-info\";\n                break;\n            default:\n                icon = msg.appendChild(document.createElement(\"span\"));\n                icon.innerHTML = \"?\";\n                icon.className = 'proforma-dot-icon proforma-else-icon';\n                msg.className = \"proforma-inline-info\";\n                console.error('do not know message type ' + err.msgtype);\n                break;\n        }\n        msg.appendChild(document.createTextNode(' ' + err.text));\n        var widget = editor.addLineWidget(err.line - 1, msg, {coverGutter: true, noHScroll: true});\n        widgets.push(widget);\n    }\n    let info = editor.getScrollInfo();\n    let after = editor.charCoords({line: editor.getCursor().line + 1, ch: 0}, \"local\").top;\n    if (info.top + info.clientHeight < after) {\n        editor.scrollTo(null, after - info.clientHeight + 3);\n    }\n\n    return widgets;\n}\n\n\n// Retrieve a CodeMirror Instance.\nfunction _getCodeMirror(target) {\n    let _target = target;\n    if (typeof _target === 'string') {\n        _target = document.querySelector(_target);\n    }\n    if (_target === null || !_target.tagName === undefined) {\n        throw new Error('Element ' + target + ' does not reference a CodeMirror instance.');\n    }\n\n    if (_target.tagName === 'TEXTAREA') {\n        return _target.nextSibling.CodeMirror;\n    }\n\n    console.error('could not find Codemirror editor for ' + target);\n    return null;\n}\n\n\nfunction _getErrorsFromLog(collapsregion, regexp) {\n    let messages = [];\n    let region = document.getElementById(collapsregion);\n    let testlogs = region.querySelectorAll('.proforma_testlog');\n    let innertext = '';\n    for (let testlog of testlogs) {\n        if (testlog.innerText.length == 0) {\n            // HtmlPreElement\n            innertext = innertext + '\\n' + testlog.textContent;\n        } else {\n            innertext = innertext + '\\n' + testlog.innerText;\n        }\n    }\n    // global match\n    let re = new RegExp(regexp, \"mg\");\n    let results = innertext.matchAll(re);\n\n    for (let result of results) {\n        let {msgtype, filename, line, text} = result.groups;\n        let error = {\n          line: line,\n          text: text,\n          msgtype: msgtype,\n        };\n        messages.push(error);\n    }\n    return messages;\n}\n\n\nfunction _countMessages(messages) {\n    let errors = 0;\n    let warnings = 0;\n    let infos = 0;\n    let somethingelse = 0;\n\n    if (messages) {\n        for (let i = 0; i < messages.length; ++i) {\n            let msg = messages[i];\n            if (!msg) {\n                continue;\n            }\n            switch (msg.msgtype.toLowerCase()) {\n                case 'error':\n                    errors++;\n                    break;\n                case 'warn':\n                case 'warning':\n                    warnings++;\n                    break;\n                case 'info':\n                    infos++;\n                    break;\n                default:\n                    console.error('do not know message type ' + msg.msgtype);\n                    somethingelse++;\n                    break;\n            }\n        }\n    }\n    return [errors, warnings, infos, somethingelse];\n}\n\n\nconst waitForElementById = id =>\n    new Promise(resolve => {\n        const wait = () => {\n            const element = document.getElementById(id);\n            if (element) {\n                resolve(element);\n            }\n            window.requestAnimationFrame(wait);\n        };\n        wait();\n    });\n\n\nconst waitForElement = (node, selector) =>\n    new Promise(resolve => {\n        const wait = () => {\n            const element = node.querySelector(selector);\n            if (element) {\n                resolve(element);\n            }\n            window.requestAnimationFrame(wait);\n        };\n        wait();\n    });\n\nfunction _embedErrorWithDocumentLoaded(cmid, collapsregion, regexp) {\n    var widgets = [];\n    // Codemirror id must be escaped!\n    cmid = CSS.escape(cmid);\n\n    waitForElementById(collapsregion)\n        .then((region) => {\n            // wait for collapsible region\n            return waitForElement(region, 'a');\n        })\n        .then((a_element) => {\n            // Get Messages\n            let messages = _getErrorsFromLog(collapsregion, regexp);\n            if (messages.length == 0) {\n                // console.log('no messages found => ready');\n                return;\n            }\n\n            // not translated correctly by Babel:\n            // const [errors, warnings, infos, somethingelse] = _countMessages(messages);\n            const values = _countMessages(messages);\n            const errors = values[0];\n            const warnings = values[1];\n            const infos = values[2];\n            const somethingelse = values[3];\n\n            // Create button label\n            const errorLabel = errors + '<span class=\"proforma-dot-icon proforma-error-icon\">x</span> ';\n            const warningLabel = warnings   + '<span class=\"proforma-warn-icon proforma-warning\"/></span> ';\n            const infoLabel = infos + '<span class=\"proforma-dot-icon proforma-info-icon\">i</span> ';\n            const elseLabel = somethingelse + '<span class=\"proforma-dot-icon proforma-else-icon\">?</span> ';\n\n            let label = ' ';\n            if (errors > 0) {\n                label += errorLabel;\n            }\n            if (warnings > 0) {\n                label += warningLabel;\n            }\n            if (infos > 0) {\n                label += infoLabel;\n            }\n            if (somethingelse > 0) {\n                label += elseLabel;\n            }\n\n            // Create button.\n            let button = document.createElement(\"button\");\n            button.type = \"button\";\n            button.className = \"proforma-feedback-msg-btn\";\n            button.innerHTML  = label;\n            a_element.insertAdjacentElement(\"afterend\", button);\n\n            let showMsg = false;\n            button.addEventListener('click',\n                function () {\n                    // The editor is evaluated here and not before in order to avoid\n                    // racing situations.\n                    let editor = _getCodeMirror('#' + cmid);\n                    if (!showMsg) {\n                        widgets = _showMessages(editor, messages, widgets);\n                        button.className =\"proforma-feedback-msg-btn active\";\n                        showMsg = true;\n                    } else {\n                        widgets = _hideWidgets(widgets);\n                        button.className =\"proforma-feedback-msg-btn\";\n                        showMsg = false;\n                    }\n                });\n        })\n        .catch((error) => {\n            console.error(error);\n        });\n}\n\n/**\n * embeds error messages found in log area using regexp\n *\n * @param {type} cmid Codemirror identifier\n * @param {type} collapsregion collapsible region with error messages\n * @param {type} regexp regulare expression for finding messages\n * @returns {undefined}\n */\nexport const embedError = (cmid, collapsregion, regexp) => {\n    if (!cmid) {\n        console.error('cmid is invalid');\n        return;\n    }\n\n    // We must wait for the document to be ready.\n    // Otherwise Codemirror and other controls might not yet be available.\n    // Note that Codemirror is created asynchronously after document ready.\n    // So this is not enough when something has to be done with Codemirror.\n    if( document.readyState !== 'loading' ) {\n        _embedErrorWithDocumentLoaded(cmid, collapsregion, regexp);\n    } else {\n        document.addEventListener(\"DOMContentLoaded\", function() {\n            _embedErrorWithDocumentLoaded(cmid, collapsregion, regexp);\n      });\n    }\n};\n\n\n\n"],"file":"inlinemessages.min.js"}