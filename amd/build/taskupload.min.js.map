{"version":3,"file":"taskupload.min.js","sources":["../src/taskupload.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * functions for uploading a task.\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     K.Borm <k.borm[at]ostfalia.de>\n */\n\n\n// import {uploadTask} from './repository';\nimport config from 'core/config';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\n\n/**\n * upload task to grader\n *\n * @param {string} buttonid: button id\n * @param {string} task: name of task\n * @returns {undefined}\n */\nexport const upload = (buttonid, task) => {\n\n    // const msgBoxId = 'proforma-notification-bar';\n    var source = null;\n    var modalroot = null;\n    var closeString = 'close';\n\n    /*\n    function showMessageBar(buttonid, message) {\n        const duration = 1500;\n        const txtColor = \"#101010\";\n        let height = \"100px\";\n\n        let box = document.getElementById(msgBoxId);\n        if (box === null) {\n            let node = document.createElement('div');\n            node.style.width = \"100%\";\n            // node.style.height = height;\n            node.style.position = \"fixed\";\n            node.style.zIndex = \"10000\";\n            node.style.background = \"#E0E2E4\";\n            node.style.border = \"1px solid \" + txtColor;\n            node.style.transition = \"all 2s ease-in-out\";\n            node.style.height  = \"0px\"; // => height\n            document.body.prepend(node);\n            console.log('appended');\n\n            let span = document.createElement('span');\n            span.id = msgBoxId;\n            span.innerHTML = message;\n            node.appendChild(span);\n\n            node.style.height = height;\n\n        } else {\n            // Delete output\n            box.innerHTML = message;\n        }\n    }\n     */\n\n    /**\n     * get localized string for cancel/close button\n     * @returns {Promise<void>}\n     */\n    async function init() {\n        closeString = await getString('close', 'editor');\n    }\n\n    /**\n     * upload current question to grader\n     * @returns {Promise<void>}\n     */\n    async function uploadWithSse() {\n        // Get question id from form fields.\n        const questionId = document.querySelector(\"input[name='id']\").value;\n        let url = config.wwwroot + '/question/type/proforma/upload_sse.php';\n        url += '?sesskey=' + config.sesskey + '&id=' + questionId;\n\n        // Create Eventsource with callbacks\n        source = new EventSource(url);\n        source.onmessage = function(event) {\n            console.log(event.data);\n            let dialog = document.querySelector(\"#proforma-modal-message\");\n            if (dialog != null) {\n                let message = event.data.trim();\n                // handle binary prefix (direct output from Popen)\n                if (message.startsWith(\"b'\") || message.startsWith(\"b\\\"\")) {\n                    message = '<b>' + message.substring(2, message.length - 3) + '</b>';\n                }\n                // Append new message\n                dialog.innerHTML += message + \"<br>\";\n            }\n        };\n        source.onerror = function(event) {\n            // Upload is complete (with or without error)\n            source.close();\n            let dialog = document.querySelector(\".modal\");\n            if (dialog) {\n                let button = dialog.querySelector(\".btn-secondary\");\n                if (button) {\n                    // Change cancel button to close button\n                    button.innerHTML = closeString;\n                }\n            }\n        };\n    }\n\n    /*\n    async function performUpload() {\n        let questionId = document.querySelector(\"input[name='id']\").value;\n        console.log('upload task ' + questionId);\n        const promise = await uploadTask(questionId);\n        console.log('upload task finished, handle result 1');\n        window.console.log(promise);\n        console.log('upload task finished, handle result 2');\n        // alert(response.message);\n    }*/\n\n    // Initialise.\n    document.getElementById(buttonid).addEventListener('click', function (e) {\n        init();\n        // Create Moodle modal dialog.\n        ModalFactory.create({\n            type: ModalFactory.types.CANCEL,\n            title: 'Upload Log',\n            body: '<span><code id =\"proforma-modal-message\"></code></span>',\n            large: true\n        }).then(function(modal) {\n            // close eventsource on cancel\n            modalroot = modal.getRoot();\n            modalroot.on(ModalEvents.cancel, function() {\n                source.close();\n                source = null;\n                modalroot.remove();\n            });\n            modal.show();\n            uploadWithSse();\n        });\n    });\n};\n"],"names":["buttonid","task","source","modalroot","closeString","questionId","document","querySelector","value","url","config","wwwroot","sesskey","EventSource","onmessage","event","console","log","data","dialog","message","trim","startsWith","substring","length","innerHTML","onerror","close","button","getElementById","addEventListener","e","init","create","type","ModalFactory","types","CANCEL","title","body","large","then","modal","getRoot","on","ModalEvents","cancel","remove","show","uploadWithSse"],"mappings":"kiCAyCsB,SAACA,SAAUC,UAGzBC,OAAS,KACTC,UAAY,KACZC,YAAc,iFAwClB,gJACwB,mBAAU,QAAS,iBAAvCA,oMAOJ,+IAEUC,WAAaC,SAASC,cAAc,oBAAoBC,MAC1DC,IAAMC,gBAAOC,QAAU,yCAC3BF,KAAO,YAAcC,gBAAOE,QAAU,OAASP,YAG/CH,OAAS,IAAIW,YAAYJ,MAClBK,UAAY,SAASC,OACxBC,QAAQC,IAAIF,MAAMG,UACdC,OAASb,SAASC,cAAc,8BACtB,MAAVY,OAAgB,KACZC,QAAUL,MAAMG,KAAKG,QAErBD,QAAQE,WAAW,OAASF,QAAQE,WAAW,SAC/CF,QAAU,MAAQA,QAAQG,UAAU,EAAGH,QAAQI,OAAS,GAAK,QAGjEL,OAAOM,WAAaL,QAAU,SAGtClB,OAAOwB,QAAU,SAASX,OAEtBb,OAAOyB,YACHR,OAASb,SAASC,cAAc,aAChCY,OAAQ,KACJS,OAAST,OAAOZ,cAAc,kBAC9BqB,SAEAA,OAAOH,UAAYrB,gGAkBnCE,SAASuB,eAAe7B,UAAU8B,iBAAiB,SAAS,SAAUC,2CAClEC,0BAEaC,OAAO,CAChBC,KAAMC,uBAAaC,MAAMC,OACzBC,MAAO,aACPC,KAAM,0DACNC,OAAO,IACRC,MAAK,SAASC,QAEbvC,UAAYuC,MAAMC,WACRC,GAAGC,sBAAYC,QAAQ,WAC7B5C,OAAOyB,QACPzB,OAAS,KACTC,UAAU4C,YAEdL,MAAMM,uDACNC"}