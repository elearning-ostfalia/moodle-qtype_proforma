define("qtype_proforma/MoodleSyncer",["exports","core/config","./FileViewer"],(function(_exports,_config,_FileViewer){var obj;Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.Syncer=_exports.MoodleSyncer=_exports.MoodleQuestionAttemptSyncer=void 0,_config=(obj=_config)&&obj.__esModule?obj:{default:obj};class Syncer{static splitFullname(path){const index=path.lastIndexOf("/",path.length-1);if(index<0)return["/",path];let pathname=path.substring(0,index+1);return pathname.length,[pathname,path.substring(index+1)]}constructor(options){if(new.target===Syncer)throw new TypeError("Cannot construct Syncer instances directly");this.options=options,console.log(this.options)}deleteFileOrFolder(path){return Promise.resolve("fake implentation")}download(path){return Promise.resolve("fake implentation")}renameFile(pathold,pathnew){return Promise.resolve("fake implentation")}renameFolder(pathold,pathnew){return Promise.resolve("fake implentation")}mkdir(path){return Promise.resolve("fake implentation")}list(framework){return Promise.resolve("fake implentation")}update(filename,text){return Promise.resolve("fake implentation")}newfile(filename){return Promise.resolve("fake implentation")}upload(filename,file,overwrite){return Promise.resolve("fake implentation")}}_exports.Syncer=Syncer;_exports.MoodleQuestionAttemptSyncer=class extends Syncer{constructor(options){super(options)}list(framework){let firstFile;return this.options.files.forEach((path=>{let values=Syncer.splitFullname(path),node=new _FileViewer.FileNode(values[1]);framework.createPath(values[0]).appendFile(node),void 0===firstFile&&(firstFile=node,framework.addEditor(node))})),Promise.resolve()}download(path){const addon="/question/response_attachments/"+this.options.usageid+"/"+this.options.slot+"/"+this.options.itemid+path,url=_config.default.wwwroot+"/pluginfile.php/"+this.options.contextid+addon;console.log("Download response file: "+url);return fetch(url,{method:"GET"}).then((response=>{if(200!=response.status)throw console.log(response),new Error(response.statusText);return response})).then((response=>response.text())).catch((error=>{console.error("error:",error),alert(error)}))}};class MoodleSyncer extends Syncer{constructor(options){super(options)}_sendRequest(action){let options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:void 0;const url=_config.default.wwwroot+"/repository/draftfiles_ajax.php";let params={};return params.sesskey=_config.default.sesskey,params.client_id=this.options.client_id,params.itemid=this.options.itemid,void 0!==options&&(params=Object.assign(params,options)),console.log("action "+action),console.log(params),fetch(url+"?action="+action+"&"+window.build_querystring(params),{method:"POST"}).then((response=>response.json())).then((json=>{if(console.log("got response for requested action "+action),json.error)throw console.error(action+" error:",json.error),new Error(json.error);return console.log(json),json})).catch((error=>{console.error("error on "+action+":",error),alert(error)}))}deleteFileOrFolder(path){console.log("delete "+path);let params={},values=MoodleSyncer.splitFullname(path);return params.filepath=values[0],params.filename=values[1],console.log("delete "+params.filepath+" "+params.filename),this._sendRequest("delete",params)}download(path){console.log("DOWNLOAD"),console.log(this.options);const contextid=this.options.contextid,addon="/user/draft/"+this.options.itemid+path,url=_config.default.wwwroot+"/draftfile.php/"+contextid+addon;console.log(url);return fetch(url,{method:"GET"}).then((response=>response.text())).catch((error=>{console.error("error:",error),alert(error)}))}renameFile(pathold,pathnew){console.log("rename "+pathold+" => "+pathnew);let params={},values=MoodleSyncer.splitFullname(pathold),newValue=MoodleSyncer.splitFullname(pathnew);return params.filepath=values[0],params.filename=values[1],params.newfilepath=newValue[0],params.newfilename=newValue[1],this._sendRequest("updatefile",params)}renameFolder(pathold,pathnew){console.log("rename "+pathold+" => "+pathnew);let params={},newValue=MoodleSyncer.splitFullname(pathnew);return params.filepath=pathold+"/",params.newdirname=newValue[1],params.newfilepath=newValue[0].substr(0,newValue[0].length-1),this._sendRequest("updatedir",params)}mkdir(path){console.log("mkdir "+path);const index=path.lastIndexOf("/",path.length-1);let params={};return index<0?(params.filepath="/",params.newdirname=path):(params.filepath=path.substring(0,index+1),params.newdirname=path.substring(index+1)),console.log("path = "+params.filepath),console.log("dir = "+params.newdirname),console.log(params),this._sendRequest("mkdir",params)}list(framework){function stripSlashes(path){return path.length>1&&"/"===path.substring(path.length-1)&&(path=path.substring(0,path.length-1)),path}console.log("Start list");const listfolder=path=>new Promise(((resolve,reject)=>{let params={};params.filepath=path,this._sendRequest("list",params).then((json=>{let firstFile;json.list.forEach((item=>{if("."===item.filename){let path=stripSlashes(item.filepath);console.log("Syncer: create folder "+path),framework.createPath(path),resolve(listfolder(path))}else{console.log("Syncer: create file "+item.filename);let folder=framework.createPath(stripSlashes(item.filepath)),filenode=new _FileViewer.FileNode(item.filename);folder.appendFile(filenode),void 0===firstFile&&(firstFile=filenode,framework.addEditor(filenode))}})),resolve()}))}));return listfolder("/")}update(filename,text){let async=arguments.length>2&&void 0!==arguments[2]&&arguments[2];console.log("update file "+filename);const file=new File([text],filename,{type:"text/plain"});return this.upload(filename,file,!0,async)}newfile(filename){console.log("create new empty file "+filename);let values=Syncer.splitFullname(filename);const file=new File([" "],values[1],{type:"text/plain"});return this.upload(filename,file)}upload(filename,file){let overwrite=arguments.length>2&&void 0!==arguments[2]&&arguments[2],async=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];const url=_config.default.wwwroot+"/repository/repository_ajax.php";console.log("upload "+file.name+" as "+filename);let formData=new FormData;if(formData.append("sesskey",_config.default.sesskey),formData.append("repo_upload_file",file),formData.append("filepath","/"),formData.append("client_id",this.options.client_id),formData.append("title",file.name),formData.append("overwrite",overwrite),formData.append("maxbytes",this.options.maxbytes),formData.append("savepath","/"),formData.append("repo_id",this.options.repo_id),formData.append("itemid",this.options.itemid),async){return fetch(url+"?action=upload",{method:"POST",body:formData}).then((response=>response.json())).then((json=>{if(json.error)throw new Error(json.error);console.log(json);let originalFilename=file.name;return"/"!=originalFilename.substr(0,1)&&(originalFilename="/"+originalFilename),originalFilename!=filename?this.renameFile(originalFilename,filename):json})).catch((error=>{console.error("upload error:",error),alert(error)}))}{console.log("SYNCHRONOUSE UPDATE!");let request=new XMLHttpRequest;request.open("POST",url+"?action=upload",!1),request.send(formData);const jsonResponse=JSON.parse(request.responseText);console.log(jsonResponse),void 0!==jsonResponse.error&&(console.error(request.responseText),alert(jsonResponse.error))}}}_exports.MoodleSyncer=MoodleSyncer}));

//# sourceMappingURL=MoodleSyncer.min.js.map