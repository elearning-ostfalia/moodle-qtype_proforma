{"version":3,"file":"MoodleSyncer.min.js","sources":["../src/MoodleSyncer.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint-disable max-len */\n/* eslint-disable no-unused-vars */\n\n\nimport Config from 'core/config';\nimport { FileNode } from \"./FileViewer\";\n\n/* Syncer base class */\nexport class Syncer {\n    static splitFullname(path) {\n        const index = path.lastIndexOf('/', path.length-1);\n        if (index < 0) {\n            return ['/', path];\n        }\n        let pathname = path.substring(0, index+1);\n        if (pathname.length > 1) {\n            // Strip trailing /\n            // if (path[pathname.length-1] == '/') {\n            //     pathname = path.substring(0, index);\n            // }\n        }\n        return [pathname, path.substring(index + 1)];\n        // return [path.substring(0, index + 1), path.substring(index + 1)];\n    }\n    constructor(options) {\n        if (new.target === Syncer) {\n            throw new TypeError(\"Cannot construct Syncer instances directly\");\n        }\n        this.options = options;\n        console.log(this.options);\n    }\n    deleteFileOrFolder(path) {\n        return Promise.resolve('fake implentation');\n    }\n    download(path) {\n        return Promise.resolve('fake implentation');\n    }\n    renameFile(pathold, pathnew) {\n        return Promise.resolve('fake implentation');\n    }\n    renameFolder(pathold, pathnew) {\n        return Promise.resolve('fake implentation');\n    }\n    mkdir(path) {\n        return Promise.resolve('fake implentation');\n    }\n    list(framework) {\n        return Promise.resolve('fake implentation');\n    }\n    update(filename, text) {\n        return Promise.resolve('fake implentation');\n    }\n    newfile(filename) {\n        return Promise.resolve('fake implentation');\n    }\n    upload(filename, file, overwrite) {\n        return Promise.resolve('fake implentation');\n    }\n}\n\n\nexport class MoodleQuestionAttemptSyncer extends Syncer {\n    constructor(options) {\n        super(options);\n    }\n    list(framework) {\n//        console.log('Start listing question attempt files');\n//        console.log(this.options['files']);\n        let firstFile = undefined;\n        this.options['files'].forEach(path => {\n            let values = Syncer.splitFullname(path);\n            let node = new FileNode(values[1]);\n            let folder = framework.createPath(values[0]);\n            folder.appendFile(node);\n            if (firstFile === undefined) {\n                firstFile = node;\n                // framework.addEditor(node);\n                framework.editorstack.switchEditorTo(node);\n            }\n        });\n        // Dummy\n        return Promise.resolve();\n    }\n    download(path) {\n        const addon = '/question/response_attachments/' +\n            this.options.usageid + '/' +\n            this.options.slot + '/' +\n            this.options.itemid + path;\n        const url = Config.wwwroot + '/pluginfile.php/' + this.options.contextid + addon;\n        console.log('Download response file: ' + url);\n        const promise = fetch(url, { method: 'GET' })\n            .then( response => {\n                if (response.status != 200) {\n                    console.log(response);\n                    throw new Error(response.statusText);\n                }\n                return response;\n            })\n            .then( response => response.text() )\n            .catch( error => {\n                console.error('error:', error);\n                alert(error);\n            });\n        return promise;\n    }\n}\n\n/* Class for synchronizing explorer with draft area */\nexport class MoodleSyncer extends Syncer {\n    constructor(options) {\n        super(options);\n        // this.options = options;\n        // console.log(this.options);\n    }\n    _sendRequest(action, options = undefined) {\n        const url = Config.wwwroot + '/repository/draftfiles_ajax.php';\n        let params = {};\n        params['sesskey'] = Config.sesskey;\n        params['client_id'] = this.options['client_id'];\n        params['itemid'] = this.options['itemid'];\n        if (options !== undefined) {\n            params = Object.assign(params, options);\n        }\n        console.log('action ' + action);\n        console.log(params);\n        // const promise =\n        return fetch(\n            url + '?action=' + action + '&' + window.build_querystring(params),\n            {\n                method: 'POST',\n            }\n        )\n            // .then( response => console.log(response))\n            .then( response => response.json() )\n            .then( json => {\n                console.log('got response for requested action ' + action);\n                if (json.error) {\n                    console.error(action + ' error:', json.error);\n                    throw new Error(json.error);\n//                    alert(json.error);\n                }\n                console.log(json);\n                // const text = JSON.stringify(json);\n                // console.log(text);\n                // if (callback != undefined) {\n                //    callback(json);\n                // }\n                return json;\n            })\n            .catch( error => {\n                console.error('error on ' + action + ':', error);\n                alert(error);\n            } );\n\n        // return promise;\n    }\n\n    deleteFileOrFolder(path) {\n        console.log('delete ' + path);\n        let params = {};\n        let values = MoodleSyncer.splitFullname(path);\n        params['filepath'] = values[0];\n        params['filename'] = values[1];\n        console.log('delete ' + params['filepath'] + ' ' + params['filename']);\n        return this._sendRequest('delete', params);\n    }\n    download(path) {\n        console.log('DOWNLOAD');\n        console.log(this.options);\n        const contextid = this.options.contextid;\n        const addon = '/user/draft/' + this.options.itemid + path;\n        const url = Config.wwwroot + '/draftfile.php/' + contextid + addon;\n        console.log(url);\n\n        const promise = fetch(url, { method: 'GET' })\n                .then( response => response.text())\n                .catch( error => {\n                    console.error('error:', error);\n                    alert(error);\n                });\n        return promise;\n\n      // download many files as zip archive\n        /*\n        let params = {};\n        let values = MoodleSyncer.splitFullname(path);\n        let selected = new Object();\n        selected.filepath = values[0];\n        selected.filename = values[1];\n        let selectedarray = [];\n        selectedarray.push(selected);\n        params['selected'] = JSON.stringify(selectedarray);\n        this._sendRequest('downloadselected', jsonResult => {\n            console.log(jsonResult);\n            callback(jsonResult);\n        }, params); */\n    }\n    renameFile(pathold, pathnew) {\n        console.log('rename ' + pathold + ' => ' + pathnew);\n        let params = {};\n        let values = MoodleSyncer.splitFullname(pathold);\n        let newValue = MoodleSyncer.splitFullname(pathnew);\n        params['filepath'] = values[0];\n        params['filename'] = values[1];\n        params['newfilepath'] = newValue[0];\n        params['newfilename'] = newValue[1];\n        return this._sendRequest('updatefile', params);\n    }\n    renameFolder(pathold, pathnew) {\n        console.log('rename ' + pathold + ' => ' + pathnew);\n        let params = {};\n        // let values = MoodleSyncer.splitFullname(pathold);\n        let newValue = MoodleSyncer.splitFullname(pathnew);\n        params['filepath'] = pathold + '/'; // values[0];\n        params['newdirname'] = newValue[1];\n        params['newfilepath'] = newValue[0].substr(0, newValue[0].length-1); // strip trailing /\n        return this._sendRequest('updatedir', params);\n    }\n    mkdir(path) {\n        console.log('mkdir ' + path);\n        const index = path.lastIndexOf('/', path.length-1);\n        let params = {};\n        if (index < 0) {\n            params['filepath'] = '/';\n            params['newdirname'] = path;\n        } else {\n            params['filepath'] = path.substring(0, index + 1);\n            /* if (params['filepath'].substring(0, 1) != '/') {\n                params['filepath'] = '/' + params['filepath'];\n            } */\n            params['newdirname'] = path.substring(index + 1);\n        }\n        console.log('path = ' + params['filepath']);\n        console.log('dir = ' + params['newdirname']);\n        console.log(params);\n        return this._sendRequest('mkdir', params);\n    }\n/*    dir() {\n        let params = {};\n        params['filepath'] = '/';\n        this._sendRequest('dir', jsonResult => {\n            console.log('dir fertig');\n            console.log(jsonResult);\n        }, params);\n    } */\n    list(framework) {\n        console.log('Start list');\n        function stripSlashes(path) {\n            if (path.length > 1 && path.substring(path.length-1) === '/') { // Strip '/'\n                path = path.substring(0, path.length-1);\n            }\n            return path;\n        }\n        const listfolder = (path) => new Promise((resolve, reject) => {\n            let params = {};\n            params['filepath'] = path;\n            this._sendRequest('list', params)\n                .then (json => {\n                    let firstFile = undefined;\n                    json.list.forEach(item => {\n                        // console.log('syncer List Response');\n                        if (item.filename === '.') {\n                            // Create Folder.\n                            let path = stripSlashes(item.filepath);\n                            console.log('Syncer: create folder ' + path);\n                            framework.createPath(path);\n                            // console.log('** RECURSION FOR ' + path + ' => request');\n                            resolve(listfolder(path));\n                        } else {\n                            console.log('Syncer: create file ' + item.filename);\n                            let folder = framework.createPath(stripSlashes(item.filepath));\n                            let filenode = new FileNode(item.filename);\n                            folder.appendFile(filenode);\n                            if (firstFile === undefined) {\n                                firstFile = filenode;\n                                // Open first file in editor.\n                                framework.editorstack.switchEditorTo(filenode);\n                                // framework.addEditor(filenode);\n                            }\n                        }\n                    });\n                    resolve();\n                });\n        });\n        return listfolder('/');\n    }\n    update(filename, text, async = false) {\n        console.log('update file ' + filename);\n        // const tmp_filename = \"/file\" + Math.random().toString(16).slice(2) + '.txt';\n        // console.log('create tmp file ' + tmp_filename);\n        const file = new File([text], filename, {\n            type: \"text/plain\"\n        });\n        return this.upload(filename, file, true, async);\n    }\n    newfile(filename) {\n        console.log('create new empty file ' + filename);\n        let values = Syncer.splitFullname(filename);\n        const file = new File([' '], values[1], {\n            type: \"text/plain\"\n        });\n        return this.upload(filename, file);\n    }\n    upload(filename, file, overwrite = false, async = true) {\n        const url = Config.wwwroot + '/repository/repository_ajax.php';\n        const action = 'upload';\n        console.log('upload ' + file.name + ' as ' + filename);\n        // alert('upload/overrite: ' + filename);\n\n        // let values = MoodleSyncer.splitFullname(filename);\n        // console.log(values[0]);\n\n        let formData = new FormData();\n        formData.append('sesskey', Config.sesskey);\n        formData.append('repo_upload_file', file);\n        formData.append('filepath', '/');\n        formData.append('client_id', this.options['client_id']);\n        formData.append('title', file.name);\n        formData.append('overwrite', overwrite);\n        formData.append('maxbytes', this.options['maxbytes']);\n        // since we are uploading the file to the 'draft area',\n        // there is no point in limiting the size of the file area.\n        // The draft area is used for all users.\n        // formData.append('areamaxbytes', this.options['areamaxbytes']);\n        formData.append('savepath', '/');\n        formData.append('repo_id', this.options['repo_id']);\n        formData.append('itemid', this.options['itemid']);\n        // console.log(formData);\n        if (async) {\n            const promise = fetch(\n                url + '?action=' + action, //  + '&' + window.build_querystring(params),\n                {\n                    method: 'POST',\n                    body: formData // file\n                }\n            )\n                .then( response => response.json() )\n                .then( json => {\n                    // console.log(action);\n                    if (json.error) {\n                        throw new Error(json.error);\n                    }\n                    console.log(json);\n                    let originalFilename = file.name;\n                    if (originalFilename.substr(0,1) != '/') {\n                        originalFilename = '/' + originalFilename;\n                    }\n                    if (originalFilename != filename) {\n                        return this.renameFile(originalFilename, filename);\n                    }\n                    return json;\n                })\n                .catch( error => {\n                    console.error('upload error:', error);\n                    alert(error);\n                });\n            return promise;\n        } else {\n            // synchronous\n            // In Chrome this is declared as dismissal.\n            console.log('SYNCHRONOUSE UPDATE!');\n            let request = new XMLHttpRequest();\n            request.open('POST', url + '?action=' + action, false);\n            try {\n                request.send(formData);\n            } catch(e1) {\n                // Chrome does not support sync. posts.\n                // So we try asynchronous post\n                console.error(e1);\n                console.log('sync post failed => try async');\n                try {\n                    request.open('POST', url + '?action=' + action, true);\n                    request.send(formData);\n                } catch(e2) {\n                    console.error(e2);\n                    return;\n                }\n            }\n            console.log('sync/async post succeeded');\n            const jsonResponse = JSON.parse(request.responseText);\n            console.log(jsonResponse);\n            if (jsonResponse.error !== undefined) {\n                console.error(request.responseText);\n                alert(jsonResponse.error);\n            }\n        }\n    }\n}\n\n"],"names":["Syncer","path","index","lastIndexOf","length","pathname","substring","constructor","options","TypeError","console","log","this","deleteFileOrFolder","Promise","resolve","download","renameFile","pathold","pathnew","renameFolder","mkdir","list","framework","update","filename","text","newfile","upload","file","overwrite","firstFile","forEach","values","splitFullname","node","FileNode","createPath","appendFile","undefined","editorstack","switchEditorTo","addon","usageid","slot","itemid","url","Config","wwwroot","contextid","fetch","method","then","response","status","Error","statusText","catch","error","alert","MoodleSyncer","_sendRequest","action","params","sesskey","Object","assign","window","build_querystring","json","newValue","substr","stripSlashes","listfolder","reject","item","filepath","folder","filenode","async","File","type","name","formData","FormData","append","body","originalFilename","request","XMLHttpRequest","open","send","e1","e2","jsonResponse","JSON","parse","responseText"],"mappings":"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"}