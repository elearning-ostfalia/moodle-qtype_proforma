{"version":3,"file":"MoodleSyncer.min.js","sources":["../src/MoodleSyncer.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/* eslint-disable max-len */\n/* eslint-disable no-unused-vars */\n\n\nimport Config from 'core/config';\nimport { FileNode } from \"./FileViewer\";\n\n/* Syncer base class */\nexport class Syncer {\n    static splitFullname(path) {\n        const index = path.lastIndexOf('/', path.length-1);\n        if (index < 0) {\n            return ['/', path];\n        }\n        let pathname = path.substring(0, index+1);\n        if (pathname.length > 1) {\n            // Strip trailing /\n            // if (path[pathname.length-1] == '/') {\n            //     pathname = path.substring(0, index);\n            // }\n        }\n        return [pathname, path.substring(index + 1)];\n        // return [path.substring(0, index + 1), path.substring(index + 1)];\n    }\n    constructor(options) {\n        if (new.target === Syncer) {\n            throw new TypeError(\"Cannot construct Syncer instances directly\");\n        }\n        this.options = options;\n        console.log(this.options);\n    }\n    deleteFileOrFolder(path) {\n        return Promise.resolve('fake implentation');\n    }\n    download(path) {\n        return Promise.resolve('fake implentation');\n    }\n    renameFile(pathold, pathnew) {\n        return Promise.resolve('fake implentation');\n    }\n    renameFolder(pathold, pathnew) {\n        return Promise.resolve('fake implentation');\n    }\n    mkdir(path) {\n        return Promise.resolve('fake implentation');\n    }\n    list(framework) {\n        return Promise.resolve('fake implentation');\n    }\n    update(filename, text) {\n        return Promise.resolve('fake implentation');\n    }\n    newfile(filename) {\n        return Promise.resolve('fake implentation');\n    }\n    upload(filename, file, overwrite) {\n        return Promise.resolve('fake implentation');\n    }\n}\n\n\nexport class MoodleQuestionAttemptSyncer extends Syncer {\n    constructor(options) {\n        super(options);\n    }\n    list(framework) {\n//        console.log('Start listing question attempt files');\n//        console.log(this.options['files']);\n        this.options['files'].forEach(path => {\n            let values = Syncer.splitFullname(path);\n            let folder = framework.createPath(values[0]);\n            folder.appendFile(new FileNode(values[1]));\n        });\n        // Dummy\n        return Promise.resolve();\n    }\n    download(path) {\n        const addon = '/question/response_attachments/' +\n            this.options.usageid + '/' +\n            this.options.slot + '/' +\n            this.options.itemid + path;\n        const url = Config.wwwroot + '/pluginfile.php/' + this.options.contextid + addon;\n//        console.log(url);\n        const promise = fetch(url, { method: 'GET' })\n            .then( response => response.text() )\n            .catch( error => {\n                console.error('error:', error);\n                alert(error);\n            });\n        return promise;\n    }\n}\n\n/* Class for synchronizing explorer with draft area */\nexport class MoodleSyncer extends Syncer {\n    constructor(options) {\n        super(options);\n        // this.options = options;\n        // console.log(this.options);\n    }\n    _sendRequest(action, options = undefined) {\n        const url = Config.wwwroot + '/repository/draftfiles_ajax.php';\n        let params = {};\n        params['sesskey'] = Config.sesskey;\n        params['client_id'] = this.options['client_id'];\n        params['itemid'] = this.options['itemid'];\n        if (options !== undefined) {\n            params = Object.assign(params, options);\n        }\n        console.log('action ' + action);\n        console.log(params);\n        // const promise =\n        return fetch(\n            url + '?action=' + action + '&' + window.build_querystring(params),\n            {\n                method: 'POST',\n            }\n        )\n            // .then( response => console.log(response))\n            .then( response => response.json() )\n            .then( json => {\n                console.log('got response for requested action ' + action);\n                if (json.error) {\n                    console.error(action + ' error:', json.error);\n                    throw new Error(json.error);\n//                    alert(json.error);\n                }\n                console.log(json);\n                // const text = JSON.stringify(json);\n                // console.log(text);\n                // if (callback != undefined) {\n                //    callback(json);\n                // }\n                return json;\n            })\n            .catch( error => {\n                console.error('error on ' + action + ':', error);\n                alert(error);\n            } );\n\n        // return promise;\n    }\n\n    deleteFileOrFolder(path) {\n        console.log('delete ' + path);\n        let params = {};\n        let values = MoodleSyncer.splitFullname(path);\n        params['filepath'] = values[0];\n        params['filename'] = values[1];\n        console.log('delete ' + params['filepath'] + ' ' + params['filename']);\n        return this._sendRequest('delete', params);\n    }\n    download(path) {\n        console.log('DOWNLOAD');\n        console.log(this.options);\n        const contextid = this.options.contextid;\n        const addon = '/user/draft/' + this.options.itemid + path;\n        const url = Config.wwwroot + '/draftfile.php/' + contextid + addon;\n        console.log(url);\n\n        const promise = fetch(url, { method: 'GET' })\n                .then( response => response.text())\n                .catch( error => {\n                    console.error('error:', error);\n                    alert(error);\n                });\n        return promise;\n\n      // download many files as zip archive\n        /*\n        let params = {};\n        let values = MoodleSyncer.splitFullname(path);\n        let selected = new Object();\n        selected.filepath = values[0];\n        selected.filename = values[1];\n        let selectedarray = [];\n        selectedarray.push(selected);\n        params['selected'] = JSON.stringify(selectedarray);\n        this._sendRequest('downloadselected', jsonResult => {\n            console.log(jsonResult);\n            callback(jsonResult);\n        }, params); */\n    }\n    renameFile(pathold, pathnew) {\n        console.log('rename ' + pathold + ' => ' + pathnew);\n        let params = {};\n        let values = MoodleSyncer.splitFullname(pathold);\n        let newValue = MoodleSyncer.splitFullname(pathnew);\n        params['filepath'] = values[0];\n        params['filename'] = values[1];\n        params['newfilepath'] = newValue[0];\n        params['newfilename'] = newValue[1];\n        return this._sendRequest('updatefile', params);\n    }\n    renameFolder(pathold, pathnew) {\n        console.log('rename ' + pathold + ' => ' + pathnew);\n        let params = {};\n        // let values = MoodleSyncer.splitFullname(pathold);\n        let newValue = MoodleSyncer.splitFullname(pathnew);\n        params['filepath'] = pathold + '/'; // values[0];\n        params['newdirname'] = newValue[1];\n        params['newfilepath'] = newValue[0].substr(0, newValue[0].length-1); // strip trailing /\n        return this._sendRequest('updatedir', params);\n    }\n    mkdir(path) {\n        console.log('mkdir ' + path);\n        const index = path.lastIndexOf('/', path.length-1);\n        let params = {};\n        if (index < 0) {\n            params['filepath'] = '/';\n            params['newdirname'] = path;\n        } else {\n            params['filepath'] = path.substring(0, index + 1);\n            /* if (params['filepath'].substring(0, 1) != '/') {\n                params['filepath'] = '/' + params['filepath'];\n            } */\n            params['newdirname'] = path.substring(index + 1);\n        }\n        console.log('path = ' + params['filepath']);\n        console.log('dir = ' + params['newdirname']);\n        console.log(params);\n        return this._sendRequest('mkdir', params);\n    }\n/*    dir() {\n        let params = {};\n        params['filepath'] = '/';\n        this._sendRequest('dir', jsonResult => {\n            console.log('dir fertig');\n            console.log(jsonResult);\n        }, params);\n    } */\n    list(framework) {\n        console.log('Start list');\n        function stripSlashes(path) {\n            if (path.length > 1 && path.substring(path.length-1) === '/') { // Strip '/'\n                path = path.substring(0, path.length-1);\n            }\n            return path;\n        }\n        const listfolder = (path) => new Promise((resolve, reject) => {\n            let params = {};\n            params['filepath'] = path;\n            this._sendRequest('list', params)\n                .then (json => {\n                    let firstFile = undefined;\n                    json.list.forEach(item => {\n                        // console.log('syncer List Response');\n                        if (item.filename === '.') {\n                            // Create Folder.\n                            let path = stripSlashes(item.filepath);\n                            console.log('Syncer: create folder ' + path);\n                            framework.createPath(path);\n                            // console.log('** RECURSION FOR ' + path + ' => request');\n                            resolve(listfolder(path));\n                        } else {\n                            console.log('Syncer: create file ' + item.filename);\n                            let folder = framework.createPath(stripSlashes(item.filepath));\n                            let filenode = new FileNode(item.filename);\n                            folder.appendFile(filenode);\n                            if (firstFile === undefined) {\n                                firstFile = filenode;\n                                // Open first file in editor.\n                                framework.addEditor(filenode);\n                            }\n                        }\n                    });\n                    resolve();\n                });\n        });\n        return listfolder('/');\n    }\n    update(filename, text, async = false) {\n        console.log('update file ' + filename);\n        // const tmp_filename = \"/file\" + Math.random().toString(16).slice(2) + '.txt';\n        // console.log('create tmp file ' + tmp_filename);\n        const file = new File([text], filename, {\n            type: \"text/plain\"\n        });\n        return this.upload(filename, file, true, async);\n    }\n    newfile(filename) {\n        console.log('create new empty file ' + filename);\n        let values = Syncer.splitFullname(filename);\n        const file = new File([' '], values[1], {\n            type: \"text/plain\"\n        });\n        return this.upload(filename, file);\n    }\n    upload(filename, file, overwrite = false, async = true) {\n        const url = Config.wwwroot + '/repository/repository_ajax.php';\n        const action = 'upload';\n        console.log('upload ' + file.name + ' as ' + filename);\n\n        // let values = MoodleSyncer.splitFullname(filename);\n        // console.log(values[0]);\n\n        let formData = new FormData();\n        formData.append('sesskey', Config.sesskey);\n        formData.append('repo_upload_file', file);\n        formData.append('filepath', '/');\n        formData.append('client_id', this.options['client_id']);\n        formData.append('title', file.name);\n        formData.append('overwrite', overwrite);\n        formData.append('savepath', '/');\n        formData.append('repo_id', this.options['repo_id']);\n        formData.append('itemid', this.options['itemid']);\n        // console.log(formData);\n        if (async) {\n            const promise = fetch(\n                url + '?action=' + action, //  + '&' + window.build_querystring(params),\n                {\n                    method: 'POST',\n                    body: formData // file\n                }\n            )\n                .then( response => response.json() )\n                .then( json => {\n                    // console.log(action);\n                    if (json.error) {\n                        throw new Error(json.error);\n                    }\n                    console.log(json);\n                    let originalFilename = file.name;\n                    if (originalFilename.substr(0,1) != '/') {\n                        originalFilename = '/' + originalFilename;\n                    }\n                    if (originalFilename != filename) {\n                        return this.renameFile(originalFilename, filename);\n                    }\n                    return json;\n                })\n                .catch( error => {\n                    console.error('upload error:', error);\n                    alert(error);\n                });\n            return promise;\n        } else {\n            // synchronous\n            console.log('SYNCHRONOUSE UPDATE');\n            let request = new XMLHttpRequest();\n            request.open('POST', url + '?action=' + action, false);\n            request.send(formData);\n            if (request.status === 200) {\n                console.log(request.responseText);\n            }\n        }\n\n    }\n}\n\n"],"names":["Syncer","options","TypeError","console","log","this","path","Promise","resolve","pathold","pathnew","framework","filename","text","file","overwrite","index","lastIndexOf","length","pathname","substring","MoodleQuestionAttemptSyncer","forEach","values","splitFullname","createPath","appendFile","FileNode","addon","usageid","slot","itemid","url","Config","wwwroot","contextid","fetch","method","then","response","catch","error","alert","MoodleSyncer","action","undefined","params","sesskey","Object","assign","window","build_querystring","json","Error","_sendRequest","newValue","substr","stripSlashes","listfolder","reject","_this","firstFile","list","item","filepath","folder","filenode","addEditor","async","File","type","upload","name","formData","FormData","append","promise","body","originalFilename","_this2","renameFile","request","XMLHttpRequest","open","send","status","responseText"],"mappings":"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"}