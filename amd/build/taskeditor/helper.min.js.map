{"version":3,"file":"helper.min.js","sources":["../../src/taskeditor/helper.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Helper functions for zipping and unzipping task\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     // This file is part of ProFormA Question Type for Moodle\n //\n // ProFormA Question Type for Moodle is free software:\n // you can redistribute it and/or modify\n // it under the terms of the GNU General Public License as published by\n // the Free Software Foundation, either version 3 of the License, or\n // (at your option) any later version.\n //\n // ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n //\n // You should have received a copy of the GNU General Public License\n // along with ProFormA Question Type for Moodle.\n // If not, see <http://www.gnu.org/licenses/>.\n\n /**\n * Helper functions\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     eCULT-Team of Ostfalia University, K.Borm, Dr.U.Priss\n */\n\n// Known bugs: search the code for the string \"ToDo\" below and check faq.html and installationFAQ.html\n\nimport $ from 'jquery';\nimport {FileWrapper, FileStorage, fileStorages} from \"./file\";\nimport {getExtension, setErrorMessage} from \"./util\";\nimport {javaParser} from \"./java\";\nimport * as taskeditorconfig from \"./config\";\nimport {readAndDisplayXml} from \"./task\";\nimport * as Str from 'core/str';\n\n\nexport var readXmlActive = false;\n\nexport const testTypes = 'EMPTY LIST'; // getTesttypeOptions();\n\n// create option list string with all test types\nfunction getTesttypeOptions() {\n    let list = \"\";\n    let first = true;\n    $.each(taskeditorconfig.testInfos, function (index, item) {\n        list = list + \"<option\";\n        if (first) {\n            list = list + \" selected='selected'\";\n            first = false;\n        }\n        list = list + \">\" + item.testType;\n        list = list + \"</option>\";\n    });\n    return list;\n}\n\nexport function readAndCreateFileData(file, fileId, callback) {\n    if (!file)\n        return;\n    let filename = file.name;\n\n    // check if a file with filename already is stored\n    if (FileWrapper.doesFilenameExist(filename)) {\n        Str.get_string('fileexists', 'qtype_proforma', filename)\n            .then(content => alert(content));\n        return;\n    }\n\n    const size = file.size; //get file size\n    const mimetype = taskeditorconfig.getMimeType(file.type, filename); //get mime type\n    // determine if we have a binary or non-binary file\n    let isBinaryFile = taskeditorconfig.isBinaryFile(file, mimetype);\n    let reader = new FileReader();\n    reader.onload = function (e) {\n        function finishFile(ui_file) {\n            // set filename\n            ui_file.filename = filename;\n\n            /*        if (size > taskeditorconfig.maxSizeForEditor) {\n                        //console.log('file '+ filename + ' is too large => no editor support');\n                        //isBinaryFile = true;\n                    }*/\n\n            if (isBinaryFile) {\n                // binary file\n                // at first update fileStorages because\n                // it is needed for changing file type\n                let fileObject = new FileStorage(isBinaryFile, mimetype, e.target.result, filename);\n                fileObject.setSize(size);\n                fileStorages[ui_file.id] = fileObject;\n                ui_file.type = 'file';\n            } else {\n                // assume non binary file\n                let fileObject = new FileStorage(isBinaryFile, mimetype, 'text is in editor', filename);\n                fileStorages[ui_file.id] = fileObject;\n                ui_file.text = e.target.result;\n                ui_file.type = 'embedded';\n            }\n\n            if (callback)\n                callback(filename, ui_file.id);\n        }\n\n        // special handling for JAVA: extract class name and package name and\n        // recalc filename!\n        if (getExtension(filename) === 'java') {\n            const text = e.target.result;\n            filename = javaParser.getFilenameWithPackage(text, filename);\n        }\n\n        // recheck if a file with that filename already is stored\n        if (FileWrapper.doesFilenameExist(filename)) {\n            Str.get_string('fileexists', 'qtype_proforma', filename)\n                .then(content => alert(content));\n            return;\n        }\n\n        if (!fileId) {\n            // create new file box\n            FileWrapper.createFromTemplate()\n                .then(ui_file => {\n                    finishFile(ui_file);\n                });\n        } else {\n            // file box already exists\n            finishFile(FileWrapper.constructFromId(fileId));\n        }\n    };\n\n    //console.log(\"read file\");\n    if (isBinaryFile)\n        reader.readAsArrayBuffer(file);\n    else\n        reader.readAsText(file);\n}\n\nfunction uploadFilesWhenDropped(files) {\n    $.each(files, function (index, file) {\n        readAndCreateFileData(file, undefined /*-1*/, function (filename) {\n            // nothing extra to be done\n        });\n    });\n}\n\n\n///////////////////////////////////////////////////////// function: readXML\n\nexport function readXMLWithLock (taskXmlText) {\n    readXmlActive = true; // lock automatic input field update\n    try {\n        return readAndDisplayXml(taskXmlText);\n        // show/hide buttons according to new programming language\n        // TODO:\n        // switchProgLang();\n\n    } catch (err) {\n        setErrorMessage(\"uncaught exception\", err);\n    }\n    finally {\n        readXmlActive = false;\n    }\n}\n\n/*\n    codeskeleton = CodeMirror.fromTextArea(\n        $(\"#code_template\")[0], {\n            mode: \"text/x-java\",\n            indentUnit: 4,\n            lineNumbers: true,\n            matchBrackets: true,\n            tabMode: \"shift\",\n            styleActiveLine: true, autoCloseBrackets: true,\n            theme: \"eclipse\",\n            dragDrop: false\n        });\n\n    $(codeskeleton.getWrapperElement()).resizable({\n        handles: 's', // only resize in north-south-direction\n        resize: function () {\n            editor.refresh();\n        }\n    });\n    codeskeleton.on(\"drop\", function (editor, e) {\n        //uploadFileWhenDropped(e.originalEvent.dataTransfer.files, e.currentTarget);\n        console.log('codemirror drop: ' + e);\n    });\n\n    // show/hide buttons according to programming language\n    switchProgLang();\n\n    // register callback\n    $(\"#xml_programming-language\").on(\"change\", switchProgLang)\n\n\n    $(\"#button_generate_restrictions\").click(function () {\n        $(\"#files_restriction\")[0].textContent = \"\";\n        $(\"#files_restriction\").append(SubmissionFileList.getInstance().getTableString());\n        let index = 0;\n        let size = 0;\n        // read model solution files\n        ModelSolutionWrapper.doOnAll(function (ms) {\n            FileReferenceList.doOnAllIds(ms.root, function (id) {\n                const ui_file = FileWrapper.constructFromId(id);\n                if (index > 0) {\n                    // create new row\n                    SubmissionFileList.getInstance().appendRow();\n                }\n                SubmissionFileList.getInstance().setLastRowContent(ui_file.filename, false, false);\n                size += ui_file.size;\n                index++;\n            });\n        });\n\n        size *= 5; // add a lot of tolerance!\n        size = Math.ceil(size/100)*100;\n\n        $(\"#xml_submission_size\").val(size);\n    })\n\n    $(\"#button_load\").click(function () {\n        $(\"#upload_xml_file\").click();\n    })\n*/\n    /*\n    $(\"#button_new\").click(function(){\n    $(\"#upload_xml_file\").click();\n    })\n     */\n\nvar enableTestMode = false;\n/*\n    if (!DEBUG_MODE) {\n        $(\"#buttonClear\").hide();\n        $(\"#output\").attr(\"readonly\", true);\n\n        $(\"#buttonExport\").hide();\n        $(\"#buttonImport\").hide();\n    }\n\n    // function is used only in test environment!!\n    enableTestMode = function () {\n        // enable support for tests!\n        console.log(\"enable test mode\");\n        //$(\"#buttonExport\").show();\n        //$(\"#buttonImport\").show();\n\n        $(\"#addFile\").show();\n        $(\"#loadFile\").show();\n    }\n\n    if (TEST_MODE)\n        enableTestMode();\n*/\n    // disable (drag&)drop in whole application except\n    // for the intended drop zones\n    // (otherwise dropping a file in the browser leaves the editor site)\n\n/*\n    const dropzoneClass = \"drop_zone\";\n    function noDragNDropSupport(e) {\n        if (e.target.class !== dropzoneClass) {\n            e.preventDefault();\n            e.dataTransfer.effectAllowed = \"none\";\n            e.dataTransfer.dropEffect = \"none\";\n        }\n    }\n    window.addEventListener(\"dragenter\", noDragNDropSupport, false);\n    window.addEventListener(\"dragover\", noDragNDropSupport);\n    window.addEventListener(\"drop\", noDragNDropSupport);\n\n    // enable dropping files in the file section\n    // with creating new file boxes\n    var filesection = $(\"#proforma-files-section\").parent();\n    // use parent instead of filesection here because\n    // the acual file section is too small and is not what is expected\n    filesection.on({\n        dragover: function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            //e.dataTransfer.dropEffect = 'copy';\n        },\n        dragenter: function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n        },\n        drop: function (e) {\n            if (e.originalEvent.dataTransfer) {\n                if (e.originalEvent.dataTransfer.files.length) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    //UPLOAD FILES HERE\n                    uploadFilesWhenDropped(e.originalEvent.dataTransfer.files, e.currentTarget);\n                }\n            }\n        }\n    });\n\n    // add file reference for template, library instruction\n    if (USE_VISIBLES)\n        FileReferenceList.init(\"#visiblefiledropzone\", '#visiblesection', VisibleFileReference);\n\n    //FileReferenceList.init(\"#multimediadropzone\", '#multimediasection', MultimediaFileReference);\n    FileReferenceList.init(\"#downloaddropzone\", '#downloadsection', DownloadableFileReference);\n\n    if (!USE_VISIBLES)\n        $(\"#visiblefiledropzone\").hide();\n\n    $(\"#files_restriction\").append(SubmissionFileList.getInstance().getTableString());\n\n    $(\"#xml_task_internal_description\").append(getInternalDescriptionString(''));\n\n    // saving files is realised with an anchor having the download attribute set.\n    // Unfortunately not every browser supports downloads and not every browser\n    // supports data URI as a download link.\n    // The following functions check whether this feature is supported\n    checkDataURISupport(function (checkResult) {\n        if (checkResult) {\n            console.log('Files in data URIs are supported.');\n        } else {\n            alert('Files in data URIs are probabely NOT supported in this browser. ' +\n                'Thus saving the task file will not be possible. ' +\n                'Please use another browser (Firefox, Chrome).');\n        }\n    });\n\n    function checkDataURISupport(callback) {\n        try {\n            var request = new XMLHttpRequest();\n            request.onload = function reqListener() {\n                if (callback)\n                    callback(true);\n            };\n            request.onerror = function reqListener() {\n                if (callback)\n                    callback(false);\n                else\n                    console.log('Files in data URIs are supported.');\n            };\n            request.open('GET', 'data:application/pdf;base64,cw==');\n            request.send();\n        } catch (ex) {\n            callback(false);\n        }\n    }\n\n    checkDataURISupport();\n*/\n\n///////////////////////////////////////////////////////// end of document ready function\n"],"names":["taskXmlText","readXmlActive","err","readAndCreateFileData","file","fileId","callback","filename","name","FileWrapper","doesFilenameExist","Str","get_string","then","content","alert","size","mimetype","taskeditorconfig","getMimeType","type","isBinaryFile","reader","FileReader","onload","e","finishFile","ui_file","fileObject","FileStorage","target","result","setSize","id","text","javaParser","getFilenameWithPackage","constructFromId","createFromTemplate","readAsArrayBuffer","readAsText"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2kCA6KiCA,oCAC7BC,eAAgB,aAEL,2BAAkBD,aAK3B,MAAOE,+BACW,qBAAsBA,oCAGtCD,eAAgB,6MA3HbA,eAAgB,gDAoBXE,sBAAsBC,KAAMC,OAAQC,cAC3CF,KACD,WACAG,SAAWH,KAAKI,QAGhBC,kBAAYC,kBAAkBH,sBAC9BI,IAAIC,WAAW,aAAc,iBAAkBL,UAC1CM,MAAKC,SAAWC,MAAMD,iBAIzBE,KAAOZ,KAAKY,KACZC,SAAWC,iBAAiBC,YAAYf,KAAKgB,KAAMb,cAErDc,aAAeH,iBAAiBG,aAAajB,KAAMa,UACnDK,OAAS,IAAIC,WACjBD,OAAOE,OAAS,SAAUC,YACbC,WAAWC,YAEhBA,QAAQpB,SAAWA,SAOfc,aAAc,KAIVO,WAAa,IAAIC,kBAAYR,aAAcJ,SAAUQ,EAAEK,OAAOC,OAAQxB,UAC1EqB,WAAWI,QAAQhB,yBACNW,QAAQM,IAAML,WAC3BD,QAAQP,KAAO,WACZ,KAECQ,WAAa,IAAIC,kBAAYR,aAAcJ,SAAU,oBAAqBV,6BACjEoB,QAAQM,IAAML,WAC3BD,QAAQO,KAAOT,EAAEK,OAAOC,OACxBJ,QAAQP,KAAO,WAGfd,UACAA,SAASC,SAAUoB,QAAQM,OAKJ,UAA3B,sBAAa1B,UAAsB,OAC7B2B,KAAOT,EAAEK,OAAOC,OACtBxB,SAAW4B,iBAAWC,uBAAuBF,KAAM3B,UAInDE,kBAAYC,kBAAkBH,UAC9BI,IAAIC,WAAW,aAAc,iBAAkBL,UAC1CM,MAAKC,SAAWC,MAAMD,WAI1BT,OAQDqB,WAAWjB,kBAAY4B,gBAAgBhC,2BAN3BiC,qBACPzB,MAAKc,UACFD,WAAWC,QAAX,KASZN,aACAC,OAAOiB,kBAAkBnC,MAEzBkB,OAAOkB,WAAWpC,yBA/FD"}