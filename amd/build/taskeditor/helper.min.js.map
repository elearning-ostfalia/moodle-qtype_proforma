{"version":3,"file":"helper.min.js","sources":["../../src/taskeditor/helper.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n /**\n * Helper functions\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     eCULT-Team of Ostfalia University, K.Borm, Dr.U.Priss\n */\n\n// Known bugs: search the code for the string \"ToDo\" below and check faq.html and installationFAQ.html\n\nimport $ from 'jquery';\nimport {FileWrapper, FileStorage, fileStorages} from \"./file\";\nimport {javaParser} from \"./java\";\nimport {readAndDisplayXml} from \"./task\";\nimport * as Str from 'core/str';\n\n\nexport const DEBUG_MODE       = false;\nexport const TEST_MODE        = false;\nexport const SUBMISSION_TEST  = false;\nexport const USE_VISIBLES     = false;\n\nexport var readXmlActive = false;\n\nexport const version094    = 'xsd/taskxml0.9.4.xsd';                // name of schema files\nexport const version101    = 'xsd/taskxml1.0.1.xsd';\n\n\nexport function setErrorMessage(errormess, exception) { // setting the error console\n    // console.log('setErrorMessage');\n    console.log(errormess);\n    console.log(exception);\n    window.alert(errormess);\n}\n\nexport function clearErrorMessage() {\n\n}\n\n// without . (MyString.Java = java)\n// to lowercase\nexport function getExtension(filename) {\n    return filename.split('.').pop().toLowerCase();\n}\n\n// convert to mimetype that can be directely handeled by codemirror\nexport function getMimeType(mimetype, filename) {\n    const extension = filename.split('.').pop().toLowerCase();\n    switch (extension) {\n        case 'h':    return 'text/x-chdr';\n        case 'c':    return 'text/x-csrc';\n        case 'cpp':  return 'text/x-c++src';\n        case 'java': return 'text/x-java';\n        case 'py':   return 'text/x-python';\n        case 'stlx': return 'text/x-setlx'; // no actual mode availble\n        case 'xml':  return 'application/xml';\n        case 'html':  return 'text/html';\n        default: return mimetype;\n    }\n}\n\n\n\nlet newUuid;\n/**\n * generetae new UUID. Note that this function always returns the same UUID\n * whenever it is called later on.\n *\n * @returns {string|*}\n */\nexport function generateUUID(){\n    if (newUuid !== undefined) {\n        // console.log('newUuid is ' + newUuid + ' (do not change)');\n        return newUuid;\n    }\n    let date = new Date().getTime();\n    newUuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c_value) {\n        let rand = (date + Math.random()*16)%16 | 0;\n        date = Math.floor(date/16);\n        return (c_value === 'x' ? rand : (rand&0x3|0x8)).toString(16);\n    });\n    console.log('newUuid is ' + newUuid);\n    return newUuid;\n}\n\n\n//////////////////////////////////////////////////////////////////////////////\n/* setcounter and deletecounter are only used for fileIDs, modelSolIDs, testIDs\n * setcounter finds the first available ID and returns it\n * setcounter should be called when a new item is created\n * deletecounter deletes an ID from the hash, to be used when deleting an item\n */\nexport function setcounter(temphash) {\n    let tempcnter = 1;\n    while (temphash.hasOwnProperty(tempcnter)) {         // if the counter is already used, take next one\n        tempcnter++;\n    }\n    temphash[tempcnter] = 1;\n    return tempcnter;\n}\n\n\nexport function handleFilenameChangeInTest(newFilename, tempSelElem) {\n    function setJavaClassname(newFilename) {\n        let testBox = tempSelElem.closest(\".xml_test\");\n        if (testBox) {\n            const ui_classname = $(testBox).find(\".xml_entry_point\");\n            if (ui_classname.length === 1 && // test has entrypoint\n                ui_classname.first().val().trim() === '' && // and it is not yet set\n                getExtension(newFilename) === 'java') { // and filename is java => JUnit\n                    // set classname if file belongs to JUNIT and if exactly one file is assigned\n                    ui_classname.first().val(javaParser.getFullClassnameFromFilename(newFilename));\n\n                // $.each(ui_classname, function(index, element) {\n                //     //let currentFilename = $(element).val();\n                //     if (!readXmlActive)\n                //         $(element).val(javaParser.getFullClassnameFromFilename(newFilename)).change();\n                // });\n            }\n        }\n    }\n\n    function setResponseFilename(newFilename) {\n        let msBox = tempSelElem.closest(\".xml_model-solution\");\n        if (msBox && msBox.length > 0) {\n            console.log(msBox);\n            // Filename belongs to model solution\n            // => get response filename in Moodle form\n            let editorfilename = document.getElementById('id_responsefilename');\n            if (editorfilename) {\n                if (editorfilename.value.trim() === '') {\n                    // Response filename is empty => set\n                    editorfilename.value = newFilename;\n                }\n            }\n        }\n    }\n    /*\n        function setJUnitDefaultTitle(newFilename) {\n            // set description according to classname\n            let testBox = $(tempSelElem).closest(\".xml_test\");\n            const ui_title = $(testBox).find(\".xml_test_title\");\n            if (ui_title.length === 1) {\n                $.each(ui_title, function(index, element) {\n                    let currentTitle = $(element).val();\n                    if (!readXmlActive && currentTitle === JUnitTest.DefaultTitle)\n                        $(element).val(\"Junit Test \" + javaParser.getPureClassnameFromFilename(newFilename)).change();\n                });\n            }\n        }\n    */\n    setJavaClassname(newFilename);\n    setResponseFilename(newFilename);\n    // setJUnitDefaultTitle(newFilename);\n}\n\n\n\nfunction isBinaryFile(file, mimetype) {\n    if (file.name.toLowerCase() === 'makefile') {\n        return false;\n    }\n    if (mimetype && mimetype.match(/(text\\/)/i))  // mimetype is 'text/...'\n        return false;\n\n    const extension = file.name.split('.').pop();\n    switch (extension.toLowerCase()) {\n        case 'c' :\n        case 'h' :\n        case 'cpp' :\n        case 'hpp' :\n        case 'hxx' :\n        case 'cxx' :\n        case 'java' :\n        case 'log' :\n        case 'py' :\n        case 'txt' :\n        case 'xml' :\n        case 'php' :\n        case 'js' :\n        case 'html' :\n        case 'csv' :\n            return false;\n        default: break;\n    }\n    return true;\n}\n\n\nexport function readAndCreateFileData(file, fileId, callback) {\n    if (!file)\n        return;\n    let filename = file.name;\n\n    // check if a file with filename already is stored\n    if (FileWrapper.doesFilenameExist(filename)) {\n        Str.get_string('fileexists', 'qtype_proforma', filename)\n            .then(content => alert(content));\n        return;\n    }\n\n    const size = file.size; //get file size\n    const mimetype = getMimeType(file.type, filename); //get mime type\n    // determine if we have a binary or non-binary file\n    let isBinary = isBinaryFile(file, mimetype);\n    let reader = new FileReader();\n    reader.onload = function (e) {\n        function finishFile(ui_file) {\n            // set filename\n            ui_file.filename = filename;\n\n            /*        if (size > taskeditorconfig.maxSizeForEditor) {\n                        //console.log('file '+ filename + ' is too large => no editor support');\n                        //isBinary = true;\n                    }*/\n\n            if (isBinary) {\n                // binary file\n                // at first update fileStorages because\n                // it is needed for changing file type\n                let fileObject = new FileStorage(isBinary, mimetype, e.target.result, filename);\n                fileObject.setSize(size);\n                fileStorages[ui_file.id] = fileObject;\n                ui_file.type = 'file';\n            } else {\n                // assume non binary file\n                let fileObject = new FileStorage(isBinary, mimetype, 'text is in editor', filename);\n                fileStorages[ui_file.id] = fileObject;\n                ui_file.text = e.target.result;\n                ui_file.type = 'embedded';\n            }\n\n            if (callback)\n                callback(filename, ui_file.id);\n        }\n\n        // special handling for JAVA: extract class name and package name and\n        // recalc filename!\n        if (getExtension(filename) === 'java') {\n            const text = e.target.result;\n            filename = javaParser.getFilenameWithPackage(text, filename);\n        }\n\n        // recheck if a file with that filename already is stored\n        if (FileWrapper.doesFilenameExist(filename)) {\n            Str.get_string('fileexists', 'qtype_proforma', filename)\n                .then(content => alert(content));\n            return;\n        }\n\n        if (!fileId) {\n            // create new file box\n            FileWrapper.createFromTemplate()\n                .then(ui_file => {\n                    finishFile(ui_file);\n                });\n        } else {\n            // file box already exists\n            finishFile(FileWrapper.constructFromId(fileId));\n        }\n    };\n\n    //console.log(\"read file\");\n    if (isBinary)\n        reader.readAsArrayBuffer(file);\n    else\n        reader.readAsText(file);\n}\n\nfunction uploadFilesWhenDropped(files) {\n    $.each(files, function (index, file) {\n        readAndCreateFileData(file, undefined /*-1*/, function (filename) {\n            // nothing extra to be done\n        });\n    });\n}\n\n\n///////////////////////////////////////////////////////// function: readXML\n\nexport function readXMLWithLock (taskXmlText) {\n    readXmlActive = true; // lock automatic input field update\n    try {\n        return readAndDisplayXml(taskXmlText);\n    } catch (err) {\n        setErrorMessage(\"uncaught exception\", err);\n    }\n    finally {\n        readXmlActive = false;\n    }\n}\n\n\n// disable (drag&)drop in whole application except\n// for the intended drop zones\n// (otherwise dropping a file in the browser leaves the editor site)\n\n/*\n    const dropzoneClass = \"drop_zone\";\n    function noDragNDropSupport(e) {\n        if (e.target.class !== dropzoneClass) {\n            e.preventDefault();\n            e.dataTransfer.effectAllowed = \"none\";\n            e.dataTransfer.dropEffect = \"none\";\n        }\n    }\n    window.addEventListener(\"dragenter\", noDragNDropSupport, false);\n    window.addEventListener(\"dragover\", noDragNDropSupport);\n    window.addEventListener(\"drop\", noDragNDropSupport);\n\n    // enable dropping files in the file section\n    // with creating new file boxes\n    var filesection = $(\"#proforma-files-section\").parent();\n    // use parent instead of filesection here because\n    // the acual file section is too small and is not what is expected\n    filesection.on({\n        dragover: function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            //e.dataTransfer.dropEffect = 'copy';\n        },\n        dragenter: function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n        },\n        drop: function (e) {\n            if (e.originalEvent.dataTransfer) {\n                if (e.originalEvent.dataTransfer.files.length) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    //UPLOAD FILES HERE\n                    uploadFilesWhenDropped(e.originalEvent.dataTransfer.files, e.currentTarget);\n                }\n            }\n        }\n    });\n\n    // add file reference for template, library instruction\n    if (USE_VISIBLES)\n        FileReferenceList.init(\"#visiblefiledropzone\", '#visiblesection', VisibleFileReference);\n\n    //FileReferenceList.init(\"#multimediadropzone\", '#multimediasection', MultimediaFileReference);\n    FileReferenceList.init(\"#downloaddropzone\", '#downloadsection', DownloadableFileReference);\n\n    if (!USE_VISIBLES)\n        $(\"#visiblefiledropzone\").hide();\n\n    $(\"#files_restriction\").append(SubmissionFileList.getInstance().getTableString());\n\n*/\n\n///////////////////////////////////////////////////////// end of document ready function\n"],"names":["undefined","newUuid","date","Date","getTime","replace","c_value","rand","Math","random","floor","toString","console","log","newFilename","tempSelElem","testBox","closest","ui_classname","find","length","first","val","trim","getExtension","javaParser","getFullClassnameFromFilename","setJavaClassname","msBox","editorfilename","document","getElementById","value","setResponseFilename","taskXmlText","readXmlActive","err","setErrorMessage","temphash","tempcnter","hasOwnProperty","errormess","exception","window","alert","filename","split","pop","toLowerCase","getMimeType","mimetype","readAndCreateFileData","file","fileId","callback","name","FileWrapper","doesFilenameExist","Str","get_string","then","content","size","type","isBinary","match","isBinaryFile","reader","FileReader","onload","e","finishFile","ui_file","fileObject","FileStorage","target","result","setSize","id","text","getFilenameWithPackage","constructFromId","createFromTemplate","readAsArrayBuffer","readAsText"],"mappings":"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"}