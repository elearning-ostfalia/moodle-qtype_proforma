{"version":3,"file":"taskeditor.min.js","sources":["../../src/taskeditor/taskeditor.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Helper functions for zipping and unzipping task\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     K.Borm\n */\n\n\n// import ModalFactory from 'core/modal_factory';\n// import ModalEvents from 'core/modal_events';\n// import {get_string as getString} from 'core/str';\n// import Str from 'core/str';\n// import {get_strings as getStrings} from 'core/str';\nimport Notification, {exception as displayException} from 'core/notification';\nimport Y from 'core/yui';\n\nimport {TestWrapper } from \"./test\";\nimport {downloadTask, getCheckstyleVersions, getJunitVersions} from \"../repository\";\nimport {generateUUID, getExtension, setErrorMessage} from \"./util\";\nimport * as taskeditorconfig from \"./config\";\nimport {unzipme, zipme, taskTitleToFilename} from \"./zipper\";\nimport {readXMLWithLock} from \"./helper\";\nimport {convertToXML} from \"./task\";\nimport Config from 'core/config';\nimport {ModelSolutionWrapper} from \"./modelsol\";\nimport {TaskFileRef, TaskModelSolution} from \"./taskdata\";\nimport {ModelSolutionFileReference} from \"./filereflist\";\nimport {fileStorages, FileWrapper} from \"./file\";\nimport * as zip from \"../zip/zip\";\nimport * as logmonitor from \"../logmonitor\";\n\n\nvar draftitemid = null;\nvar draftfilename = null;\nvar taskrepositoryparams = null;\nlet modelsolrepositoryparams = null;\nvar t0;\nlet taskmaxbytes;\n\n/**\n * edit task\n * @param buttonid id of button to trigger opening taskeditor\n * @param context programming language contexts\n * @param taskrepoparams parameters for interacting with draft tasks\n * @param msrepoparams parameters for interacting with draft model solutions\n * @param inline\n * @returns {Promise<void>}\n */\nexport async function edit(buttonid, context, taskrepoparams, msrepoparams, inline) {\n    taskrepositoryparams = taskrepoparams;\n    modelsolrepositoryparams = msrepoparams;\n    taskmaxbytes = context.taskmaxbytes;\n    console.log('Task max bytes: ' + taskmaxbytes);\n\n    /**\n     * get localized string for cancel/close button\n     * @returns {Promise<void>}\n     */\n    async function init() {\n        // closeString = await getString('close', 'editor');\n    }\n\n    function downloadTaskFromServer() {\n        console.log('download task ' + draftitemid);\n        return downloadTask(draftitemid)\n            .then(response => {\n                console.log(response.fileurl);\n                draftfilename = decodeURIComponent(response.fileurl.split('/').reverse()[0]);\n                if (!response.fileurl) {\n                    reject(new Error('invalid fileurl ' + response.fileurl));\n                }\n                return response.fileurl;\n            })\n            .then(url => fetch(url, {method: 'GET'}));\n    }\n\n    /**\n     * Originally there was a way to enter the grading parameters\n     * separately from the task. If changes were made here,\n     * they must now be transferred to the form fields.\n     */\n    function mergeWithGradingHints() {\n        const gradinghints = document.querySelector('input[name=\"gradinghints\"]');\n        if (!gradinghints) {\n            console.error('No gradinghints field found => ignore');\n            return;\n        }\n\n        const aggregationstrategy = document.querySelector('#id_aggregationstrategy');\n        // console.log('aggregationstrategy ' + aggregationstrategy.value);\n\n        // console.log(gradinghints.value);\n        const count = document.querySelectorAll('.proforma-taskeditor .xml_test').length;\n        for (let i = 0; i < count; i++) {\n            const testid = document.getElementById('id_testid_' + i);\n            const testweight = document.getElementById('id_testweight_' + i);\n            const testtitle = document.getElementById('id_testtitle_' + i);\n            const testdescription = document.getElementById('id_testdescription_' + i);\n            const testtype = document.getElementById('id_testtype_' + i);\n            if (!testid) {\n                console.error('cannot find element with id_testid_' + i);\n                continue;\n            }\n            if (!testweight) {\n                console.error('cannot find element with id_testweight_' + i);\n                continue;\n            }\n            if (!testtitle) {\n                console.error('cannot find element with id_testtitle_' + i);\n                continue;\n            }\n            if (!testdescription) {\n                console.error('cannot find element with id_testdescription_' + i);\n                continue;\n            }\n            if (!testtype) {\n                console.error('cannot find element with id_testtype_' + i);\n                continue;\n            }\n            const ref = testid.value;\n            let ui_test = TestWrapper.constructFromId(ref);\n            if (!ui_test) {\n                alert('cannot create test ' + ref);\n            } else {\n                ui_test.weight = testweight.value;\n                ui_test.title = testtitle.value;\n                ui_test.description = testdescription.value;\n                if (testtype.value !== ui_test.testtype) {\n                    alert('Task file does not match grading hints in Moodle:\\n' +\n                        'Testtype for test ' + ui_test.id + ' does not match testtype from grading hints');\n                }\n            }\n        }\n\n        // Finally hide original test input fields:\n        // (better use hide if ???)\n        document.querySelectorAll('[id^=\"fgroup_id_testoptions_\"]').forEach(item => {\n            item.style.display = 'None';\n        });\n        document.querySelectorAll('[id^=\"fitem_id_testtitle_\"]').forEach(item => {\n            item.style.display = 'None';\n        });\n        document.querySelectorAll('[id^=\"fitem_id_testdescription_\"]').forEach(item => {\n            item.style.display = 'None';\n        });\n\n        const t1 = performance.now();\n        console.log(\"expanding details took \" + (t1 - t0) + \" milliseconds.\");\n    }\n\n    function displayTaskdata(taskresponse) {\n        const extension = getExtension(taskresponse.url);\n        switch (extension)\n        {\n            case 'zip':\n                // console.log('task file is zipped! => extract');\n                return taskresponse.blob()\n                    .then(blob => {\n                        // console.log('blob is');\n                        // console.log(blob);\n                        unzipme(blob, function(text) {\n                            readXMLWithLock(text)\n                                .then(() => mergeWithGradingHints());\n                        });\n                    });\n            case 'xml':\n                // console.log('task file is not zipped');\n                return taskresponse.text()\n                    .then(text => {\n                        readXMLWithLock(text)\n                            .then(() => mergeWithGradingHints());\n                    });\n            default:\n                return Promise.resolve('N/A');\n        }\n    }\n\n    /**\n     * Some disabled input fields are enabled in order to submit\n     * the values to moodle so that they will be stored in the database.\n     */\n    function revertChangesForSubmission() {\n        let uuid = document.querySelector(\"input[name='uuid']\");\n        if (!uuid) {\n            console.error('cannot find uuid element');\n        } else {\n            uuid.disabled = true;\n        }\n        let proformaversion = document.querySelector(\"input[name='proformaversion']\");\n        if (!proformaversion) {\n            console.error('cannot find proformaversion element');\n        } else {\n            proformaversion.disabled = true;\n        }\n    }\n    function updateEnvironment() {\n        console.log('*** updateEnvironment');\n        const questionId = document.querySelector(\"input[name='id']\").value;\n        // Since the editor was opened, a new uuid is generated immediately,\n        // because changes are not tracked.\n        // This means that when the task is saved, a new uuid is set.\n        let uuid = document.querySelector(\"input[name='uuid']\");\n        if (!uuid) {\n            console.error('cannot find uuid element');\n        } else {\n            uuid.value = generateUUID();\n        }\n        let proformaversion = document.querySelector(\"input[name='proformaversion']\");\n        if (!proformaversion) {\n            console.error('cannot find proformaversion element');\n        } else {\n            proformaversion.value = '2.0';\n        }\n\n        // Do not collapse other headers as there might be missing input fields after\n        // import that can not be seen on save (submit)\n/*        if (questionId !== \"\") {\n            // Collapse main headers\n            let header = document.querySelector('a[href=\"#id_generalheadercontainer\"]');\n            if (header) {\n                if (header.getAttribute('aria-expanded') === \"true\") {\n                    header.click();\n                }\n            }\n            // Collapse response options\n            header = document.querySelector('a[href=\"#id_responseoptionscontainer\"]');\n            if (header) {\n                if (header.getAttribute('aria-expanded') === \"true\") {\n                    header.click();\n                }\n            }\n        }\n*/\n\n        // Hide edit details button\n        document.getElementById(buttonid).style.display = 'none';\n        // Hide grader options\n        if (document.getElementById('id_graderoptions_header')) {\n            // document.getElementById('id_graderoptions_header').style.display = 'None';\n        }\n        // Hide model solution links\n        if (document.getElementById('fitem_id_mslinks')) {\n            document.getElementById('fitem_id_mslinks').style.display = 'None';\n        }\n        // Hide task filemanager\n        if (document.getElementById('fitem_id_task')) {\n            document.getElementById('fitem_id_task').style.display = 'None';\n        }\n        // Hide upload button in grader section\n        if (document.getElementById('fitem_id_uploadbutton')) {\n            document.getElementById('fitem_id_uploadbutton').style.display = 'None';\n        }\n        // Collapse grader options\n        let header = document.querySelector('a[href=\"#id_graderoptions_headercontainer\"]');\n        if (header) {\n            if (header.getAttribute('aria-expanded') === \"true\") {\n                header.click();\n            }\n        }\n\n        // Set taskeditor value to 1 in order to notify the server that the\n        // task editor is visible\n        // (Does not open editor on reload :-()\n        const taskeditorField = document.querySelector('input[name=\"taskeditor\"]');\n        taskeditorField.value = \"1\";\n\n        // Save task on submit/update.\n        let updatebutton = document.getElementById('id_updatebutton');\n        if (updatebutton !== null) {\n            let realUpdateClick = updatebutton.onclick;\n            updatebutton.onclick = (event) => {\n                event.preventDefault();\n                console.log('save before update');\n                updatebutton.disabled = true;\n                saveToServer()\n                    .then(() => {\n                        console.log('saveToServer returned');\n                        updatebutton.onclick = realUpdateClick;\n                        updatebutton.click();\n                    })\n                   .catch(error => {\n                        console.log(error);\n                        alert(error);\n                    })\n                    .finally(() => {\n                        updatebutton.disabled = false;\n                    });\n            };\n        } else {\n            console.error('Could not find update button');\n        }\n\n        let submitbutton = document.getElementById('id_submitbutton');\n        if (submitbutton !== null) {\n            let realSubmitClick = submitbutton.onclick;\n            submitbutton.onclick = (event) => {\n                event.preventDefault();\n                console.log('save before submit');\n                submitbutton.disabled = true;\n                saveToServer()\n                    .then(() => {\n                        console.log('saveToServer returned');\n                        submitbutton.onclick = realSubmitClick;\n                        submitbutton.click();\n                        /*                    let uuid = document.querySelector(\"input[name='uuid']\");\n                                            uuid.disabled = false;*/\n                    })\n                    .catch(error => {\n                        console.log(error);\n                        alert(error);\n                    })\n                    .finally(() => {\n                        submitbutton.disabled = false;\n                    });\n            };\n            /* Problem: in new questions the values are not submitted\n             * to server so that UUID and proformaversion is missing\n             */\n            /*\n            // Some of the form validation tests are executed on the Moodle server.\n            // If the validation fails some of the changes must be\n            // reverted.\n            // Moodle has a form validation event that is triggered in that case\n            // (hopefully)\n            let form = submitbutton.closest('form');\n            if (form) {\n                form.addEventListener('core_form/fieldValidationFailed', (x) => {\n                    console.log('core_form/fieldValidationFailed');\n                    console.log(x);\n                    // revertChangesForSubmission();\n                }, false);\n            }\n */\n        } else {\n            console.error('Could not find submit button');\n        }\n        console.log('updateEnvironment end');\n\n    }\n\n    function showTaskeditor() {\n        t0 = performance.now();\n        draftitemid = document.querySelector(\"#id_task\").value;\n        let questionId = document.querySelector(\"input[name='id']\").value;\n        if (questionId === \"\") {\n            // New question => finished.\n            console.log('new task');\n            ModelSolutionWrapper.createFromTemplate();\n            updateEnvironment();\n            document.querySelector('.proforma-taskeditor').style.display = '';\n            return;\n        }\n\n        console.log('edit task');\n        downloadTaskFromServer()\n            .then(taskresponse => displayTaskdata(taskresponse))\n            .fail(Notification.exception);\n            // update environment in parallel\n//            .then(() => {\n                updateEnvironment();\n                document.querySelector('.proforma-taskeditor').style.display = '';\n//            })\n    }\n\n    const questionId = document.querySelector(\"input[name='id']\").value;\n    // hide editor if hidden 'taskeditor' input field is set to 0 (default)\n    const taskeditorRequested = document.querySelector(\"input[name='taskeditor']\");\n    // console.log('Check if taskeditor shall be visible or not');\n    // console.log(taskeditorRequested);\n\n    taskeditorconfig.initStrings()\n        .then(() => {\n            if (questionId === \"\" || (taskeditorRequested && taskeditorRequested.value === '1') ) {\n                console.log('show editor');\n                // Hide details button.\n                document.getElementById(buttonid).style.display = 'none';\n                // Show and fill editor\n                showTaskeditor();\n            } else {\n                console.log('hide editor');\n                // Hide editor\n                document.querySelector('.proforma-taskeditor').style.display = 'none';\n                // Show editor on button click\n                document.getElementById(buttonid).addEventListener('click', function () {\n                    showTaskeditor();\n                });\n            }\n        });\n\n    /*\n            let taskPromise = downloadTaskFromServer();\n\n            let stringsPromise = getStrings([\n                {\n                    // All string beginning with taskeditor.\n                    key: 'taskeditor',\n                    component: 'qtype_proforma'\n                }\n            ]);\n            let modalPromise = ModalFactory.create(\n                {\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    large: true\n                }\n            );\n\n            context['tests'] = '';\n            context['files'] = '';\n            let bodyPromise = Templates.renderForPromise('qtype_proforma/taskeditor', context);\n\n            $.when(stringsPromise, modalPromise, bodyPromise, taskPromise)\n                .then(function(strings, modal, {html, js}, taskresponse) {\n                    // console.log(html);\n                    // console.log(js);\n\n                    modal.setTitle(strings[0]);\n\n                    modal.setBody(html);\n                    // Change size (TODO: actually do with css)\n                    modal.getModal().css('min-width', '70%');\n                    modal.getModal().css('min-height', '90%');\n\n                    modal.getRoot().on(ModalEvents.save, function(e) {\n                        e.preventDefault();\n                        alert('TODO save');\n                        modal.destroy();\n                    });\n\n                    modal.getRoot().on(ModalEvents.cancel, function(e) {\n                        e.preventDefault();\n                        ModalFactory.create({\n                            type: ModalFactory.types.SAVE_CANCEL,\n                            title: 'Close task editor',\n                            body: 'Do you really want to close the task editor?',\n                        })\n                            .then(function(confirm) {\n                                confirm.setSaveButtonText('Close');\n                                confirm.getRoot().on(ModalEvents.save, function() {\n                                    modal.destroy();\n                                });\n                                confirm.show();\n                            });\n                    });\n\n                    modal.getRoot().on(ModalEvents.hidden, modal.destroy.bind(modal));\n                    modal.getRoot().on(ModalEvents.outsideClick, (e) => {\n                        console.log('click outside modal');\n                        e.preventDefault();\n                    });\n                    modal.getRoot().on(ModalEvents.destroyed, (e) => {\n                        console.log('destroyed');\n                        e.preventDefault();\n                    });\n                    // Hide close button\n                    // modal.getRoot()[0].querySelector('.modal-header button .close').style.display = 'none';\n                    let root = modal.getRoot()[0];\n                    let header = root.querySelector('.modal-header');\n                    header.querySelector('button').style.display = 'none';\n\n                    modal.show();\n                    if (js) {\n                        Templates.runTemplateJS(js);\n                    }\n\n                    // Fill modal with data\n                    console.log('response from fetch is');\n                    console.log(taskresponse);\n                    displayTaskdata(taskresponse);\n                    return modal;\n            }).fail(Notification.exception);\n        */\n\n}\n\n/**\n * get JUnit version from Moodle configuration and add to JUnit list\n */\nexport const setJunitVersions = () => {\n    // TODO: kann man die JUnit version nicht besser über eine Core-Funktion holen??\n    // console.log('setJunitVersions');\n    getJunitVersions()\n        .then(response => {\n            // console.log(response['junitversions']);\n            document.querySelectorAll('.xml_ju_version').forEach(\n                selectElem => {\n                    // console.log(selectElem);\n                    if (selectElem.querySelectorAll('option').length === 0) {\n                        // No options yet.\n                        response['junitversions'].forEach(version => {\n                            let option = document.createElement(\"option\");\n                            option.text = version;\n                            selectElem.add(option);\n                        });\n                    }\n                }\n            );\n        })\n        .fail(Notification.exception);\n}\n\nexport const setCheckstyleVersions = () => {\n    getCheckstyleVersions()\n        .then(response => {\n            document.querySelectorAll('.xml_pr_CS_version').forEach(\n                selectElem => {\n                    if (selectElem.querySelectorAll('option').length === 0) {\n                        response['checkstyleversions'].forEach(version => {\n                            let option = document.createElement(\"option\");\n                            option.text = version;\n                            selectElem.add(option);\n                        });\n                    }\n                }\n            );\n        })\n        .fail(Notification.exception);\n}\n\nexport const initproglang = (proglangdiv, buttondiv, langselect) => {\n\n    function addButtonCallbacks() {\n        document.querySelector('#addJUnitTest').onclick = function (e) {\n            e.preventDefault();\n            taskeditorconfig.infoJavaJUnit.createTestForm();\n        }\n\n        document.querySelector('#addCheckStyleTest').onclick = function (e) {\n            e.preventDefault();\n            taskeditorconfig.infoCheckStyle.createTestForm();\n        }\n\n        document.querySelector('#addCompilerTest').onclick = function (e) {\n            e.preventDefault();\n            taskeditorconfig.infoJavaComp.createTestForm();\n        }\n\n        document.querySelector('#addGoogleTest').onclick = function (e) {\n            e.preventDefault();\n            taskeditorconfig.infoGoogleTest.createTestForm();\n        }\n\n        document.querySelector('#addCUnitTest').onclick = function (e) {\n            e.preventDefault();\n            taskeditorconfig.infoCUnit.createTestForm();\n        }\n\n        document.querySelector('#addPythonUnittest').onclick = function (e) {\n            e.preventDefault();\n            taskeditorconfig.infoPythonUnittest.createTestForm();\n        }\n\n        document.querySelector('#addPythonDocTest').onclick = function (e) {\n            e.preventDefault();\n            taskeditorconfig.infoPythonDoctest.createTestForm();\n        }\n    }\n\n    let langselectelem = document.getElementById(langselect);\n    const lang = langselectelem.value;\n    // show versions\n    document.querySelector('#xml_programming-language-' + lang).style.display = '';\n    // show buttons\n    document.querySelectorAll('#' + buttondiv + ' .' + lang).forEach(\n        e => {\n            e.style.display = '';\n        }\n    );\n\n    // Add change callback.\n    langselectelem.onchange = function() {\n        const lang = langselectelem.value;\n        // Show versions for this language\n        // document.querySelector('#xml_programming-language-' + lang).style.display = '';\n        let versionElement = document.getElementById(\"xml_programming-language-\" + lang);\n        versionElement.disabled = (versionElement.options.length === 0);\n        versionElement.style.display = '';\n\n        // Show buttons for this language\n        document.querySelectorAll('#' + buttondiv + ' .' + lang).forEach(\n            e => e.style.display = ''\n        );\n        // Hide other versions\n        document.querySelectorAll('#' + proglangdiv + ' select:not(#xml_programming-language-' + lang + ')').forEach(\n            e => e.style.display = 'None'\n        );\n        // Hide other buttons\n        document.querySelectorAll('#' + buttondiv + ' :not(.' + lang + ')').forEach(\n            e => e.style.display = 'None'\n        );\n    };\n\n    // Add button callbacks (depend on initialisation of config).\n    taskeditorconfig.initStrings()\n        .then(() => addButtonCallbacks());\n}\n\nexport const download = (buttonid) => {\n    let button = document.getElementById(buttonid);\n    button.onclick = function (e) {\n        e.preventDefault();\n        convertToXML()\n            .then((context) => {\n                zipme(context, true, taskmaxbytes);\n            });\n    }\n}\n\nexport const downloadModelsolution = (buttonid) => {\n    let button = document.getElementById(buttonid);\n\n/*    let blob = new Blob([ TEXT_CONTENT ], {\n        type : \"application/zip\"\n    });\n*/\n    button.onclick = async function (e) {\n        e.preventDefault();\n        createModelSolutionZip()\n            .then(zippedBlob => {\n                console.log(zippedBlob);\n                const url = window.URL.createObjectURL(zippedBlob);\n                let b = document.createElement(\"a\");\n                b.style = \"display: none\";\n                b.download = 'modelsoluation.zip';\n                b.href = url;\n                document.body.appendChild(b);\n                b.click();\n            });\n    }\n}\n\nfunction createGradingHints(temporary=false) {\n    let doc = document.implementation.createDocument(null, null, null);\n    let gh = doc.createElement(\"grading-hints\");\n    let root = doc.createElement(\"root\");\n    root.setAttribute('function', 'sum');\n    gh.appendChild(root);\n\n    TestWrapper.doOnAll(ui_test => {\n        let test = doc.createElement(\"test-ref\");\n        root.appendChild(test);\n        test.setAttribute('ref', ui_test.id);\n        test.setAttribute('weight', ui_test.weight);\n        let title = doc.createElement(\"title\");\n        title.innerHTML = ui_test.title;\n        test.appendChild(title);\n        let description = doc.createElement(\"description\");\n        description.innerHTML = ui_test.description;\n        test.appendChild(description);\n        let testtype = doc.createElement(\"test-type\");\n        testtype.innerHTML = ui_test.testtype;\n        test.appendChild(testtype);\n    });\n\n    console.log('create new grading hints');\n    const gradinghints = document.querySelector('input[name=\"gradinghints\"]');\n    if (!gradinghints) {\n        console.error('No gradinghints field found => ignore');\n        return;\n    }\n    let serializer = new XMLSerializer();\n    let result = serializer.serializeToString (gh);\n\n    if ((result.substring(0, 5) !== \"<?xml\")){\n        result = '<?xml version=\"1.0\"?>' + result;\n        // result = \"<?xml version='1.0' encoding='UTF-8'?>\" + result;\n    }\n    console.log(result);\n    if (!temporary) {\n        gradinghints.value = encodeURIComponent(result);\n    }\n    console.log('grading hints are finished');\n    return encodeURIComponent(result);\n}\n\nfunction uploadModelSolutionToServer() {\n    // Instead of using the current draftid and delete all files\n    // we use a new unused draftid.\n    const draftitemid = modelsolrepositoryparams['newitemid'];\n\n    // const draftitemid = document.querySelector(\"input[name='modelsol']\").value;\n    console.log('draftid for model sol is ' + draftitemid);\n\n    console.log('now let us model solution in Moodle server');\n\n    function uploadFile(formData) {\n        const url = Config.wwwroot + '/repository/repository_ajax.php';\n        const action = 'upload';\n\n        let request = new XMLHttpRequest();\n        request.open('POST', url + '?action=' + action, false);\n        console.log('send');\n        try {\n            request.send(formData);\n            if (request.status !== 200) {\n                alert(`Error ${request.status}: ${request.statusText}`);\n            } else {\n                console.log(request.response);\n            }\n        } catch(err) { // instead of onerror\n            alert(\"Request failed\");\n        }\n        console.log('parse repsonse');\n        const jsonResponse = JSON.parse(request.responseText);\n        console.log('response from Moodle');\n        console.log(jsonResponse);\n        if (jsonResponse.error !== undefined) {\n            console.error(request.responseText);\n            alert(jsonResponse.error);\n        }\n    }\n\n    // write model solutions\n    ModelSolutionWrapper.doOnAll(function(ms) {\n        let modelSolution = new TaskModelSolution();\n        modelSolution.id = ms.id;\n        let counter = 0;\n        console.log('MS id is ' + ms.id);\n        ModelSolutionFileReference.getInstance().doOnAll(function(id) {\n            modelSolution.filerefs[counter++] = new TaskFileRef(id);\n            console.log('MS Fileref is ' + id);\n            let file = FileWrapper.constructFromId(id);\n            console.log('filename is ' + fileStorages[id].filename);\n            const formData = new FormData();\n            console.log(fileStorages);\n            formData.append('sesskey', Config.sesskey);\n            formData.append('client_id', modelsolrepositoryparams['client_id']);\n            formData.append('overwrite', true);\n            formData.append('repo_id', modelsolrepositoryparams['repo_id']);\n            formData.append('itemid', draftitemid);\n            let filename = fileStorages[id].filename.split(\"/\").pop();\n            let length = fileStorages[id].filename.length - filename.length;\n            let filepath = fileStorages[id].filename.substring(0, length);\n            formData.append('title', filename);\n            if (fileStorages[id].isBinary) {\n                let blob = new Blob([fileStorages[id].content], { type : fileStorages[id].mimetype });\n                // console.log(blob);\n                formData.append('repo_upload_file', blob);\n            } else {\n                let content = file.text;\n                // console.log('Content is ' + content);\n                formData.append('repo_upload_file', new Blob([content], { type : 'plain/text' }));\n            }\n            formData.append('filepath', '/');\n            formData.append('savepath', filepath);\n            console.log(formData);\n            uploadFile(formData);\n        }, ms.root);\n    })\n\n    // set draftitemid to new value\n    document.querySelector(\"input[name='modelsol']\").value = draftitemid;\n\n}\n\nasync function createModelSolutionZip() {\n    const zipFileWriter = new zip.BlobWriter(\"application/zip\");\n    const zipWriter = new zip.ZipWriter(zipFileWriter);\n\n    // create zipfile with model solutions\n    ModelSolutionWrapper.doOnAll(function(ms) {\n        let modelSolution = new TaskModelSolution();\n        modelSolution.id = ms.id;\n        // console.log('MS id is ' + ms.id);\n        ModelSolutionFileReference.getInstance().doOnAll(async function(id) {\n            const filename = fileStorages[id].filename;\n            // console.log('filename is ' + filename);\n            let content = null;\n            if (fileStorages[id].isBinary) {\n                // console.log('binary');\n                content = new Blob([fileStorages[id].content]);\n            } else {\n                // console.log('non binary');\n                let file = FileWrapper.constructFromId(id);\n                content = new Blob([file.text], { type : 'plain/text' });\n                // formData.append('repo_upload_file', new Blob([content], { type : 'plain/text' }));\n            }\n            // console.log('Content is ' + content);\n            await zipWriter.add(filename, new zip.BlobReader(content));\n        }, ms.root);\n    })\n    // console.log('wait for close');\n    await zipWriter.close();\n    // console.log('return content');\n    return zipFileWriter.getData();\n}\n\n/**\n * send task with model solution and grading hints to Moodle server in order let\n * the task run on grader. The result is shown in extra div element.\n *\n * @param buttonid\n * @param containerid\n */\nexport function checkModelsolution(buttonid, containerid) {\n    let button = document.getElementById(buttonid);\n    let container = document.getElementById(containerid);\n    let blobtask;\n    let defaultcursor = container.style.cursor;\n\n    let htmlFeedback = '';\n    let feedbackstarted = false;\n\n    function onFeedbackStart() {\n        container.style.display = '';\n        container.style.cursor = defaultcursor;\n        htmlFeedback = '';\n        feedbackstarted = true;\n    }\n    function onFeedbackData(text) {\n        if (feedbackstarted) {\n            htmlFeedback += text + '\\n';\n        } else {\n            htmlFeedback += text + '<br>';\n        }\n    }\n    function onFeedbackEnd() {\n        container.innerHTML = htmlFeedback;\n        document.querySelectorAll('#check-feedback-id .collapsibleregion')\n            .forEach(element => {\n                console.log('create collapsible region for ' + element.id);\n                M.util.init_collapsible_region(Y, element.id, '', 'EIN VERSUCH IST ES WERT');\n            });\n    }\n\n    button.onclick = function (e) {\n        e.preventDefault();\n        // clean old check feedback\n        container.innerHTML = '';\n        container.style.cursor = \"wait\";\n        feedbackstarted = false;\n        const aggstrategy = document.querySelector(\"select[name='aggregationstrategy']\").value;\n        button.disabled = true;\n\n        // create task zipfile\n        convertToXML()\n            .then((taskxml) => {\n                // Zip task\n                return zipme(taskxml, false, taskmaxbytes);\n            })\n            .then(blob => {\n                // Task is zipped => zip model solution\n                // (could be made in parallel but makes code a bit more complex\n                // so I do not do this)\n                console.log('task zip created ');\n                // blob is the zipped version of the whole task\n                blobtask = blob;\n                return createModelSolutionZip();\n            })\n            .then(modelsolutionzip => {\n                const gradinghints = createGradingHints(true);\n                const proglang = document.getElementById(\"xml_programming-language\").value;\n                // Model solution is zipped => send to Moodle server\n                console.log('created model solution zip');\n                const url = Config.wwwroot + '/question/type/proforma/checksolution_ajax.php';\n                const questionId = document.querySelector(\"input[name='id']\").value;\n                const formData = new FormData();\n                formData.append('sesskey', Config.sesskey);\n                formData.append('task', blobtask, 'task.zip');\n                formData.append('modelsolution', modelsolutionzip, 'modelsolution.zip');\n                formData.append('itemid', modelsolrepositoryparams['checkitemid']);\n                formData.append('contextid', modelsolrepositoryparams['contextid']);\n                // courseContextId is only required for security checks so that\n                // not anybody can execute the function on the server.\n                formData.append('coursecontextid', Config.courseContextId);\n                // formData.append('questionid', questionId);\n                formData.append('gradinghints', gradinghints);\n                formData.append('proglang', proglang);\n                formData.append('aggregationstrategy', aggstrategy);\n                return fetch(url, {\n                    method : \"POST\",\n                    body: formData,\n                });\n            })\n            .then(response => {\n                if (!response.ok) {\n                    console.error(response);\n                    return Promise.reject(response.statusText);\n                }\n                // Moodle server has received task with model solution\n                // => convert to json\n                return response.json()\n            })\n            .then(json => {\n                // forward json to logmonitor.\n                if (json.error) {\n                    console.log(json);\n                    return Promise.reject(json.error);\n                }\n                let url = Config.wwwroot + '/question/type/proforma/checksolution_ajax.php?runtest=1';\n                url += '&sesskey=' + Config.sesskey +\n                    //                        '&questionid=' + questionId +\n                    '&itemid=' + json.itemid +\n                    '&contextid=' + json.contextid +\n                    '&taskfilename=' + json.taskfilename +\n                    '&proglang=' + json.proglang +\n                    '&coursecontextid=' + Config.courseContextId +\n                    '&aggregationstrategy=' + aggstrategy +\n                    '&modelsolutionfilename=' + json.modelsolutionfilename;\n\n                logmonitor.show('checkmodelsollog', url, onFeedbackStart, onFeedbackData, onFeedbackEnd);\n            })\n            .catch(error => {\n                console.log(error);\n                alert(error);\n            })\n            .finally(() => {\n                // console.log('finally promise');\n                button.disabled = false;\n            });\n    }\n}\n\n/**\n * Uploads currect task to Moodle server into the draft area prepared for the task\n * @returns {*}\n */\nfunction saveToServer() {\n    return convertToXML()\n        .then((context) => {\n            createGradingHints();\n            uploadModelSolutionToServer();\n\n            // Update values for UUID and proforma version in form input.\n            let uuid = document.querySelector(\"input[name='uuid']\");\n            if (!uuid) {\n                console.error('cannot find uuid element');\n            } else {\n                // The UUID is disabled and must be enabled in order to\n                // submit the changed value.\n                uuid.disabled = false;\n                uuid.value = generateUUID();\n            }\n            let proformaversion = document.querySelector(\"input[name='proformaversion']\");\n            if (!proformaversion) {\n                console.error('cannot find proformaversion element');\n            } else {\n                // The proformaversion is disabled and must be enabled in order to\n                // submit the changed value.\n                proformaversion.disabled = false;\n            }\n\n            return zipme(context, false, taskmaxbytes);\n        })\n        .then(blobtask => {\n            console.log('now let us update task in  Moodle server: ' + draftitemid);\n            const url = Config.wwwroot + '/question/type/proforma/taskeditor_ajax.php';\n            const formData = new FormData();\n            formData.append('sesskey', Config.sesskey);\n            formData.append('task', blobtask, taskTitleToFilename());\n            // Use original itemid from task filemanager\n            const itemid = document.querySelector(\"#id_task\").value;\n            formData.append('itemid', itemid); // draftitemid);\n            formData.append('contextid', taskrepositoryparams['contextid']);\n            formData.append('coursecontextid', Config.courseContextId);\n\n            return fetch(url, {\n                method: \"POST\",\n                body: formData,\n            })\n        })\n        .then(response => {\n            console.log(response);\n            return response.json()\n        })\n        .then(json => {\n            console.log(json);\n        });\n        // Do not catch here because error will not be detected in calling function!!\n}\n\nexport function uploadTaskToGrader(buttonid) {\n    let button = document.getElementById(buttonid);\n    if (!button) {\n        console.error('invalid button id');\n        return;\n    }\n\n    button.onclick = function (e) {\n        e.preventDefault();\n        button.disabled = true;\n        convertToXML()\n            .then((context) => {\n                return zipme(context, false, taskmaxbytes);\n            })\n            .then(blobtask => {\n                console.log('now let us upload task to grader');\n                const url = Config.wwwroot + '/question/type/proforma/taskeditor_ajax.php';\n                // const questionId = document.querySelector(\"input[name='id']\").value;\n                const formData = new FormData();\n                formData.append('sesskey', Config.sesskey);\n                formData.append('task', blobtask, 'task.zip');\n                // Which itemid???\n                // Modelsolution parameters contain new (unused) draftarea itemids.\n                // checkitemid is used for temporary files used for checks.\n                formData.append('coursecontextid', Config.courseContextId);\n                formData.append('itemid', modelsolrepositoryparams['checkitemid']);\n                // Context id is sent to Moodle in order to perform security checks:\n                formData.append('contextid', modelsolrepositoryparams['contextid']);\n                // formData.append('questionid', questionId);\n\n                return fetch(url, {\n                    method: \"POST\",\n                    body: formData,\n                });\n            })\n            .then(response => {\n                if (!response.ok) {\n                    console.error(response);\n                    return Promise.reject(response.statusText);\n                }\n                return response.json()\n            })\n            .then(json => {\n                if (json.error) {\n                    console.log(json);\n                    return Promise.reject(json.error);\n                }\n                const questionId = document.querySelector(\"input[name='id']\").value;\n                let url = Config.wwwroot + '/question/type/proforma/upload_sse.php';\n                url += '?sesskey=' + Config.sesskey + '&id=' + questionId;\n                if (json.itemid) {\n                    url += '&itemid=' + json.itemid +\n                        '&contextid=' + json.contextid +\n                        '&filename=' + json.filename +\n                        '&coursecontextid=' + Config.courseContextId;\n                }\n                logmonitor.show('uploadlog', url);\n                // taskupload.upload(null, json.itemid, json.contextid, json.filename);\n            })\n            .catch(error => {\n                console.log(error);\n                alert(error);\n            })\n            .finally(() => {\n                button.disabled = false;\n            });\n    }\n}\n\n/*\nexport const savetask = (buttonid) => {\n    let button = document.getElementById(buttonid);\n    button.onclick = function (e) {\n        e.preventDefault();\n        saveToServer();\n    }\n}\n*/\n"],"names":["buttonid","containerid","blobtask","button","document","getElementById","container","defaultcursor","style","cursor","htmlFeedback","feedbackstarted","onFeedbackStart","display","onFeedbackData","text","onFeedbackEnd","innerHTML","querySelectorAll","forEach","element","console","log","id","M","util","init_collapsible_region","Y","onclick","e","preventDefault","aggstrategy","querySelector","value","disabled","then","taskxml","taskmaxbytes","blob","createModelSolutionZip","modelsolutionzip","gradinghints","createGradingHints","proglang","url","Config","wwwroot","formData","FormData","append","sesskey","modelsolrepositoryparams","courseContextId","fetch","method","body","response","ok","json","error","Promise","reject","statusText","itemid","contextid","taskfilename","modelsolutionfilename","logmonitor","show","catch","alert","finally","context","taskrepoparams","msrepoparams","inline","mergeWithGradingHints","count","length","i","testid","testweight","testtitle","testdescription","testtype","ref","ui_test","TestWrapper","constructFromId","weight","title","description","item","t1","performance","now","t0","updateEnvironment","uuid","proformaversion","header","getAttribute","click","updatebutton","realUpdateClick","event","saveToServer","submitbutton","realSubmitClick","showTaskeditor","draftitemid","createFromTemplate","fileurl","decodeURIComponent","split","reverse","Error","taskresponse","resolve","displayTaskdata","fail","Notification","exception","taskrepositoryparams","questionId","taskeditorRequested","taskeditorconfig","initStrings","addEventListener","filename","selectElem","version","option","createElement","add","proglangdiv","buttondiv","langselect","langselectelem","lang","onchange","versionElement","options","infoJavaJUnit","createTestForm","infoCheckStyle","infoJavaComp","infoGoogleTest","infoCUnit","infoPythonUnittest","infoPythonDoctest","temporary","doc","implementation","createDocument","gh","root","setAttribute","appendChild","doOnAll","test","result","XMLSerializer","serializeToString","substring","encodeURIComponent","uploadModelSolutionToServer","ms","modelSolution","TaskModelSolution","counter","getInstance","filerefs","TaskFileRef","file","FileWrapper","fileStorages","pop","filepath","isBinary","Blob","content","type","mimetype","request","XMLHttpRequest","open","send","status","err","jsonResponse","JSON","parse","responseText","undefined","uploadFile","zipFileWriter","zip","BlobWriter","zipWriter","ZipWriter","async","BlobReader","close","getData","zippedBlob","window","URL","createObjectURL","b","download","href"],"mappings":"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"}