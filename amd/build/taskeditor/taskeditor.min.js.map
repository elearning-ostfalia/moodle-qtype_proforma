{"version":3,"file":"taskeditor.min.js","sources":["../../src/taskeditor/taskeditor.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Helper functions for zipping and unzipping task\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     K.Borm\n */\n\n\n// import ModalFactory from 'core/modal_factory';\n// import ModalEvents from 'core/modal_events';\n// import {get_string as getString} from 'core/str';\n// import Str from 'core/str';\n// import {get_strings as getStrings} from 'core/str';\nimport Notification, {exception as displayException} from 'core/notification';\nimport Y from 'core/yui';\n\nimport Templates from 'core/templates';\nimport {TestWrapper } from \"./test\";\nimport {downloadTask, getCheckstyleVersions, getJunitVersions} from \"../repository\";\nimport {generateUUID, getExtension, setErrorMessage} from \"./util\";\nimport * as taskeditorconfig from \"./config\";\nimport {unzipme, zipme, taskTitleToFilename} from \"./zipper\";\nimport {readXMLWithLock} from \"./helper\";\nimport {convertToXML} from \"./task\";\nimport Config from 'core/config';\nimport {ModelSolutionWrapper} from \"./modelsol\";\nimport {TaskFileRef, TaskModelSolution} from \"./taskdata\";\nimport {ModelSolutionFileReference} from \"./filereflist\";\nimport {fileStorages, FileWrapper} from \"./file\";\nimport * as zip from \"../zip/zip\";\nimport * as logmonitor from \"../logmonitor\";\n\n\nvar draftitemid = null;\nvar draftfilename = null;\nvar taskrepositoryparams = null;\nvar modelsolrepositoryparams = null;\nvar t0;\n\n/**\n * edit task\n * @param buttonid id of button to trigger opening taskeditor\n * @param context programming language contexts\n * @param taskrepoparams parameters for interacting with draft tasks\n * @param msrepoparams parameters for interacting with draft model solutions\n * @param inline\n * @returns {Promise<void>}\n */\nexport async function edit(buttonid, context, taskrepoparams, msrepoparams, inline) {\n    // console.log(context);\n    taskrepositoryparams = taskrepoparams;\n    modelsolrepositoryparams = msrepoparams;\n    // console.log(taskrepositoryparams);\n\n    /**\n     * get localized string for cancel/close button\n     * @returns {Promise<void>}\n     */\n    async function init() {\n        // closeString = await getString('close', 'editor');\n    }\n\n    function downloadTaskFromServer() {\n        console.log('download task ' + draftitemid);\n        return downloadTask(draftitemid)\n            .then(response => {\n                console.log(response.fileurl);\n                draftfilename = decodeURIComponent(response.fileurl.split('/').reverse()[0]);\n                if (!response.fileurl) {\n                    reject(new Error('invalid fileurl ' + response.fileurl));\n                }\n                return response.fileurl;\n            })\n            .then(url => fetch(url, {method: 'GET'}));\n    }\n\n    /**\n     * Originally there was a way to enter the grading parameters\n     * separately from the task. If changes were made here,\n     * they must now be transferred to the form fields.\n     */\n    function mergeWithGradingHints() {\n        const gradinghints = document.querySelector('input[name=\"gradinghints\"]');\n        if (!gradinghints) {\n            console.error('No gradinghints field found => ignore');\n            return;\n        }\n\n        const aggregationstrategy = document.querySelector('#id_aggregationstrategy');\n        // console.log('aggregationstrategy ' + aggregationstrategy.value);\n\n        // console.log(gradinghints.value);\n        const count = document.querySelectorAll('.proforma-taskeditor .xml_test').length;\n        for (let i = 0; i < count; i++) {\n            const testid = document.getElementById('id_testid_' + i);\n            const testweight = document.getElementById('id_testweight_' + i);\n            const testtitle = document.getElementById('id_testtitle_' + i);\n            const testdescription = document.getElementById('id_testdescription_' + i);\n            const testtype = document.getElementById('id_testtype_' + i);\n            if (!testid) {\n                console.error('cannot find element with id_testid_' + i);\n                continue;\n            }\n            if (!testweight) {\n                console.error('cannot find element with id_testweight_' + i);\n                continue;\n            }\n            if (!testtitle) {\n                console.error('cannot find element with id_testtitle_' + i);\n                continue;\n            }\n            if (!testdescription) {\n                console.error('cannot find element with id_testdescription_' + i);\n                continue;\n            }\n            if (!testtype) {\n                console.error('cannot find element with id_testtype_' + i);\n                continue;\n            }\n            const ref = testid.value;\n            let ui_test = TestWrapper.constructFromId(ref);\n            if (!ui_test) {\n                alert('cannot create test ' + ref);\n            } else {\n                ui_test.weight = testweight.value;\n                ui_test.title = testtitle.value;\n                ui_test.description = testdescription.value;\n                if (testtype.value !== ui_test.testtype) {\n                    alert('Task file does not match grading hints in Moodle:\\n' +\n                        'Testtype for test ' + ui_test.id + ' does not match testtype from grading hints');\n                }\n            }\n        }\n\n        // Finally hide original test input fields:\n        console.log('*** ' + count);\n        // (better use hide if ???)\n/*        for (let i = 0; i < count; i++) {\n            document.getElementById('fgroup_id_testoptions_' + i).style.display = 'None';\n            document.getElementById('fitem_id_testtitle_' + i).style.display = 'None';\n            document.getElementById('fitem_id_testdescription_' + i).style.display = 'None';\n        }\n*/\n        document.querySelectorAll('[id^=\"fgroup_id_testoptions_\"]').forEach(item => {\n            item.style.display = 'None';\n        });\n        document.querySelectorAll('[id^=\"fitem_id_testtitle_\"]').forEach(item => {\n            item.style.display = 'None';\n        });\n        document.querySelectorAll('[id^=\"fitem_id_testdescription_\"]').forEach(item => {\n            item.style.display = 'None';\n        });\n\n\n        const t1 = performance.now();\n        console.log(\"expanding details took \" + (t1 - t0) + \" milliseconds.\");\n    }\n\n    function displayTaskdata(taskresponse) {\n        const extension = getExtension(taskresponse.url);\n        switch (extension)\n        {\n            case 'zip':\n                // console.log('task file is zipped! => extract');\n                return taskresponse.blob()\n                    .then(blob => {\n                        // console.log('blob is');\n                        // console.log(blob);\n                        unzipme(blob, function(text) {\n                            readXMLWithLock(text)\n                                .then(() => mergeWithGradingHints());\n                        });\n                    });\n            case 'xml':\n                // console.log('task file is not zipped');\n                return taskresponse.text()\n                    .then(text => {\n                        readXMLWithLock(text)\n                            .then(() => mergeWithGradingHints());\n                    });\n            default:\n                return Promise.resolve('N/A');\n        }\n    }\n\n    /**\n     * Some disabled input fields are enabled in order to submit\n     * the values to moodle so that they will be stored in the database.\n     */\n    function revertChangesForSubmission() {\n        let uuid = document.querySelector(\"input[name='uuid']\");\n        if (!uuid) {\n            console.error('cannot find uuid element');\n        } else {\n            uuid.disabled = true;\n        }\n        let proformaversion = document.querySelector(\"input[name='proformaversion']\");\n        if (!proformaversion) {\n            console.error('cannot find proformaversion element');\n        } else {\n            proformaversion.disabled = true;\n        }\n    }\n    function updateEnvironment() {\n        console.log('*** updateEnvironment');\n        const questionId = document.querySelector(\"input[name='id']\").value;\n        // Since the editor was opened, a new uuid is generated immediately,\n        // because changes are not tracked.\n        // This means that when the task is saved, a new uuid is set.\n        let uuid = document.querySelector(\"input[name='uuid']\");\n        if (!uuid) {\n            console.error('cannot find uuid element');\n        } else {\n            uuid.value = generateUUID();\n        }\n        let proformaversion = document.querySelector(\"input[name='proformaversion']\");\n        if (!proformaversion) {\n            console.error('cannot find proformaversion element');\n        } else {\n            proformaversion.value = '2.0';\n        }\n\n        // Do not collapse other headers as there might be missing input fields after\n        // import that can not be seen on save (submit)\n/*        if (questionId !== \"\") {\n            // Collapse main headers\n            let header = document.querySelector('a[href=\"#id_generalheadercontainer\"]');\n            if (header) {\n                if (header.getAttribute('aria-expanded') === \"true\") {\n                    header.click();\n                }\n            }\n            // Collapse response options\n            header = document.querySelector('a[href=\"#id_responseoptionscontainer\"]');\n            if (header) {\n                if (header.getAttribute('aria-expanded') === \"true\") {\n                    header.click();\n                }\n            }\n        }\n*/\n\n        // Hide edit details button\n        document.getElementById(buttonid).style.display = 'none';\n        // Hide grader options\n        if (document.getElementById('id_graderoptions_header')) {\n            // document.getElementById('id_graderoptions_header').style.display = 'None';\n        }\n        // Hide model solution links\n        if (document.getElementById('fitem_id_mslinks')) {\n            document.getElementById('fitem_id_mslinks').style.display = 'None';\n        }\n        // Hide task filemanager\n        if (document.getElementById('fitem_id_task')) {\n            document.getElementById('fitem_id_task').style.display = 'None';\n        }\n        // Hide upload button in grader section\n        if (document.getElementById('fitem_id_uploadbutton')) {\n            document.getElementById('fitem_id_uploadbutton').style.display = 'None';\n        }\n        // Collapse grader options\n        let header = document.querySelector('a[href=\"#id_graderoptions_headercontainer\"]');\n        if (header) {\n            if (header.getAttribute('aria-expanded') === \"true\") {\n                header.click();\n            }\n        }\n\n        // Set taskeditor value to 1 in order to notify the server that the\n        // task editor is visible\n        // (Does not open editor on reload :-()\n        const taskeditorField = document.querySelector('input[name=\"taskeditor\"]');\n        taskeditorField.value = \"1\";\n\n        // Save task on submit/update.\n        let updatebutton = document.getElementById('id_updatebutton');\n        if (updatebutton !== null) {\n            let realUpdateClick = updatebutton.onclick;\n            updatebutton.onclick = (event) => {\n                event.preventDefault();\n                console.log('save before update');\n                uploadTaskToServer().then(() => {\n                    console.log('uploadTaskToServer returned');\n                    updatebutton.onclick = realUpdateClick;\n                    updatebutton.click();\n                });\n            };\n        } else {\n            console.error('Could not find update button');\n        }\n\n        let submitbutton = document.getElementById('id_submitbutton');\n        if (submitbutton !== null) {\n            let realSubmitClick = submitbutton.onclick;\n            submitbutton.onclick = (event) => {\n                event.preventDefault();\n                console.log('save before submit');\n                uploadTaskToServer().then(() => {\n                    console.log('uploadTaskToServer returned');\n                    submitbutton.onclick = realSubmitClick;\n                    submitbutton.click();\n/*                    let uuid = document.querySelector(\"input[name='uuid']\");\n                    uuid.disabled = false;*/\n                });\n            };\n            /* Problem: in new questions the values are not submitted\n             * to server so that UUID and proformaversion is missing\n             */\n            /*\n            // Some of the form validation tests are executed on the Moodle server.\n            // If the validation fails some of the changes must be\n            // reverted.\n            // Moodle has a form validation event that is triggered in that case\n            // (hopefully)\n            let form = submitbutton.closest('form');\n            if (form) {\n                form.addEventListener('core_form/fieldValidationFailed', (x) => {\n                    console.log('core_form/fieldValidationFailed');\n                    console.log(x);\n                    // revertChangesForSubmission();\n                }, false);\n            }\n */\n        } else {\n            console.error('Could not find submit button');\n        }\n        console.log('updateEnvironment end');\n\n    }\n\n    function showTaskeditor() {\n        t0 = performance.now();\n        draftitemid = document.querySelector(\"#id_task\").value;\n        let questionId = document.querySelector(\"input[name='id']\").value;\n        if (questionId === \"\") {\n            // New question => finished.\n            console.log('new task');\n            ModelSolutionWrapper.createFromTemplate();\n            updateEnvironment();\n            document.querySelector('.proforma-taskeditor').style.display = '';\n            return;\n        }\n\n        console.log('edit task');\n        downloadTaskFromServer()\n            .then(taskresponse => displayTaskdata(taskresponse))\n            .fail(Notification.exception);\n            // update environment in parallel\n//            .then(() => {\n                updateEnvironment();\n                document.querySelector('.proforma-taskeditor').style.display = '';\n//            })\n    }\n\n    const questionId = document.querySelector(\"input[name='id']\").value;\n    // hide editor if hidden 'taskeditor' input field is set to 0 (default)\n    const taskeditorRequested = document.querySelector(\"input[name='taskeditor']\");\n    // console.log('Check if taskeditor shall be visible or not');\n    // console.log(taskeditorRequested);\n\n    taskeditorconfig.initStrings()\n        .then(() => {\n            if (questionId === \"\" || (taskeditorRequested && taskeditorRequested.value === '1') ) {\n                console.log('show editor');\n                // Hide details button.\n                document.getElementById(buttonid).style.display = 'none';\n                // Show and fill editor\n                showTaskeditor();\n            } else {\n                console.log('hide editor');\n                // Hide editor\n                document.querySelector('.proforma-taskeditor').style.display = 'none';\n                // Show editor on button click\n                document.getElementById(buttonid).addEventListener('click', function () {\n                    showTaskeditor();\n                });\n            }\n        });\n\n    /*\n            let taskPromise = downloadTaskFromServer();\n\n            let stringsPromise = getStrings([\n                {\n                    // All string beginning with taskeditor.\n                    key: 'taskeditor',\n                    component: 'qtype_proforma'\n                }\n            ]);\n            let modalPromise = ModalFactory.create(\n                {\n                    type: ModalFactory.types.SAVE_CANCEL,\n                    large: true\n                }\n            );\n\n            context['tests'] = '';\n            context['files'] = '';\n            let bodyPromise = Templates.renderForPromise('qtype_proforma/taskeditor', context);\n\n            $.when(stringsPromise, modalPromise, bodyPromise, taskPromise)\n                .then(function(strings, modal, {html, js}, taskresponse) {\n                    // console.log(html);\n                    // console.log(js);\n\n                    modal.setTitle(strings[0]);\n\n                    modal.setBody(html);\n                    // Change size (TODO: actually do with css)\n                    modal.getModal().css('min-width', '70%');\n                    modal.getModal().css('min-height', '90%');\n\n                    modal.getRoot().on(ModalEvents.save, function(e) {\n                        e.preventDefault();\n                        alert('TODO save');\n                        modal.destroy();\n                    });\n\n                    modal.getRoot().on(ModalEvents.cancel, function(e) {\n                        e.preventDefault();\n                        ModalFactory.create({\n                            type: ModalFactory.types.SAVE_CANCEL,\n                            title: 'Close task editor',\n                            body: 'Do you really want to close the task editor?',\n                        })\n                            .then(function(confirm) {\n                                confirm.setSaveButtonText('Close');\n                                confirm.getRoot().on(ModalEvents.save, function() {\n                                    modal.destroy();\n                                });\n                                confirm.show();\n                            });\n                    });\n\n                    modal.getRoot().on(ModalEvents.hidden, modal.destroy.bind(modal));\n                    modal.getRoot().on(ModalEvents.outsideClick, (e) => {\n                        console.log('click outside modal');\n                        e.preventDefault();\n                    });\n                    modal.getRoot().on(ModalEvents.destroyed, (e) => {\n                        console.log('destroyed');\n                        e.preventDefault();\n                    });\n                    // Hide close button\n                    // modal.getRoot()[0].querySelector('.modal-header button .close').style.display = 'none';\n                    let root = modal.getRoot()[0];\n                    let header = root.querySelector('.modal-header');\n                    header.querySelector('button').style.display = 'none';\n\n                    modal.show();\n                    if (js) {\n                        Templates.runTemplateJS(js);\n                    }\n\n                    // Fill modal with data\n                    console.log('response from fetch is');\n                    console.log(taskresponse);\n                    displayTaskdata(taskresponse);\n                    return modal;\n            }).fail(Notification.exception);\n        */\n\n}\n\n/**\n * get JUnit version from Moodle configuration and add to JUnit list\n */\nexport const setJunitVersions = () => {\n    // TODO: kann man die JUnit version nicht besser über eine Core-Funktion holen??\n    // console.log('setJunitVersions');\n    getJunitVersions()\n        .then(response => {\n            // console.log(response['junitversions']);\n            document.querySelectorAll('.xml_ju_version').forEach(\n                selectElem => {\n                    // console.log(selectElem);\n                    if (selectElem.querySelectorAll('option').length === 0) {\n                        // No options yet.\n                        response['junitversions'].forEach(version => {\n                            let option = document.createElement(\"option\");\n                            option.text = version;\n                            selectElem.add(option);\n                        });\n                    }\n                }\n            );\n        })\n        .fail(Notification.exception);\n}\n\nexport const setCheckstyleVersions = () => {\n    getCheckstyleVersions()\n        .then(response => {\n            document.querySelectorAll('.xml_pr_CS_version').forEach(\n                selectElem => {\n                    if (selectElem.querySelectorAll('option').length === 0) {\n                        response['checkstyleversions'].forEach(version => {\n                            let option = document.createElement(\"option\");\n                            option.text = version;\n                            selectElem.add(option);\n                        });\n                    }\n                }\n            );\n        })\n        .fail(Notification.exception);\n}\n\nexport const initproglang = (proglangdiv, buttondiv, langselect) => {\n\n    function addButtonCallbacks() {\n        document.querySelector('#addJUnitTest').onclick = function (e) {\n            e.preventDefault();\n            taskeditorconfig.infoJavaJUnit.createTestForm();\n        }\n\n        document.querySelector('#addCheckStyleTest').onclick = function (e) {\n            e.preventDefault();\n            taskeditorconfig.infoCheckStyle.createTestForm();\n        }\n\n        document.querySelector('#addCompilerTest').onclick = function (e) {\n            e.preventDefault();\n            taskeditorconfig.infoJavaComp.createTestForm();\n        }\n\n        document.querySelector('#addGoogleTest').onclick = function (e) {\n            e.preventDefault();\n            taskeditorconfig.infoGoogleTest.createTestForm();\n        }\n\n        document.querySelector('#addCUnitTest').onclick = function (e) {\n            e.preventDefault();\n            taskeditorconfig.infoCUnit.createTestForm();\n        }\n\n        document.querySelector('#addPythonUnittest').onclick = function (e) {\n            e.preventDefault();\n            taskeditorconfig.infoPython.createTestForm();\n        }\n\n        document.querySelector('#addPythonDocTest').onclick = function (e) {\n            e.preventDefault();\n            taskeditorconfig.infoPythonDoctest.createTestForm();\n        }\n    }\n\n    let langselectelem = document.getElementById(langselect);\n    const lang = langselectelem.value;\n    // show versions\n    document.querySelector('#xml_programming-language-' + lang).style.display = '';\n    // show buttons\n    document.querySelectorAll('#' + buttondiv + ' .' + lang).forEach(\n        e => {\n            e.style.display = '';\n        }\n    );\n\n    // Add change callback.\n    langselectelem.onchange = function() {\n        const lang = langselectelem.value;\n        // Show versions for this language\n        // document.querySelector('#xml_programming-language-' + lang).style.display = '';\n        let versionElement = document.getElementById(\"xml_programming-language-\" + lang);\n        versionElement.disabled = (versionElement.options.length === 0);\n        versionElement.style.display = '';\n\n        // Show buttons for this language\n        document.querySelectorAll('#' + buttondiv + ' .' + lang).forEach(\n            e => e.style.display = ''\n        );\n        // Hide other versions\n        document.querySelectorAll('#' + proglangdiv + ' select:not(#xml_programming-language-' + lang + ')').forEach(\n            e => e.style.display = 'None'\n        );\n        // Hide other buttons\n        document.querySelectorAll('#' + buttondiv + ' :not(.' + lang + ')').forEach(\n            e => e.style.display = 'None'\n        );\n    };\n\n    // Add button callbacks (depend on initialisation of config).\n    taskeditorconfig.initStrings()\n        .then(() => addButtonCallbacks());\n}\n\nexport const download = (buttonid) => {\n    let button = document.getElementById(buttonid);\n    button.onclick = function (e) {\n        e.preventDefault();\n        const context = convertToXML();\n        if (context) {\n            zipme(context, true);\n        }\n    }\n}\n\nexport const downloadModelsolution = (buttonid) => {\n    let button = document.getElementById(buttonid);\n\n/*    let blob = new Blob([ TEXT_CONTENT ], {\n        type : \"application/zip\"\n    });\n*/\n    button.onclick = async function (e) {\n        e.preventDefault();\n        createModelSolutionZip()\n            .then(zippedBlob => {\n                console.log(zippedBlob);\n                const url = window.URL.createObjectURL(zippedBlob);\n                let b = document.createElement(\"a\");\n                b.style = \"display: none\";\n                b.download = 'modelsoluation.zip';\n                b.href = url;\n                document.body.appendChild(b);\n                b.click();\n            });\n    }\n}\n\nfunction createGradingHints(temporary=false) {\n    let doc = document.implementation.createDocument(null, null, null);\n    let gh = doc.createElement(\"grading-hints\");\n    let root = doc.createElement(\"root\");\n    root.setAttribute('function', 'sum');\n    gh.appendChild(root);\n\n    TestWrapper.doOnAll(ui_test => {\n        let test = doc.createElement(\"test-ref\");\n        root.appendChild(test);\n        test.setAttribute('ref', ui_test.id);\n        test.setAttribute('weight', ui_test.weight);\n        let title = doc.createElement(\"title\");\n        title.innerHTML = ui_test.title;\n        test.appendChild(title);\n        let description = doc.createElement(\"description\");\n        description.innerHTML = ui_test.description;\n        test.appendChild(description);\n        let testtype = doc.createElement(\"test-type\");\n        testtype.innerHTML = ui_test.testtype;\n        test.appendChild(testtype);\n    });\n\n    console.log('create new grading hints');\n    const gradinghints = document.querySelector('input[name=\"gradinghints\"]');\n    if (!gradinghints) {\n        console.error('No gradinghints field found => ignore');\n        return;\n    }\n    let serializer = new XMLSerializer();\n    let result = serializer.serializeToString (gh);\n\n    if ((result.substring(0, 5) !== \"<?xml\")){\n        result = '<?xml version=\"1.0\"?>' + result;\n        // result = \"<?xml version='1.0' encoding='UTF-8'?>\" + result;\n    }\n    console.log(result);\n    if (!temporary) {\n        gradinghints.value = encodeURIComponent(result);\n    }\n    console.log('grading hints are finished');\n    return encodeURIComponent(result);\n}\n\nfunction uploadModelSolutionToServer() {\n    // Instead of using the current draftid and delete all files\n    // we use a new unused draftid.\n    const draftitemid = modelsolrepositoryparams['newitemid'];\n\n    // const draftitemid = document.querySelector(\"input[name='modelsol']\").value;\n    console.log('draftid for model sol is ' + draftitemid);\n\n    console.log('now let us model solution in Moodle server');\n\n    function uploadFile(formData) {\n        const url = Config.wwwroot + '/repository/repository_ajax.php';\n        const action = 'upload';\n\n        let request = new XMLHttpRequest();\n        request.open('POST', url + '?action=' + action, false);\n        console.log('send');\n        try {\n            request.send(formData);\n            if (request.status !== 200) {\n                alert(`Error ${request.status}: ${request.statusText}`);\n            } else {\n                console.log(request.response);\n            }\n        } catch(err) { // instead of onerror\n            alert(\"Request failed\");\n        }\n        console.log('parse repsonse');\n        const jsonResponse = JSON.parse(request.responseText);\n        console.log('response from Moodle');\n        console.log(jsonResponse);\n        if (jsonResponse.error !== undefined) {\n            console.error(request.responseText);\n            alert(jsonResponse.error);\n        }\n    }\n\n    // write model solutions\n    ModelSolutionWrapper.doOnAll(function(ms) {\n        let modelSolution = new TaskModelSolution();\n        modelSolution.id = ms.id;\n        let counter = 0;\n        console.log('MS id is ' + ms.id);\n        ModelSolutionFileReference.getInstance().doOnAll(function(id) {\n            modelSolution.filerefs[counter++] = new TaskFileRef(id);\n            console.log('MS Fileref is ' + id);\n            let file = FileWrapper.constructFromId(id);\n            console.log('filename is ' + fileStorages[id].filename);\n            const formData = new FormData();\n            console.log(fileStorages);\n            formData.append('sesskey', Config.sesskey);\n            formData.append('client_id', modelsolrepositoryparams['client_id']);\n            formData.append('overwrite', true);\n            formData.append('repo_id', modelsolrepositoryparams['repo_id']);\n            formData.append('itemid', draftitemid);\n            let filename = fileStorages[id].filename.split(\"/\").pop();\n            let length = fileStorages[id].filename.length - filename.length;\n            let filepath = fileStorages[id].filename.substring(0, length);\n            formData.append('title', filename);\n            if (fileStorages[id].isBinary) {\n                let blob = new Blob([fileStorages[id].content], { type : fileStorages[id].mimetype });\n                // console.log(blob);\n                formData.append('repo_upload_file', blob);\n            } else {\n                let content = file.text;\n                // console.log('Content is ' + content);\n                formData.append('repo_upload_file', new Blob([content], { type : 'plain/text' }));\n            }\n            formData.append('filepath', '/');\n            formData.append('savepath', filepath);\n            console.log(formData);\n            uploadFile(formData);\n        }, ms.root);\n    })\n\n    // set draftitemid to new value\n    document.querySelector(\"input[name='modelsol']\").value = draftitemid;\n\n}\n\nasync function createModelSolutionZip() {\n    const zipFileWriter = new zip.BlobWriter(\"application/zip\");\n    const zipWriter = new zip.ZipWriter(zipFileWriter);\n\n    // create zipfile with model solutions\n    ModelSolutionWrapper.doOnAll(function(ms) {\n        let modelSolution = new TaskModelSolution();\n        modelSolution.id = ms.id;\n        // console.log('MS id is ' + ms.id);\n        ModelSolutionFileReference.getInstance().doOnAll(async function(id) {\n            const filename = fileStorages[id].filename;\n            // console.log('filename is ' + filename);\n            let content = null;\n            if (fileStorages[id].isBinary) {\n                // console.log('binary');\n                content = new Blob([fileStorages[id].content]);\n            } else {\n                // console.log('non binary');\n                let file = FileWrapper.constructFromId(id);\n                content = new Blob([file.text], { type : 'plain/text' });\n                // formData.append('repo_upload_file', new Blob([content], { type : 'plain/text' }));\n            }\n            // console.log('Content is ' + content);\n            await zipWriter.add(filename, new zip.BlobReader(content));\n        }, ms.root);\n    })\n    // console.log('wait for close');\n    await zipWriter.close();\n    // console.log('return content');\n    return zipFileWriter.getData();\n}\n\n/**\n * send task with model solution and grading hints to Moodle server in order let\n * the task run on grader. The result is shown in extra div element.\n *\n * @param buttonid\n * @param containerid\n */\nexport function checkModelsolution(buttonid, containerid) {\n    let button = document.getElementById(buttonid);\n    let container = document.getElementById(containerid);\n    let blobtask;\n    let defaultcursor = container.style.cursor;\n\n    let htmlFeedback = '';\n    let feedbackstarted = false;\n\n    function onFeedbackStart() {\n        container.style.display = '';\n        container.style.cursor = defaultcursor;\n        htmlFeedback = '';\n        feedbackstarted = true;\n    }\n    function onFeedbackData(text) {\n        if (feedbackstarted) {\n            htmlFeedback += text + '\\n';\n        } else {\n            htmlFeedback += text + '<br>';\n        }\n    }\n    function onFeedbackEnd() {\n        container.innerHTML = htmlFeedback;\n        document.querySelectorAll('#check-feedback-id .collapsibleregion')\n            .forEach(element => {\n                console.log('create collapsible region for ' + element.id);\n                M.util.init_collapsible_region(Y, element.id, '', 'EIN VERSUCH IST ES WERT');\n            });\n    }\n\n    button.onclick = function (e) {\n        e.preventDefault();\n        // clean old check feedback\n        container.innerHTML = '...';\n        container.style.cursor = \"wait\";\n        feedbackstarted = false;\n\n        // create task zipfile\n        const taskxml = convertToXML();\n        if (taskxml != null) {\n            // if there is no taskxml then the input is invalid.\n            const gradinghints = createGradingHints(true);\n            const aggstrategy = document.querySelector(\"select[name='aggregationstrategy']\").value;\n            const proglang = document.getElementById(\"xml_programming-language\").value;\n            // Zip task\n            return zipme(taskxml, false)\n                .then(blob => {\n                    // Task is zipped => zip model solution\n                    // (could be made in parallel but makes code a bit more complex\n                    // so I do not do this)\n                    console.log('task zip created ');\n                    // blob is the zipped version of the whole task\n                    blobtask = blob;\n                    return createModelSolutionZip();\n                })\n                .then(modelsolutionzip => {\n                    // Model solution is zipped => send to Moodle server\n                    console.log('created model solution zip');\n                    const url = Config.wwwroot + '/question/type/proforma/checksolution_ajax.php';\n                    const questionId = document.querySelector(\"input[name='id']\").value;\n                    const formData = new FormData();\n                    formData.append('sesskey', Config.sesskey);\n                    formData.append('task', blobtask, 'task.zip');\n                    formData.append('modelsolution', modelsolutionzip, 'modelsolution.zip');\n                    formData.append('itemid', modelsolrepositoryparams['checkitemid']);\n                    formData.append('contextid', modelsolrepositoryparams['contextid']);\n                    // formData.append('questionid', questionId);\n                    formData.append('gradinghints', gradinghints);\n                    formData.append('proglang', proglang);\n                    formData.append('aggregationstrategy', aggstrategy);\n\n                    fetch(url, {\n                        method : \"POST\",\n                        body: formData,\n                    })\n                .then(response => {\n                    // Moodle server has received task with model solution\n                    // => convert to json\n                    console.log(response);\n                    return response.json()\n                })\n                .then(json => {\n                    // forward json to logmonitor.\n                    console.log(json);\n                    let url = Config.wwwroot + '/question/type/proforma/checksolution_ajax.php?runtest=1';\n                    url += '&sesskey=' + Config.sesskey +\n//                        '&questionid=' + questionId +\n                        '&itemid=' + json.itemid +\n                        '&contextid=' + json.contextid +\n                        '&taskfilename=' + json.taskfilename +\n                        '&proglang=' + json.proglang +\n                        '&aggregationstrategy=' + aggstrategy +\n                        '&modelsolutionfilename=' + json.modelsolutionfilename;\n\n                    logmonitor.show('checkmodelsollog', url, onFeedbackStart, onFeedbackData, onFeedbackEnd);\n                })\n                .catch(error => {\n                    console.log(error)\n                });\n                });\n        }\n    }\n}\n\n/**\n * Uploads currect task to Moodle server into the draft area prepared for the task\n * @returns {*}\n */\nfunction uploadTaskToServer() {\n\n    const context = convertToXML();\n    if (context) {\n        createGradingHints();\n        uploadModelSolutionToServer();\n\n        // Update values for UUID and proforma version in form input.\n        let uuid = document.querySelector(\"input[name='uuid']\");\n        if (!uuid) {\n            console.error('cannot find uuid element');\n        } else {\n            // The UUID is disabled and must be enabled in order to\n            // submit the changed value.\n            uuid.disabled = false;\n            uuid.value = generateUUID();\n        }\n        let proformaversion = document.querySelector(\"input[name='proformaversion']\");\n        if (!proformaversion) {\n            console.error('cannot find proformaversion element');\n        } else {\n            // The proformaversion is disabled and must be enabled in order to\n            // submit the changed value.\n            proformaversion.disabled = false;\n        }\n\n        return zipme(context, false)\n            .then(blobtask => {\n                console.log('now let us update task in  Moodle server: ' + draftitemid);\n                const url = Config.wwwroot + '/question/type/proforma/taskeditor_ajax.php';\n                const formData = new FormData();\n                formData.append('sesskey', Config.sesskey);\n                formData.append('task', blobtask, taskTitleToFilename());\n                // Use original itemid from task filemanager\n                const itemid = document.querySelector(\"#id_task\").value;\n                formData.append('itemid', itemid); // draftitemid);\n                formData.append('contextid', taskrepositoryparams['contextid']);\n\n                fetch(url, {\n                    method : \"POST\",\n                    body: formData,\n                })\n                    .then(response => {\n                        console.log(response);\n                        return response.json()\n                    })\n                    .then(json => {\n                        console.log(json);\n                    })\n                    .catch(error => {\n                        console.log(error)\n                    });\n\n            });\n\n        /*\n\n\n                const url = Config.wwwroot + '/repository/repository_ajax.php';\n                const action = 'upload';\n\n                const formData = new FormData();\n                formData.append('sesskey', Config.sesskey);\n                formData.append('repo_upload_file', blob);\n                formData.append('filepath', '/');\n                formData.append('client_id', taskrepositoryparams['client_id']);\n                if (draftfilename === null) {\n                    draftfilename = 'task.zip';\n                }\n                formData.append('title', taskTitleToFilename()); // draftfilename);\n                let questionId = document.querySelector(\"input[name='id']\").value;\n                // New question => .\n                if (questionId !== \"\") {\n                    formData.append('overwrite', true);\n                }\n                // formData.append('maxbytes', -1);\n                // since we are uploading the file to the 'draft area',\n                // there is no point in limiting the size of the file area.\n                // The draft area is used for all users.\n                // formData.append('areamaxbytes', this.options['areamaxbytes']);\n                formData.append('savepath', '/');\n                formData.append('repo_id', taskrepositoryparams['repo_id']);\n                formData.append('itemid', draftitemid);\n                let request = new XMLHttpRequest();\n                request.open('POST', url + '?action=' + action, false);\n                console.log('send');\n                try {\n                    request.send(formData);\n                    if (request.status !== 200) {\n                        alert(`Error ${request.status}: ${request.statusText}`);\n                    } else {\n                        console.log(request.response);\n                        // alert(request.response);\n                    }\n                } catch(err) { // instead of onerror\n                    alert(\"Request failed\");\n                }\n                console.log('parse repsonse');\n                const jsonResponse = JSON.parse(request.responseText);\n                console.log('response from Moodle');\n                console.log(jsonResponse);\n                if (jsonResponse.error !== undefined) {\n                    console.error(request.responseText);\n                    alert(jsonResponse.error);\n                }\n            });\n\n         */\n    }\n}\n\nexport function uploadTaskToGrader(buttonid) {\n    let button = document.getElementById(buttonid);\n    if (!button) {\n        console.error('invalid button id');\n        return;\n    }\n\n    button.onclick = function (e) {\n        e.preventDefault();\n        const context = convertToXML();\n        if (context) {\n            return zipme(context, false)\n                .then(blobtask => {\n                    console.log('now let us upload task to grader');\n                    const url = Config.wwwroot + '/question/type/proforma/taskeditor_ajax.php';\n                    // const questionId = document.querySelector(\"input[name='id']\").value;\n                    const formData = new FormData();\n                    formData.append('sesskey', Config.sesskey);\n                    formData.append('task', blobtask, 'task.zip');\n                    // Which itemid???\n                    // Modelsolution parameters contain new (unused) draftarea itemids.\n                    // checkitemid is used for temporary files used for checks.\n                    formData.append('itemid', modelsolrepositoryparams['checkitemid']);\n                    // Context id is sent to Moodle in order to perform security checks:\n                    formData.append('contextid', modelsolrepositoryparams['contextid']);\n                    // formData.append('questionid', questionId);\n\n                    fetch(url, {\n                        method : \"POST\",\n                        body: formData,\n                    })\n                .then(response => {\n                    // console.log(response);\n                    return response.json()\n                })\n                .then(json => {\n                    console.log(json);\n                    const questionId = document.querySelector(\"input[name='id']\").value;\n                    let url = Config.wwwroot + '/question/type/proforma/upload_sse.php';\n                    url += '?sesskey=' + Config.sesskey + '&id=' + questionId;\n                    if (json.itemid) {\n                        url += '&itemid=' + json.itemid + '&contextid=' + json.contextid + '&filename=' + json.filename;\n                    }\n\n                    logmonitor.show('uploadlog', url);\n                    // taskupload.upload(null, json.itemid, json.contextid, json.filename);\n                })\n                .catch(error => {\n                    console.log(error)\n                });\n\n                });\n        }\n    }\n}\n\nexport const savetask = (buttonid) => {\n    let button = document.getElementById(buttonid);\n    button.onclick = function (e) {\n        e.preventDefault();\n        uploadTaskToServer();\n    }\n}\n\n"],"names":["buttonid","containerid","blobtask","button","document","getElementById","container","defaultcursor","style","cursor","htmlFeedback","feedbackstarted","onFeedbackStart","display","onFeedbackData","text","onFeedbackEnd","innerHTML","querySelectorAll","forEach","element","console","log","id","M","util","init_collapsible_region","Y","onclick","e","preventDefault","taskxml","gradinghints","createGradingHints","aggstrategy","querySelector","value","proglang","then","blob","createModelSolutionZip","modelsolutionzip","url","Config","wwwroot","formData","FormData","append","sesskey","modelsolrepositoryparams","fetch","method","body","response","json","itemid","contextid","taskfilename","modelsolutionfilename","logmonitor","show","catch","error","context","taskrepoparams","msrepoparams","inline","mergeWithGradingHints","count","length","i","testid","testweight","testtitle","testdescription","testtype","ref","ui_test","TestWrapper","constructFromId","weight","title","description","alert","item","t1","performance","now","t0","updateEnvironment","uuid","proformaversion","header","getAttribute","click","updatebutton","realUpdateClick","event","uploadTaskToServer","submitbutton","realSubmitClick","showTaskeditor","draftitemid","createFromTemplate","fileurl","decodeURIComponent","split","reverse","reject","Error","taskresponse","Promise","resolve","displayTaskdata","fail","Notification","exception","taskrepositoryparams","questionId","taskeditorRequested","taskeditorconfig","initStrings","addEventListener","filename","selectElem","version","option","createElement","add","proglangdiv","buttondiv","langselect","langselectelem","lang","onchange","versionElement","disabled","options","infoJavaJUnit","createTestForm","infoCheckStyle","infoJavaComp","infoGoogleTest","infoCUnit","infoPython","infoPythonDoctest","temporary","doc","implementation","createDocument","gh","root","setAttribute","appendChild","doOnAll","test","result","XMLSerializer","serializeToString","substring","encodeURIComponent","uploadModelSolutionToServer","ms","modelSolution","TaskModelSolution","counter","getInstance","filerefs","TaskFileRef","file","FileWrapper","fileStorages","pop","filepath","isBinary","Blob","content","type","mimetype","request","XMLHttpRequest","open","send","status","statusText","err","jsonResponse","JSON","parse","responseText","undefined","uploadFile","zipFileWriter","zip","BlobWriter","zipWriter","ZipWriter","async","BlobReader","close","getData","zippedBlob","window","URL","createObjectURL","b","download","href"],"mappings":"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"}