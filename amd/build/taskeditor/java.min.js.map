{"version":3,"file":"java.min.js","sources":["../../src/taskeditor/java.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Helper functions for zipping and unzipping task\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     // This file is part of ProFormA Question Type for Moodle\n //\n // ProFormA Question Type for Moodle is free software:\n // you can redistribute it and/or modify\n // it under the terms of the GNU General Public License as published by\n // the Free Software Foundation, either version 3 of the License, or\n // (at your option) any later version.\n //\n // ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n //\n // You should have received a copy of the GNU General Public License\n // along with ProFormA Question Type for Moodle.\n // If not, see <http://www.gnu.org/licenses/>.\n\n /**\n * contains functions and data relevant for handling java tests\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     eCULT-Team of Ostfalia University, K.Borm\n */\n\nexport var javaParser = (function() {\n\n    // expose to public\n    return {\n        codeWithoutComment: codeWithoutComment,\n        getClassAndPackage: getClassAndPackage,\n        getFilenameWithPackage: getFilenameWithPackage,\n        getPureClassnameFromFilename: getPureClassnameFromFilename,\n        getFullClassnameFromFilename: getFullClassnameFromFilename\n    }\n\n    // all private\n\n    function codeWithoutComment(code) {\n        let newCode = code.replace(/\\/\\*[\\s\\S]*?\\*\\//gm, \"\"); // comment with /* */\n        return newCode.replace(/\\/\\/.*/g, \"\"); // comment with //\n    }\n\n    /*\n      function searches given text string (source code) for the classname and\n      a package name. At first all comment lines are removed in order to avoid\n      delivering data written in comment.\n     */\n    function getClassAndPackage(code) {\n        function getPackageName(code) {\n            const javapackage = code.match(/package([\\s\\S]*?);/);\n            if (!javapackage) return \"\";\n            switch (javapackage.length) {\n                case 0:  return \"\"; // no package found\n                case 1:  return javapackage[0]; // unclear what it is, deliver everything\n                default: return javapackage[1].trim(); // found, expect package name as 2nd\n            }\n        }\n\n        function getClasseName(code) {\n            //const className = code.match(\"\\\\s*(public|private)\\\\s+class\\\\((s+)*?)(\\\\w+)\\\\s+((extends\\\\s+\\\\w+)|(implements\\\\s+\\\\w+( ,\\\\w+)*))?\\\\s*\\\\{\");\n\n            //const className = code.match(/\\s*(|public|private)\\s+class([\\s\\S]*?)(\\{|extends|implements)/);\n            //const className = code.match(/\\s*(public|private)\\s+class([\\s\\S]*?)(\\{|extends|implements)/);\n            const className = code.match(/class\\s+([\\S]+?)\\s*(\\{|extends|implements)/); //interface??\n            if (!className) return \"\";\n            switch (className.length) {\n                case 0:  return \"\"; // no className found???\n                case 1:  return className[0]; // unclear what it is, deliver everything\n                default: return className[1].trim(); // found, expect className name as 2nd\n            }\n        }\n\n        // preset return value\n        let out = { class:\"?\", package:\"?\" };\n        const pureCode = codeWithoutComment(code);\n        out.class = getClasseName(pureCode);\n        out.package = getPackageName(pureCode);\n        return out;\n    }\n\n\n    function getFilenameWithPackage(code, filename) {\n        let out = getClassAndPackage(code);\n        //const className = filename.match(/([\\S]*?)(.java)/i);\n        let newFilename = \"\";\n        const javapackage = out.package.replace(/\\./g, \"/\");\n\n        if (out.class.length > 0) {\n            classname = out.class.trim();\n            if (classname.endsWith('>')) {\n                classname = classname.substr(0, classname.indexOf('<'))\n            }\n            filename = classname + \".java\";\n        } else {\n            // no class name found (e.g. enum, interface ...)\n            // if filename starts with package then remove package\n            if (javapackage.length > 0 && filename.startsWith(javapackage)) {\n                filename = filename.substr(javapackage.length + 1);\n            }\n        }\n\n        if (javapackage.length > 0)\n            newFilename = javapackage + \"/\" + filename; // out.class + \".java\";\n        else\n            newFilename = filename; // out.class + \".java\";\n        return newFilename;\n    }\n\n    function getPureClassnameFromFilename(filename) {\n        let newFilename = filename.replace(/.java/i, \"\");\n        const index =  newFilename.indexOf(\"/\");\n        if (index > 0) {\n            newFilename = newFilename.substring(index+1);\n        }\n        return newFilename;\n    }\n\n    function getFullClassnameFromFilename(filename) {\n        // replace / by .\n        let newFilename = filename.replace(/\\//g, \".\");\n        // remove .java\n        newFilename = newFilename.replace(/.java/i, \"\");\n        return newFilename;\n    }\n})();\n\n\n\n\n\n\n\n\n\n"],"names":["javaParser","codeWithoutComment","getClassAndPackage","getFilenameWithPackage","code","filename","out","newFilename","javapackage","package","replace","class","length","classname","trim","endsWith","substr","indexOf","startsWith","getPureClassnameFromFilename","index","substring","getFullClassnameFromFilename","pureCode","className","match","getClasseName","getPackageName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmDWA,WAAc,iBAGd,CACHC,mBAAoBA,mBACpBC,mBAAoBA,mBACpBC,gCAmD4BC,KAAMC,cAC9BC,IAAMJ,mBAAmBE,MAEzBG,YAAc,SACZC,YAAcF,IAAIG,QAAQC,QAAQ,MAAO,KAE3CJ,IAAIK,MAAMC,OAAS,GACnBC,UAAYP,IAAIK,MAAMG,OAClBD,UAAUE,SAAS,OACnBF,UAAYA,UAAUG,OAAO,EAAGH,UAAUI,QAAQ,OAEtDZ,SAAWQ,UAAY,SAInBL,YAAYI,OAAS,GAAKP,SAASa,WAAWV,eAC9CH,SAAWA,SAASW,OAAOR,YAAYI,OAAS,IAKpDL,YADAC,YAAYI,OAAS,EACPJ,YAAc,IAAMH,SAEpBA,gBACXE,aA1EPY,sCA6EkCd,cAC9BE,YAAcF,SAASK,QAAQ,SAAU,UACvCU,MAASb,YAAYU,QAAQ,KAC/BG,MAAQ,IACRb,YAAcA,YAAYc,UAAUD,MAAM,WAEvCb,aAlFPe,sCAqFkCjB,cAE9BE,YAAcF,SAASK,QAAQ,MAAO,YAE1CH,YAAcA,YAAYG,QAAQ,SAAU,IACrCH,uBArFFN,mBAAmBG,aACVA,KAAKM,QAAQ,qBAAsB,IAClCA,QAAQ,UAAW,aAQ7BR,mBAAmBE,UA0BpBE,IAAM,CAAEK,MAAM,IAAKF,QAAQ,WACzBc,SAAWtB,mBAAmBG,aACpCE,IAAIK,eAjBmBP,YAKboB,UAAYpB,KAAKqB,MAAM,kDACxBD,UAAW,MAAO,UACfA,UAAUZ,aACT,QAAW,QACX,SAAWY,UAAU,kBACVA,UAAU,GAAGV,QAOzBY,CAAcH,UAC1BjB,IAAIG,iBA5BoBL,YACdI,YAAcJ,KAAKqB,MAAM,0BAC1BjB,YAAa,MAAO,UACjBA,YAAYI,aACX,QAAW,QACX,SAAWJ,YAAY,kBACZA,YAAY,GAAGM,QAsBzBa,CAAeJ,UACtBjB,KArDU"}