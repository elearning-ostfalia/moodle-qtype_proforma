{"version":3,"file":"file.min.js","sources":["../../src/taskeditor/file.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Helper functions for zipping and unzipping task\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     // This file is part of ProFormA Question Type for Moodle\n //\n // ProFormA Question Type for Moodle is free software:\n // you can redistribute it and/or modify\n // it under the terms of the GNU General Public License as published by\n // the Free Software Foundation, either version 3 of the License, or\n // (at your option) any later version.\n //\n // ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n //\n // You should have received a copy of the GNU General Public License\n // along with ProFormA Question Type for Moodle.\n // If not, see <http://www.gnu.org/licenses/>.\n\n /**\n * Classes for dealing with files\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     eCULT-Team of Ostfalia University, K.Borm, Dr.U.Priss\n */\n\nimport $ from 'jquery';\nimport {setcounter, DEBUG_MODE, getExtension} from \"./util\";\nimport * as taskeditorconfig from \"./config\";\nimport {javaParser} from \"./java\";\nimport {FileReferenceList} from \"./filereflist\";\nimport Templates from 'core/templates';\nimport * as CodeMirror from '../codemirror';\nimport Notification, {exception as displayException} from 'core/notification';\nimport '../clike';\nimport '../python';\nimport '../xml';\nimport * as Str from 'core/str';\n\nexport var fileStorages = [];\nexport var fileIDs = {};\nexport var codemirror = {};\n\n\n\n// todo: merge with FileWrapper\nexport class FileStorage {\n\n    constructor(isBinary, mimetype, content, filename) {\n        this.isBinary = isBinary;\n        this.mimetype = mimetype;\n        this.content = content;\n        this.originalFilename = this.filename = filename;\n        this.storeAsFile = isBinary;\n        this.byZipper=false;\n    }\n\n    setSize(size) {\n        this.size = size;\n    }\n\n    setZipperFlag() {\n        this.byZipper=true;\n    }\n}\n\n\n// class for simpler access to file members from user interface\n// todo: store 'data' in variables not in html\n// => store data in html only in setter\nexport class FileWrapper {\n\n    static uploadFileWhenDropped(files, fileBox){\n        if (files.length > 1) {\n            alert('You have dragged more than one file. You must drop exactly one file!');\n            return;\n        }\n        const fileId= $(fileBox).find(\".xml_file_id\").val();\n        readAndCreateFileData(files[0], fileId);\n    }\n\n    static constructFromId(id) {\n        // this._id = id;\n        let file = new FileWrapper();\n        file._root = $(\"#file_\" + id);\n        //file._root = $(\".xml_file_id[value='\" + id + \"']\").closest(\".xml_file\");\n        if (file.root.length === 0)\n            return undefined; // no element with id found\n        return file;\n    }\n\n    static constructFromRoot(root) {\n        let file = new FileWrapper();\n        file._root = root;\n        return file;\n    }\n\n    static constructFromFilename(filename) {\n        let file = new FileWrapper();\n        $.each($(\".xml_file_filename\"), function(index, item) {\n            if (filename === item.value ) {\n                file._root = $(item).first().parent();\n            }\n        });\n        if (!file._root) {\n            console.error('FileWrapper.constructFromFilename cannot find root for filename ' + filename);\n            return undefined;\n        }\n        return file;\n    }\n\n    getValue(member, xmlClass) {\n        if (!member) {\n            member = this.root.find(xmlClass).first();\n        }\n        return member.val();\n\n    }\n\n    // getter\n    get root() { return this._root; }\n    get id() { return this.getValue(this._id,\".xml_file_id\" ); }\n    get filename() { return this.getValue(this._filename,\".xml_file_filename\" ); }\n//    get class() { return this.getValue(this._class,\".xml_file_class\" ); }\n    get type() { return this.getValue(this._type,\".xml_file_type\" ); }\n    get comment() { return this.getValue(this._comment,\".xml_internal_description\" ); }\n    get mimetype() { return fileStorages[this.id].mimetype; }\n    get isBinary() { return fileStorages[this.id].isBinary; }\n    get storeAsFile() { return fileStorages[this.id].storeAsFile; }\n    get content() { return fileStorages[this.id].content; }\n    get size() {\n        if (this.isBinary)\n            return fileStorages[this.id].size;\n        else {\n            return this.text.length;\n        }\n    }\n    get originalFilename() { return fileStorages[this.id].originalFilename; }\n//    get isLibrary() { return this.root.find(\".file_library\")[0].checked;}\n\n\n    get text() {\n        if (taskeditorconfig.useCodemirror) {\n            return codemirror[this.id].getValue();\n        } else {\n            return this._root.find(\".xml_file_text\").val();\n        }\n    }\n\n    // setter\n    set text(newText) {\n        if (taskeditorconfig.useCodemirror) {\n            codemirror[this.id].setValue(newText);\n            const fileObject = fileStorages[this.id];\n//            console.log('Codemirror modes and mimetypes');\n//            console.log(CodeMirror.modes);\n//            console.log(CodeMirror.mimeModes);\n\n//            console.log('Set CodeMirror-Mode: mimetype ' + fileObject.mimetype + ' => ' + this.getCodemirrorMode());\n            codemirror[this.id].setOption(\"mode\", this.getCodemirrorMode());\n//            let editor = codemirror[this.id];\n//             editor.refresh();\n        } else {\n            this._root.find(\".xml_file_text\").val(newText);\n        }\n    }\n\n    set filename(name) {\n        if (!this._filename) {\n            this._filename = this.root.find(\".xml_file_filename\").first();\n        }\n        this._filename.val(name);\n        this.filenameHeader = name;\n        // this._root.find(\".xml_filename_header\").first().text(name);\n        fileStorages[this.id].filename = name;\n        if (taskeditorconfig.useCodemirror) {\n            // Change mode depending on filename\n            console.log('change mode depending on new filename');\n            codemirror[this.id].setOption(\"mode\", this.getCodemirrorMode());\n        }\n        // FileWrapper.onFilenameChanged(); // this); // TODO check for endless recursion!!\n        // update filenames in all file references\n        FileReferenceList.updateAllFilenameLists(this.id, name);\n    }\n\n    set filenameHeader(name) {\n        // this._root.find(\".xml_filename_header\").first().text(name);\n    }\n\n/*    set class(newClass) {\n        this._root.find(\".xml_file_class\").val(newClass);\n    }\n*/\n\n    set comment(newComment) {\n        this._root.find(\".xml_internal_description\").val(newComment);\n    }\n\n    set type(newType) {\n        const oldType = this.type;\n        if (!this._type) {\n            this._type = this.root.find(\".xml_file_type\").first();\n        }\n\n        this._type.val(newType);\n        if (this.isBinary) {\n            // type is set for the first type, then\n            this._type.attr('disabled', newType === 'file');\n        }\n\n        switch (newType) {\n            case 'file':\n                this.root.find(\".xml_file_binary\").show(); // show binary text\n                this.root.find(\".xml_file_non_binary\").hide(); // hide editor\n                let xml_file_size = this.root.find(\".xml_file_size\");\n                let filesize = this.size;\n                if (filesize)\n                    filesize = filesize.toLocaleString();\n                else\n                    filesize = '???';\n\n                xml_file_size.first().text('File size: ' + filesize + \", \" +\n                    'File type: ' + this.mimetype);\n//                xml_file_size.first().text('File size: ' + this.size.toLocaleString() + \", \" +\n//                    'File type: ' + this.mimetype);\n                break;\n            case 'embedded':\n                this.root.find(\".xml_file_binary\").hide(); // hide binary text\n                this.root.find(\".xml_file_non_binary\").show(); // show editor\n                break;\n        }\n    }\n\n    set content(binaryFileContent) { fileStorages[this.id].content = binaryFileContent; }\n    set mimetype(mimetype) { fileStorages[this.id].mimetype = mimetype; }\n    set storeAsFile(storeAsFile) { fileStorages[this.id].storeAsFile = storeAsFile; }\n    set originalFilename(filename) { fileStorages[this.id].originalFilename = filename; }\n    set size(size) { fileStorages[this.id].size = size; }\n    set isBinary(isBinary) {\n        fileStorages[this.id].isBinary = isBinary;\n        if (isBinary) console.log('set binary=true for ' + this.filename);\n    }\n//    set isLibrary(isLib) {this.root.find(\".file_library\")[0].checked = isLib;}\n\n/*    disableTypeChange() {\n        if (!this._type) {\n            this._type = this.root.find(\".xml_file_type\").first();\n        }\n        this._type.attr('disabled', true);\n    }\n*/\n    // other functions\n    delete() {\n        this.root.remove();\n        delete fileIDs[this.id];\n        FileReferenceList.updateAllFilenameLists(this.id);\n    }\n\n    getCodemirrorMode() {\n        switch(getExtension(this.filename)) {\n            case \"java\":   return \"text/x-java\";\n            case \"py\": return \"text/x-python\";\n            case \"setlx\":  return \"text/text\";\n            case \"c\":      return \"text/x-csrc\";\n            case \"h\":      return \"text/x-csrc\";\n            case \"cpp\":    return \"text/x-c++src\";\n            case \"hpp\":    return \"text/x-c++src\";\n            case \"xml\":    return \"application/xml\";\n            case \"html\":    return \"text/html\";\n            case \"sql\":    return \"text/x-sql\";\n            case \"php\":    return \"text/x-php\";\n            case \"js\":     return \"text/javascript\";\n            case \"kt\":     return \"text/java\";\n            case \"css\":     return \"text/css\";\n        }\n        return \"\";\n    }\n\n    static onFilenameChanged(ui_file) {\n        // console.log('onFilenameChanged');\n        // after change of filename update all filelists\n\n        let changedId;\n        if (ui_file) {\n            // (the user has changed the filename in the filename input field)\n            //ui_file.filenameHeader = ui_file.filename;\n\n            // if the user has changed the filename and the extension is .java\n            // then the filename is recalculated on base of the source code (package class)\n            // and checked against user filename\n            if (getExtension(ui_file.filename) === 'java') {\n                // let filebox = $(textbox).closest(\".xml_file\");\n                let text = ui_file.text; // \"\";\n                const actualFilename = ui_file.filename;\n                const expectedFilename = javaParser.getFilenameWithPackage(text, actualFilename);\n                if (expectedFilename !== actualFilename && expectedFilename !== \".java\") {\n                    Str.get_string('changejavafilename', 'qtype_proforma', expectedFilename)\n                        .then(localtext => {\n                            if (confirm(localtext)) {\n                                ui_file.filename = expectedFilename;\n                            }\n                        });\n                }\n            }\n            ui_file.filenameHeader = ui_file.filename;\n            changedId = ui_file.id;\n            if (taskeditorconfig.useCodemirror) {\n                // Change mode depending on filename\n                // console.log('change mode depending on new filename');\n                codemirror[ui_file.id].setOption(\"mode\", ui_file.getCodemirrorMode());\n            }\n        }\n\n        // update filenames in all file references\n        FileReferenceList.updateAllFilenameLists(changedId, ui_file.filename);\n    };\n\n\n    static doesFilenameExist(filename) {\n        let found = false;\n        $.each($(\".xml_file_filename\"), function(index, item) {\n            if (item.value === filename) {\n                found = true;\n                return false;\n            }\n        });\n\n        return found;\n    }\n\n/*\n    static onReadFile(inputbutton) {             // read a file and its filename into the HTML form\n        let filenew = inputbutton.files[0];\n        const fileId = $(inputbutton).closest('.xml_file').find(\".xml_file_id\").val();\n        readAndCreateFileData(filenew, fileId);\n    }\n*/\n\n    /*\n    static onReadAndCreateFile(inputbutton) {             // read a file and create a new file item\n        let filenew = inputbutton.files[0];\n        let ui_file = FileWrapper.create();\n        readAndCreateFileData(filenew, ui_file.id);\n    }*/\n\n\n    static removeFile(button) {                                       // ask before removing\n        // console.log('remove file');\n        // let root = button.parent().parent().parent(); // arrgh!\n        let ui_file = FileWrapper.constructFromRoot(button.closest('.xml_file')/*root*/);\n\n        let ok = false;\n        const filedata = {\n            'id': ui_file.id,\n            'filename': ui_file.filename\n        };\n        if (FileReferenceList.getCountFileIdReferenced(ui_file.id)) {\n            // if true: cancel or remove all filenames/filerefs from model solution and test\n            Str.get_string('confirmdeletefile1', 'qtype_proforma', filedata)\n                .then(localtext => {\n                    if (window.confirm(localtext)){\n                        ui_file.delete();\n                    }\n                });\n        } else {\n            Str.get_string('confirmdeletefile2', 'qtype_proforma', filedata)\n                .then(localtext => {\n                    if (window.confirm(localtext)){\n                        ui_file.delete();\n                    }\n                });\n        }\n    };\n\n\n\n    static showHideEditor(button, ui_file_no_button, show) {\n        let ui_file = undefined;\n        if (ui_file_no_button)\n            ui_file = ui_file_no_button;\n        else\n            ui_file = FileWrapper.constructFromRoot(button.closest('.xml_file'));\n\n        if (taskeditorconfig.useCodemirror) {\n            let editor = codemirror[ui_file.id];\n            if (show)\n                $(editor.getWrapperElement()).show();\n            else\n                $(editor.getWrapperElement()).hide();\n            editor.refresh();\n        } else {\n            if (show)\n                ui_file.root.find('.xml_file_text').show();\n            else\n                ui_file.root.find('.xml_file_text').hide();\n        }\n\n        if (show) {\n            ui_file.root.find('.xml_file_editor_close').show();\n            ui_file.root.find('.xml_file_edit').hide();\n        } else {\n            ui_file.root.find('.xml_file_editor_close').hide();\n            ui_file.root.find('.xml_file_edit').show();\n        }\n    }\n\n    static showEditor(button, ui_file_no_button) {\n        FileWrapper.showHideEditor(button, ui_file_no_button, true);\n    };\n\n    static hideEditor(button, ui_file_no_button) {\n        FileWrapper.showHideEditor(button, ui_file_no_button, false);\n    };\n\n\n    static doOnAllFiles(callback) {\n        // todo: iterate through all files in variable\n        $.each($(\".xml_file_id\"), function (indexOpt, item) {\n            // console.log('.xml_file_id');\n            // console.log(item);\n            let uifile = FileWrapper.constructFromId(item.value);\n            callback(uifile);\n        });\n    }\n\n/*\n    static onFileclassChanged(selectfield) {\n        const text = $(\"option:selected\", selectfield).text(); // selected text\n        alert('do not change if old value is template, instruction or library!!!');\n    }\n*/\n\n    static onFilenameChangedCallback(filenamebox) {\n        let ui_file = FileWrapper.constructFromRoot($(filenamebox).closest(\".xml_file\"));\n        FileWrapper.onFilenameChanged(ui_file);\n    }\n\n    static onFiletypeChanged(selectfield) {\n        // after change of filetype change binary\n\n        if (selectfield) {\n\n            // if the user has changed the filename and the extension is .java\n            // then the filename is recalculated on base of the source code (package class)\n            // and checked against user filename\n            //let filetype = $(selectfield).val();\n            //let fileroot = $(selectfield).closest(\".xml_file\");\n\n            let ui_file = FileWrapper.constructFromRoot($(selectfield).closest(\".xml_file\"));\n            const newtype = ui_file.type;\n            switch (newtype) { // filetype ) {\n                case 'file':\n                    const fileId = ui_file.id;\n                    const filename = ui_file.filename;\n                    const text = ui_file.text;\n\n                    if (!(\"TextEncoder\" in window))\n                        alert(\"Sorry, this browser does not support TextEncoder...\");\n                    let enc = new TextEncoder(\"utf-8\");\n\n                    // change filestore attributes\n                    let fileobject = fileStorages[fileId];\n                    if (!fileobject) {\n                        // create fileobject\n                        fileobject = new FileStorage(true, '', '', filename);\n                        fileStorages[fileId] = fileobject;\n                    }\n                    if (getExtension(fileobject.filename) !== getExtension(filename)) {\n                        fileobject.mimetype = ''; // delete mimetype if filename has changed\n                        fileobject.filename = filename;\n                    }\n                    fileobject.storeAsFile = true;\n                    fileobject.content =  enc.encode(text);\n                    fileobject.setSize(text.length);\n                    // showBinaryFile(file.root /*fileroot*/, fileobject);\n                    break;\n                case 'embedded':\n                    // showTextFile(file.root);\n                    break;\n            }\n            // force default handling for new file type\n            // (ok, that's not so pretty...)\n            ui_file.type = newtype;\n        }\n    };\n\n\n///////////////////////////////////////////////////////// utility functions\n    /* Codemirror is a library that provides more sophisticated editor support for textareas.\n     * Once it is turned on for a textarea, this textarea can no longer be accessed\n     * using normal DOM methods. Instead it must be accessed using codemirror methods.\n     * Currently codemirror is only used for xml_file_text.\n     * The global codemirror hash above uses the fileID to identify the codemirror element.\n     */\n    static addCodemirrorElement(cmID, langmode = \"text/x-java\") {                     // cmID is determined by setcounter(), starts at 1\n        // let textareaElem = FileWrapper.constructFromId(cmID).root.find(\".xml_file_text\")[0];\n        // console.log(textareaElem);\n        codemirror[cmID] = CodeMirror.fromTextArea(\n//            textareaElem, {\n            FileWrapper.constructFromId(cmID).root.find(\".xml_file_text\")[0],{\n                // todo: set mode depending on programming language resp. file extension\n                mode : langmode, indentUnit: 4, lineNumbers: true, matchBrackets: true, tabMode : \"shift\",\n                styleActiveLine: true, /*viewportMargin: Infinity, */autoCloseBrackets: true,\n//                theme: \"eclipse\", // Note: when theme is not found the language modes do not work!\n                dragDrop: false\n            });\n\n        let editor = codemirror[cmID];\n        $(editor.getWrapperElement()).resizable({\n            handles: 's', // only resize in north-south-direction\n            resize: function() {\n                editor.refresh();\n            }\n        });\n        editor.on(\"drop\",function(editor,e){\n            //uploadFileWhenDropped(e.originalEvent.dataTransfer.files, e.currentTarget);\n            console.log('codemirror drop: ' + e);\n        });\n    }\n\n    static createFromTemplate(id) {\n        let fileid = id;\n        if (!fileid) {\n            fileid = setcounter(fileIDs);    // adding a file for the test\n        } else {\n            // this means that it is created with a known id\n            // (from reading task.xml). So we need to keep the fileIDs in sync!\n            fileIDs[fileid] = 1;\n        }\n        let context = {\n            'fileid': fileid,\n            'filesize': '???'\n        };\n\n        return Templates.renderForPromise('qtype_proforma/taskeditor_file', context)\n            .then(({html, js}) => {\n                Templates.appendNodeContents('#proforma-files-section', html, js);\n                let ui_file = FileWrapper.constructFromId(fileid);\n                if (fileStorages[fileid] === undefined) {\n                    fileStorages[fileid] = new FileStorage(false, '', '', '');\n                }\n\n                // hide fields that exist only for technical reasons\n                ui_file.root.find(\".xml_file_binary\").hide(); // hide binary text\n                if (!DEBUG_MODE) {\n                    ui_file.root.find(\".xml_file_id\").hide();\n                    ui_file.root.find(\"label[for='xml_file_id']\").hide();\n                    ui_file.root.find(\".xml_file_class\").hide();\n                    ui_file.root.find(\"label[for='xml_file_class']\").hide();\n                }\n                // console.log('add file callbacks');\n                // add callbacks:\n                ui_file.root.find('button').first().on(\"click\",\n                    function (event) {\n                        event.preventDefault();\n                        FileWrapper.removeFile($(this));\n                    });\n                ui_file.root.find('.xml_file_filename').on(\"change\",\n                    function (event) {\n                        event.preventDefault();\n                        FileWrapper.onFilenameChangedCallback(this);\n                    });\n                ui_file.root.find('.xml_file_type').on(\"change\",\n                    function (event) {\n                        event.preventDefault();\n                        FileWrapper.onFiletypeChanged(this);\n                    });\n                ui_file.root.find('.xml_file_edit').on(\"click\",\n                    function (event) {\n                        event.preventDefault();\n                        FileWrapper.showEditor($(this));\n                    });\n                ui_file.root.find('.xml_file_editor_close').on(\"click\",\n                    function (event) {\n                        event.preventDefault();\n                        FileWrapper.hideEditor($(this));\n                    });\n\n                // enable drag & drop\n                ui_file.root.on({\n                    dragover: function (e) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        //e.dataTransfer.dropEffect = 'copy';\n                    },\n                    dragenter: function (e) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                    },\n                    drop: function (e) {\n                        if (e.originalEvent.dataTransfer) {\n                            if (e.originalEvent.dataTransfer.files.length) {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                /*UPLOAD FILES HERE*/\n                                FileWrapper.uploadFileWhenDropped(e.originalEvent.dataTransfer.files, e.currentTarget);\n                            }\n                        }\n                    }\n                });\n\n\n                FileWrapper.addCodemirrorElement(fileid, ui_file.getCodemirrorMode());\n\n                FileWrapper.hideEditor(undefined, ui_file);\n                return ui_file;\n            })\n            .catch((error) => {\n                displayException(error);\n            });\n    }\n}"],"names":["fileStorages","fileIDs","codemirror","FileStorage","constructor","isBinary","mimetype","content","filename","originalFilename","this","storeAsFile","byZipper","setSize","size","setZipperFlag","FileWrapper","files","fileBox","length","alert","fileId","find","val","readAndCreateFileData","id","file","_root","root","each","index","item","value","first","parent","console","error","getValue","member","xmlClass","_id","_filename","type","_type","comment","_comment","text","taskeditorconfig","useCodemirror","newText","setValue","setOption","getCodemirrorMode","name","filenameHeader","log","updateAllFilenameLists","newComment","newType","attr","show","hide","xml_file_size","filesize","toLocaleString","binaryFileContent","delete","remove","ui_file","changedId","actualFilename","expectedFilename","javaParser","getFilenameWithPackage","Str","get_string","then","localtext","confirm","found","button","constructFromRoot","closest","filedata","FileReferenceList","getCountFileIdReferenced","window","ui_file_no_button","editor","getWrapperElement","refresh","showHideEditor","callback","indexOpt","uifile","constructFromId","filenamebox","onFilenameChanged","selectfield","newtype","enc","TextEncoder","fileobject","encode","cmID","langmode","CodeMirror","fromTextArea","mode","indentUnit","lineNumbers","matchBrackets","tabMode","styleActiveLine","autoCloseBrackets","dragDrop","resizable","handles","resize","on","e","fileid","context","Templates","renderForPromise","_ref","html","js","appendNodeContents","undefined","DEBUG_MODE","event","preventDefault","removeFile","onFilenameChangedCallback","onFiletypeChanged","showEditor","hideEditor","dragover","stopPropagation","dragenter","drop","originalEvent","dataTransfer","uploadFileWhenDropped","currentTarget","addCodemirrorElement","catch"],"mappings":"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"}