{"version":3,"file":"modelsol.min.js","sources":["../../src/taskeditor/modelsol.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Helper functions for zipping and unzipping task\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     // This file is part of ProFormA Question Type for Moodle\n //\n // ProFormA Question Type for Moodle is free software:\n // you can redistribute it and/or modify\n // it under the terms of the GNU General Public License as published by\n // the Free Software Foundation, either version 3 of the License, or\n // (at your option) any later version.\n //\n // ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n //\n // You should have received a copy of the GNU General Public License\n // along with ProFormA Question Type for Moodle.\n // If not, see <http://www.gnu.org/licenses/>.\n\n /**\n * Helper functions for reading and writen task\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     eCULT-Team of Ostfalia University, K.Borm, Dr.U.Priss\n */\n\nimport {ModelSolutionFileReference, FileReferenceList} from './filereflist'\nimport {DEBUG_MODE, setcounter} from \"./util\";\nimport Templates from 'core/templates';\nimport {exception as displayException} from 'core/notification';\nimport * as Str from 'core/str';\n\nexport var modelSolIDs = {};\n\n// TODO : common base class with TestWrapper\nexport class ModelSolutionWrapper {\n\n    static constructFromRoot(root) {\n        let ms = new ModelSolutionWrapper();\n        ms._root = root;\n        return ms;\n    }\n\n    static constructFromId(id) {\n        // this._id = id;\n        let ms = new ModelSolutionWrapper();\n        ms._root = $(\"#modelsolution_\" + id);\n        if (ms.root.length === 0)\n            return undefined; // no element with id found\n        return ms;\n    }\n\n    getValue(member, xmlClass) {\n        if (!member) {\n            member = this.root.find(xmlClass).first();\n        }\n        return member.val();\n    }\n\n    // getter\n    get root() { return this._root; }\n    get id() { return this.getValue(this._id,\".xml_model-solution_id\" ); }\n    get comment() { return this.getValue(this._comment,\".xml_internal_description\"); }\n    get description() { return this.getValue(this._description,\".xml_description\" ); }\n\n    // setter\n    set comment(newComment) {\n        this._root.find(\".xml_internal_description\").val(newComment);\n    }\n    set description(newDescription) { this._root.find(\".xml_description\").val(newDescription); }\n\n\n    static doOnAll(callback) {\n        // todo: iterate through all modelsolutions in variable\n        $.each($(\".xml_model-solution_id\"), function (indexOpt, item) {\n            let modelsolution = ModelSolutionWrapper.constructFromId(item.value);\n            return callback(modelsolution);\n        });\n    }\n\n    delete() {\n        // iterate through all referenced files and remove the references\n        // => checks whether the file can be removed\n        FileReferenceList.doOnAllElements(this.root, function(fileref_element) {\n            let row = $(fileref_element).closest('tr');\n            row.find('.remove_item').first().click();\n        });\n\n        delete modelSolIDs[this.id];\n        this.root.remove();\n    }\n\n    static delete(button) {\n        if (document.querySelectorAll('.xml_model-solution').length == 1) {\n            window.alert('There must be at least one model solution');\n            return;\n        }\n        let instance = ModelSolutionWrapper.constructFromRoot(button.closest('.xml_model-solution'));\n        // remove instance\n        instance.delete();\n    }\n\n    static createFromTemplate(id, description, comment, item, task) {\n        if (!comment)\n            comment = '';\n        if (!description)\n            description = '';\n\n        let modelsolid = id;\n        if (!modelsolid) {\n            modelsolid = setcounter(modelSolIDs);    // adding a file for the test\n        } else {\n            // this means that it is created with a known id\n            // (from reading task.xml). So we nned to keep the modelSolIDs in sync!\n            modelSolIDs[modelsolid] = 1;\n        }\n\n        let strings = [\n            { key: 'taskeditorfiles', component: 'qtype_proforma' },\n            { key: 'comment', component: 'qtype_proforma' }\n        ];\n        return FileReferenceList.getLocalisedStrings()\n            .then(() => Str.get_strings(strings))\n            .then(results => {\n                let context = {\n                    'msid': modelsolid,\n                    'testtitle' : 'TODO Model Solution titel',\n                    'filenamelabel' : results[0],\n                    'description': description\n                };\n                return Templates.renderForPromise('qtype_proforma/taskeditor_modelsol', context);\n            })\n            .then(({html, js}) => {\n                // console.log('model sol template rendered');\n                Templates.appendNodeContents('#proforma-model-solution-section', html, js);\n                // console.log('model sol template appended');\n\n                // hide fields that exist only for technical reasons\n                const msroot = $(\"#modelsolution_\" + modelsolid);\n                let ms = ModelSolutionWrapper.constructFromRoot(msroot);\n\n                FileReferenceList.init(null, null, ModelSolutionFileReference, msroot);\n                // console.log('Add callbacks to fileref table in Modelsol ');\n                FileReferenceList.addCallbacks($(msroot)[0]);\n                // console.log('callback delete ms button');\n                msroot.find('button').first().on(\"click\",\n                    function(event) {\n                        event.preventDefault();\n                        ModelSolutionWrapper.delete($(this));\n                    });\n\n                if (!DEBUG_MODE) {\n                    // hide fields that exist only for technical reasons\n                    msroot.find(\".xml_model-solution_id\").hide();\n                    msroot.find(\"label[for='xml_model-solution_id']\").hide();\n                }\n\n                if (item) {\n                    // console.log('update filelist for model sol');\n                    let counter = 0;\n                    // console.log(item.filerefs);\n                    item.filerefs.forEach(function(itemFileref, indexFileref) {\n                        let filename = task.findFilenameForId(itemFileref.refid);\n                        let promiseFactories = [ModelSolutionFileReference.getInstance().setFilenameOnCreation(ms.root, counter++, filename)];\n                        Promise.all(promiseFactories)\n                            .then(() => {\n                                // console.log(\"promise completed\");\n                            })\n                    });\n                }\n            })\n            .catch((error) => { displayException(error); });\n    }\n}"],"names":["modelSolIDs","ModelSolutionWrapper","root","ms","_root","id","$","length","getValue","member","xmlClass","this","find","first","val","_id","comment","_comment","description","_description","newComment","newDescription","callback","each","indexOpt","item","modelsolution","constructFromId","value","delete","doOnAllElements","fileref_element","closest","click","remove","button","document","querySelectorAll","window","alert","constructFromRoot","task","modelsolid","strings","key","component","FileReferenceList","getLocalisedStrings","then","Str","get_strings","results","context","Templates","renderForPromise","_ref","html","js","appendNodeContents","msroot","init","ModelSolutionFileReference","addCallbacks","on","event","preventDefault","DEBUG_MODE","hide","counter","filerefs","forEach","itemFileref","indexFileref","filename","findFilenameForId","refid","promiseFactories","getInstance","setFilenameOnCreation","Promise","all","catch","error"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kmCAyDWA,YAAc,0CAGZC,8CAEgBC,UACjBC,GAAK,IAAIF,4BACbE,GAAGC,MAAQF,KACJC,0BAGYE,QAEfF,GAAK,IAAIF,wBACbE,GAAGC,MAAQE,EAAE,kBAAoBD,IACV,IAAnBF,GAAGD,KAAKK,cAELJ,GAGXK,SAASC,OAAQC,iBACRD,SACDA,OAASE,KAAKT,KAAKU,KAAKF,UAAUG,SAE/BJ,OAAOK,MAIdZ,kBAAgBS,KAAKP,MACrBC,gBAAcM,KAAKH,SAASG,KAAKI,IAAI,0BACrCC,qBAAmBL,KAAKH,SAASG,KAAKM,SAAS,6BAC/CC,yBAAuBP,KAAKH,SAASG,KAAKQ,aAAa,oBAGvDH,YAAQI,iBACHhB,MAAMQ,KAAK,6BAA6BE,IAAIM,YAEjDF,gBAAYG,qBAAuBjB,MAAMQ,KAAK,oBAAoBE,IAAIO,+BAG3DC,UAEXhB,EAAEiB,KAAKjB,EAAE,2BAA2B,SAAUkB,SAAUC,UAChDC,cAAgBzB,qBAAqB0B,gBAAgBF,KAAKG,cACvDN,SAASI,kBAIxBG,wCAGsBC,gBAAgBnB,KAAKT,MAAM,SAAS6B,iBACxCzB,EAAEyB,iBAAiBC,QAAQ,MACjCpB,KAAK,gBAAgBC,QAAQoB,kBAG9BjC,YAAYW,KAAKN,SACnBH,KAAKgC,uBAGAC,WACqD,GAA3DC,SAASC,iBAAiB,uBAAuB9B,mBACjD+B,OAAOC,MAAM,6CAGFtC,qBAAqBuC,kBAAkBL,OAAOH,QAAQ,wBAE5DH,mCAGaxB,GAAIa,YAAaF,QAASS,KAAMgB,MACjDzB,UACDA,QAAU,IACTE,cACDA,YAAc,QAEdwB,WAAarC,GACZqC,WAKD1C,YAAY0C,YAAc,EAJ1BA,YAAa,oBAAW1C,iBAOxB2C,QAAU,CACV,CAAEC,IAAK,kBAAmBC,UAAW,kBACrC,CAAED,IAAK,UAAWC,UAAW,0BAE1BC,+BAAkBC,sBACpBC,MAAK,IAAMC,IAAIC,YAAYP,WAC3BK,MAAKG,cACEC,QAAU,MACFV,qBACM,0CACIS,QAAQ,eACXjC,oBAEZmC,mBAAUC,iBAAiB,qCAAsCF,QAAxE,IAEHJ,MAAKO,WAACC,KAACA,KAADC,GAAOA,4BAEAC,mBAAmB,mCAAoCF,KAAMC,UAIjEE,OAASrD,EAAE,kBAAoBoC,gBACjCvC,GAAKF,qBAAqBuC,kBAAkBmB,0CAE9BC,KAAK,KAAM,KAAMC,wCAA4BF,uCAE7CG,aAAaxD,EAAEqD,QAAQ,IAEzCA,OAAO/C,KAAK,UAAUC,QAAQkD,GAAG,SAC7B,SAASC,OACLA,MAAMC,iBACNhE,qBAAqB4B,OAAOvB,EAAEK,UAGjCuD,mBAEDP,OAAO/C,KAAK,0BAA0BuD,OACtCR,OAAO/C,KAAK,sCAAsCuD,QAGlD1C,KAAM,KAEF2C,QAAU,EAEd3C,KAAK4C,SAASC,SAAQ,SAASC,YAAaC,kBACpCC,SAAWhC,KAAKiC,kBAAkBH,YAAYI,OAC9CC,iBAAmB,CAACf,wCAA2BgB,cAAcC,sBAAsB3E,GAAGD,KAAMkE,UAAWK,WAC3GM,QAAQC,IAAIJ,kBACP5B,MAAK,gBAMrBiC,OAAOC,oCAA6BA"}