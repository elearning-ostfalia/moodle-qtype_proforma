{"version":3,"file":"config.min.js","sources":["../../src/taskeditor/config.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n /**\n * Classes and functions for handling different test types\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     eCULT-Team of Ostfalia University, K.Borm (Dr.U.Priss)\n */\n\nimport {CustomTest} from \"./customtest\";\nimport * as Str from 'core/str';\n\n// const configXsdSchemaFile = version101;   // choose version for output\n/*\n    version101:\n        namespace = 'xmlns:'+pfix_unit+'=\"urn:proforma:tests:unittest:v1\" xmlns:'+pfix_prak+'=\"urn:proforma:praktomat:v0.2\" '\n            + 'xmlns=\"urn:proforma:task:v1.0.1\" xmlns:'+pfix_jart+'=\"urn:proforma:tests:jartest:v1\" ';\n*/\n\n\nexport const useCodemirror = true;         // setting this to false turns Codemirror off\n\nconst praktomatns     = \"urn:proforma:praktomat:v0.2\"; // for checkstyle in task 1.0.1\n//const jartestns       = \"urn:proforma:tests:jartest:v1\"; // for reading 1.0.1\nconst unittestns_old  = \"urn:proforma:tests:unittest:v1\";\nconst unittestns_new  = \"urn:proforma:tests:unittest:v1.1\";\nconst checkstylens    = \"urn:proforma:tests:java-checkstyle:v1.1\";\n\n// Localized strings\nlet gtest_help;\nlet cunittest_help;\nlet makerun_help;\nlet junit_help;\nlet junitentry_help;\nlet pythondoc_help;\n\n// -------------------------\n// TESTS\n// -------------------------\n// default grading weights\nconst weightCompilation = 0;\nconst weightStaticTest = 0.2;\n\nexport function initStrings() {\n    let strings = [\n        { key: 'gtest_help_short', component: 'qtype_proforma' },\n        { key: 'cunit_help_short', component: 'qtype_proforma' },\n        { key: 'makerun_help', component: 'qtype_proforma' },\n        { key: 'junit_help_short', component: 'qtype_proforma' },\n        { key: 'junitentry_help', component: 'qtype_proforma' },\n        { key: 'pythondoc_help', component: 'qtype_proforma' },\n    ];\n    return Str.get_strings(strings)\n        .then(results => {\n            // console.log('config strings are initialised');\n            gtest_help = results[0];\n            cunittest_help = results[1];\n            makerun_help = results[2];\n            junit_help = results[3];\n            junitentry_help = results[4];\n            pythondoc_help = results[5];\n\n            infoGoogleTest = new GoogleTest();\n            infoCUnit = new CUnitTest();\n            infoJavaJUnit = new JUnitTest();\n            infoPythonDoctest = new PythonDocTest();\n\n            testInfos = [\n                testJavaComp,\n                infoJavaJUnit,\n                infoGoogleTest,\n                infoCUnit,\n                testPython,\n                infoPythonDoctest,\n                /*        testSetlX, testSetlXSyntax,\n                        testCComp,*/\n                testCheckStyle\n            ];\n        });\n}\n\nexport function resolveNamespace(prefix, defaultns) {\n    // todo: find better solution to figure out if namespace is supported\n    switch (defaultns) {\n        case 'urn:proforma:task:v1.0.1':\n            switch (prefix) {\n                case 'unit':      return unittestns_old;\n                //case 'jartest':   return jartestns;\n                case 'praktomat': return praktomatns; // for checkstyle\n            }\n            return '';\n        case 'urn:proforma:v2.0':\n            switch (prefix) {\n                case 'unit':\n                    //unitNs = xmldoc.lookupNamespaceURI('unit');\n                    //if (unitNs.toString() !== unittestns_new)\n                    //    alert('unit namespace is not supported in ProFormA version 2.0: ' + xmldoc.lookupNamespaceURI('unit'));\n                    return unittestns_new;\n                case 'cs': return checkstylens;\n            }\n            return '';\n        default:\n            return 'unsupported namespace'\n    }\n}\n\n//    function writeNamespaces(task) {\n        //task.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:jartest', jartestns);\n        //task.setAttributeNS('http://www.w3.org/2000/xmlns/', 'xmlns:praktomat', praktomatns);\n/*\n        task.setAttributeNS('http://www.w3.org/2000/xmlns/', \"xmlns:unit\", unittestns_new);\n        task.setAttributeNS('http://www.w3.org/2000/xmlns/', \"xmlns:cs\", checkstylens);\n*/\n//    }\n\n\n\n    function writeXmlExtra(metaDataNode, xmlDoc, xmlWriter) {\n        //xmlWriter.createTextElement(metaDataNode, 'praktomat:allowed-upload-filename-mimetypes', '(text/.*)', praktomatns);\n    }\n\n/*\n    readXml(xmlfile) {\n        let xmlReader = new XmlReader(xmlfile);\n        switch (xmlReader.defaultns) {\n            case 'urn:proforma:task:v1.0.1': return this.readXmlVersion101(xmlfile);\n            case 'urn:proforma:v2.0': return this.readXmlVersion2(xmlfile);\n            default:\n                setErrorMessage(\"Unsupported ProFormA version \" + xmlReader.defaultns);\n        }\n    }\n*/\n\n\n\n    // Test classes\n    class JavaCompilerTest extends CustomTest {\n        constructor() {\n            super(\"Compiler Test\", \"java-compilation\");\n            this.gradingWeight = weightCompilation;\n            this.manadatoryFile = false;\n        }\n    }\n\n    class PythonUnittest extends CustomTest {\n        constructor() {\n            super(\"Python Unittest\", \"unittest\", \"qtype_proforma/taskeditor_test\", ['python']);\n        }\n    }\n\n    class GeneralUnitTest extends CustomTest  {\n        withRunCommand = true;\n        constructor(title, proglang, framework,\n                    template = \"qtype_proforma/taskeditor_unittest\",\n                    withRunCommand = true) {\n            super(title, \"unittest\", template, proglang);\n            this.framework = framework;\n            this.withRunCommand = withRunCommand;\n        }\n\n        onReadXml(test, xmlReader, testConfigNode, context) {\n            let unitNode = xmlReader.readSingleNode(\"unit:unittest\", testConfigNode);\n            if (!unitNode)\n                throw new Error('XML: Test \"' + this.title + '\": subelement unit:unittest not found in unittest or unittest namespace invalid');\n\n            if (unitNode.namespaceURI !== unittestns_new) {\n                throw new Error('XML: Test \"' + this.title + '\": unsupported namespace ' + xmlReader.defaultns + ' in unit test');\n            }\n            if (this.withRunCommand) {\n                context['entrypoint'] = xmlReader.readSingleText(\"unit:entry-point\", unitNode);\n                if (context['entrypoint'].trim() === '') {\n                    throw new Error('XML: Test \"' + this.title + '\": run command is missing');\n                }\n            }\n\n            let framework = xmlReader.readSingleText(\"@framework\", unitNode);\n            if (this.framework) {\n                // Override if subclass has defined it\n                framework = this.framework;\n            }\n            const version = xmlReader.readSingleText(\"@version\", unitNode);\n            if (version && version !== 'undefined' && version.trim() !== '') {\n                context['framework_version'] = {\n                    \"selected\": true,\n                    \"value\": version,\n                    \"name\": version\n                };\n            }\n            context['framework'] = framework;\n        }\n\n        onWriteXml(test, testConfigNode, xmlDoc, xmlWriter, task) {\n            let root = test.uiElement.root;\n            task.setAttributeNS('http://www.w3.org/2000/xmlns/', \"xmlns:unit\", unittestns_new);\n\n            let unittestNode = xmlDoc.createElementNS(unittestns_new, \"unit:unittest\");\n            testConfigNode.appendChild(unittestNode);\n\n            if (this.withRunCommand) {\n                xmlWriter.createTextElement(unittestNode, 'unit:entry-point',\n                    $(root).find(\".xml_entry_point\").val(), unittestns_new);\n            }\n            unittestNode.setAttribute(\"framework\", this.framework);\n            const versionelem = ($(root).find(\".xml_framework_version\"));\n            if (versionelem) {\n                unittestNode.setAttribute(\"version\", versionelem.val());\n            } else {\n                unittestNode.setAttribute(\"version\", '');\n            }\n        }\n    }\n\n    class JUnitTest extends GeneralUnitTest  {\n        static DefaultTitle = \"JUnit Test\";\n\n        constructor() {\n            super(JUnitTest.DefaultTitle, ['java'], \"JUnit\", \"qtype_proforma/taskeditor_junit\");\n            this.helptext = junit_help;\n            this.entrypointhelp = junitentry_help;\n            this.frameworkRequired = true;\n        }\n        onReadXml(test, xmlReader, testConfigNode, context) {\n            super.onReadXml(test, xmlReader, testConfigNode, context);\n            let unitNode = xmlReader.readSingleNode(\"unit:unittest\", testConfigNode);\n            if (!unitNode)\n                throw new Error('element unit:unittest not found in unittest or unittest namespace invalid');\n\n            switch (unitNode.namespaceURI) {\n                case unittestns_old:\n                    context['entrypoint'] = xmlReader.readSingleText(\"unit:main-class\", unitNode);\n                    break;\n                case unittestns_new:\n                    // default\n                    break;\n                default:\n                    throw new Error('unsupported namespace ' + xmlReader.defaultns + ' in JUnitTest');\n            }\n        }\n    }\n\n    class GoogleTest extends GeneralUnitTest {\n        constructor() {\n            super(\"Google Test\", ['c', 'cpp'], 'GoogleTest');\n            this.helptext = gtest_help;\n            this.entrypointhelp = makerun_help;\n            this.frameworks = ['googletest', 'google-test', 'google' , 'google test'];\n        }\n    }\n\n    class CUnitTest extends GeneralUnitTest {\n        constructor() {\n            super(\"CUnit Test\", ['c'], 'CUnit');\n            this.helptext = cunittest_help;\n            this.entrypointhelp = makerun_help;\n            this.frameworks = ['cunit', 'cunittest', 'cunit-test', 'cunit test'];\n        }\n    }\n\n    class CheckstyleTest extends CustomTest {\n        constructor() {\n            super(\"CheckStyle Test\", \"java-checkstyle\",\n                \"qtype_proforma/taskeditor_checkstyle\");\n            this.gradingWeight = weightStaticTest;\n            this.frameworkRequired = true;\n        }\n\n        onReadXml(test, xmlReader, testConfigNode, context) {\n            let csNode = xmlReader.readSingleNode(\"cs:java-checkstyle\", testConfigNode);\n            if (!csNode) {\n                // task version 1.0.1\n                // todo: check version\n                let praktomatNode = xmlReader.readSingleNode(\"dns:test-meta-data\", testConfigNode);\n                context['warnings'] = xmlReader.readSingleText(\"praktomat:max-checkstyle-warnings\", praktomatNode);\n                context['framework_version'] = xmlReader.readSingleText(\"praktomat:version\", testConfigNode);\n            } else {\n                switch (csNode.namespaceURI) {\n                    case checkstylens:\n                        const version = xmlReader.readSingleText(\"@version\", csNode);\n                        context['framework_version'] = {\n                            \"selected\": true,\n                            \"value\": version,\n                            \"name\": version\n                        };\n                        context['warnings'] = xmlReader.readSingleText(\"cs:max-checkstyle-warnings\", csNode);\n                        break;\n                    default:\n                        throw new Error('unsupported namespace ' + xmlReader.defaultns + ' in JUnitTest');\n                }\n            }\n        }\n\n        onWriteXml(test, testConfigNode, xmlDoc, xmlWriter, task) {\n            let root = test.uiElement.root;\n            task.setAttributeNS('http://www.w3.org/2000/xmlns/', \"xmlns:cs\", checkstylens);\n\n            let csNode = xmlDoc.createElementNS(checkstylens, \"cs:java-checkstyle\");\n            testConfigNode.appendChild(csNode);\n\n            xmlWriter.createTextElement(csNode, 'cs:max-checkstyle-warnings', $(root).find(\".xml_pr_CS_warnings\").val(), checkstylens);\n            csNode.setAttribute(\"version\", $(root).find(\".xml_framework_version\").val());\n        }\n    }\n\n    class PythonDocTest extends CustomTest {\n        constructor() {\n            super(\"Python DocTest\", \"python-doctest\",\n                undefined, ['python']);\n            // this.alternativeTesttypes = ['python'];\n            this.helptext = pythondoc_help;\n        }\n    }\n    /*\n    class setlXTest extends CustomTest {\n        constructor() {\n            super(\"SetlX Test\", \"setlx\", '' );\n            this.alternativeTesttypes = ['jartest'];\n        }\n    }\n    class setlXSyntaxTest extends CustomTest {\n        constructor() {\n            super(\"SetlX Syntax Test\", \"setlx-compilation\", '');\n            this.gradingWeight = weightCompilation;\n            this.alternativeTesttypes = ['jartest'];\n        }\n        onCreate(testId) {\n            //this.initPraktomatTest(testId);\n            // add file for the test\n            const filename = 'setlxsyntaxtest.stlx';\n            createFileWithContent(filename, 'print(\"\");');\n            // add file reference\n            addFileReferenceToTest(testId, filename);\n            // set test title\n            getTestField(testId, \".xml_test_title\").val(\"SetlX-Syntax-Test\");\n        }\n    }\n    */\n\n\n/*   const testSetlX = new setlXTest(setlXTest);\n    const testSetlXSyntax = new setlXSyntaxTest();\n\n*/\n\n/*\n    // list of XML schema files that shall be used for validation\n    const xsds = [\n        // \"proforma-test.xsd\",\n//        \"xsd/proforma-unittest.xsd\",\n//        \"xsd/proforma-checkstyle.xsd\"\n    ];\n\n*/\n\nconst testJavaComp    = new JavaCompilerTest();\nconst testCheckStyle  = new CheckstyleTest();\nconst testPython      = new PythonUnittest();\n\n\nexport let testInfos;\n\nexport let infoGoogleTest;\nexport let infoCUnit;\nexport let infoJavaJUnit;\n\nexport let infoJavaComp = testJavaComp;\nexport let infoPythonUnittest = testPython;\nexport let infoPythonDoctest;\nexport let infoCheckStyle = testCheckStyle;"],"names":["Str","get_strings","key","component","then","results","gtest_help","cunittest_help","makerun_help","junit_help","junitentry_help","pythondoc_help","infoGoogleTest","GoogleTest","infoCUnit","CUnitTest","infoJavaJUnit","JUnitTest","infoPythonDoctest","PythonDocTest","testInfos","testJavaComp","testPython","testCheckStyle","prefix","defaultns","unittestns_old","praktomatns","unittestns_new","checkstylens","JavaCompilerTest","CustomTest","constructor","gradingWeight","manadatoryFile","PythonUnittest","GeneralUnitTest","title","proglang","framework","withRunCommand","onReadXml","test","xmlReader","testConfigNode","context","unitNode","readSingleNode","Error","this","namespaceURI","readSingleText","trim","version","onWriteXml","xmlDoc","xmlWriter","task","root","uiElement","setAttributeNS","unittestNode","createElementNS","appendChild","createTextElement","$","find","val","setAttribute","versionelem","DefaultTitle","helptext","entrypointhelp","frameworkRequired","frameworks","CheckstyleTest","csNode","praktomatNode","undefined","infoJavaComp","infoPythonUnittest","infoCheckStyle"],"mappings":"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"}