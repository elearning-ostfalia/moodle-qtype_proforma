{"version":3,"file":"util.min.js","sources":["../../src/taskeditor/util.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Javascript editor for ProFormA tasks\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     eCULT-Team of Ostfalia University, Dr.U.Priss, K.Borm\n */\n\n\n\nimport {TestWrapper} from \"./test\";\n\nexport const DEBUG_MODE       = false;\nexport const TEST_MODE        = false;\nexport const SUBMISSION_TEST  = false;\nexport const USE_VISIBLES     = false;\n\n\nexport const version094    = 'xsd/taskxml0.9.4.xsd';                // name of schema files\nexport const version101    = 'xsd/taskxml1.0.1.xsd';\n\n\nexport function setErrorMessage(errormess, exception) { // setting the error console\n    console.log('setErrorMessage');\n    console.log(errormess);\n    console.log(exception);\n    window.alert(errormess);\n}\n\nexport function clearErrorMessage() {\n\n}\n\n// without . (MyString.Java = java)\n// to lowercase\nexport function getExtension(filename) {\n    return filename.split('.').pop().toLowerCase();\n}\n\n\n\n\nlet newUuid;\n\n/**\n * generetae new UUID. Note that this function always returns the same UUID\n * whenever it is called later on.\n *\n * @returns {string|*}\n */\nexport function generateUUID(){\n    if (newUuid !== undefined) {\n        // console.log('newUuid is ' + newUuid + ' (do not change)');\n        return newUuid;\n    }\n    let date = new Date().getTime();\n    newUuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c_value) {\n        let rand = (date + Math.random()*16)%16 | 0;\n        date = Math.floor(date/16);\n        return (c_value === 'x' ? rand : (rand&0x3|0x8)).toString(16);\n    });\n    console.log('newUuid is ' + newUuid);\n    return newUuid;\n}\n\n\n//////////////////////////////////////////////////////////////////////////////\n/* setcounter and deletecounter are only used for fileIDs, modelSolIDs, testIDs\n * setcounter finds the first available ID and returns it\n * setcounter should be called when a new item is created\n * deletecounter deletes an ID from the hash, to be used when deleting an item\n */\nexport function setcounter(temphash) {\n    let tempcnter = 1;\n    while (temphash.hasOwnProperty(tempcnter)) {         // if the counter is already used, take next one\n        tempcnter++;\n    }\n    temphash[tempcnter] = 1;\n    return tempcnter;\n}\n\n//////////////////////////////////////////////////////////////////////////////\n// configuration support\n//////////////////////////////////////////////////////////////////////////////\n\n// classes\n\nexport class CustomTest {\n\n    constructor(title, testType, template, proglang) {\n        this.defaultTitle = title;\n        this.title = title; // title in html output\n        this.testType = testType; // test type in XML\n        this.helptext = undefined; // help text for this test\n        this.entrypointhelp = undefined;\n        if (template) {\n            this.mustacheTemplate = template; // html extra input elements\n        } else {\n            this.mustacheTemplate = 'qtype_proforma/taskeditor_test';\n        }\n        this.proglang = proglang; // array of programming languages that the test can be used with\n\n        this.withFileRef = true; // default: with test script(s)\n\n        this.gradingWeight = 1; // default weight\n\n        // this.fileRefLabel = 'File'; // default label\n        this.manadatoryFile = true;\n        this.alternativeTesttypes = [];\n\n        // derived member variables\n        const compactName = title.replace(/ /g, \"\");\n        this.xmlTemplateName = compactName;\n        this.buttonJQueryId = \"add\" + compactName;\n    }\n\n    // override\n    onCreate(testId) {}\n    onReadXml(test, xmlReader, testConfigNode, context) {}\n    onWriteXml(test, testConfigNode, xmlDoc, xmlWriter, task) {}\n    getFramework() {return undefined;}\n    getMustacheTemplate() { return this.mustacheTemplate; }\n\n    getTemplateContext() {\n        let result = {\n            'testtitle' : this.title,\n            // 'filenamelabel' : this.fileRefLabel,\n            'testtype': this.testType,\n            'testheader': this.defaultTitle,\n            'filemandatory': this.manadatoryFile,\n            'weight': this.gradingWeight,\n/*            'info': {\n                \"text\": this.helptext\n            }*/\n        };\n        if (this.helptext) {\n            result['info'] = {\n                \"text\": this.helptext\n            };\n        }\n        if (this.entrypointhelp) {\n            result['entrypointinfo'] = {\n                \"text\": this.entrypointhelp\n            };\n        }\n        return result;\n    }\n    createTestForm() {\n        TestWrapper.createFromTemplate(null,\n            this.mustacheTemplate, this.getTemplateContext(), this.withFileRef);\n    }\n}\n\n\n\n// -------------------------------------------------------------\n/*\n\n// helper function for custom test configuration\nlet createFileWithContent = function(filename, content) {\n    let ui_file = FileWrapper.create();\n    ui_file.filename = filename;\n    ui_file.text = content;\n    // onFilenameChanged(ui_file);\n    return ui_file.id;\n}\n\nlet addFileReferenceToTest = function(testId, filename) {\n    let xml_test_root = $(\".xml_test_id[value='\"+testId+\"']\").parent().parent();\n    let element = xml_test_root.find(\".xml_fileref_filename\").last();\n    element.val(filename).change();\n};\n\nlet getTestField = function(testId, fieldClass) {\n    let xml_test_root = $(\".xml_test_id[value='\"+testId+\"']\").parent().parent();\n    return xml_test_root.parent().find(fieldClass).first();\n}\n*/"],"names":["undefined","newUuid","date","Date","getTime","replace","c_value","rand","Math","random","floor","toString","console","log","filename","split","pop","toLowerCase","errormess","exception","window","alert","temphash","tempcnter","hasOwnProperty","constructor","title","testType","template","proglang","defaultTitle","helptext","entrypointhelp","mustacheTemplate","withFileRef","gradingWeight","manadatoryFile","alternativeTesttypes","compactName","xmlTemplateName","buttonJQueryId","onCreate","testId","onReadXml","test","xmlReader","testConfigNode","context","onWriteXml","xmlDoc","xmlWriter","task","getFramework","getMustacheTemplate","this","getTemplateContext","result","createTestForm","createFromTemplate"],"mappings":"iVAsEoBA,IAAZC,eAEOA,YAEPC,MAAO,IAAIC,MAAOC,iBACtBH,QAAU,uCAAuCI,QAAQ,SAAS,SAASC,aACnEC,MAAQL,KAAqB,GAAdM,KAAKC,UAAa,GAAK,SAC1CP,KAAOM,KAAKE,MAAMR,KAAK,KACH,MAAZI,QAAkBC,KAAa,EAALA,KAAS,GAAMI,SAAS,OAE9DC,QAAQC,IAAI,cAAgBZ,SACrBA,wCA3BkBa,iBAClBA,SAASC,MAAM,KAAKC,MAAMC,iDAdLC,UAAWC,WACvCP,QAAQC,IAAI,mBACZD,QAAQC,IAAIK,WACZN,QAAQC,IAAIM,WACZC,OAAOC,MAAMH,yCA8CUI,cACnBC,UAAY,OACTD,SAASE,eAAeD,YAC3BA,mBAEJD,SAASC,WAAa,EACfA,+EAlEqB,sBACA,4BACA,yBACA,sBAGH,2BAwBzBtB,4BAvByB,iDAsEzBwB,YAAYC,MAAOC,SAAUC,SAAUC,eAC9BC,aAAeJ,WACfA,MAAQA,WACRC,SAAWA,cACXI,cAAW/B,OACXgC,oBAAiBhC,OAEbiC,iBADLL,UAGwB,sCAEvBC,SAAWA,cAEXK,aAAc,OAEdC,cAAgB,OAGhBC,gBAAiB,OACjBC,qBAAuB,SAGtBC,YAAcZ,MAAMrB,QAAQ,KAAM,SACnCkC,gBAAkBD,iBAClBE,eAAiB,MAAQF,YAIlCG,SAASC,SACTC,UAAUC,KAAMC,UAAWC,eAAgBC,UAC3CC,WAAWJ,KAAME,eAAgBG,OAAQC,UAAWC,OACpDC,gBACAC,6BAA+BC,KAAKrB,iBAEpCsB,yBACQC,OAAS,WACKF,KAAK5B,eAEP4B,KAAK3B,oBACH2B,KAAKxB,2BACFwB,KAAKlB,sBACZkB,KAAKnB,sBAKfmB,KAAKvB,WACLyB,OAAM,KAAW,MACLF,KAAKvB,WAGjBuB,KAAKtB,iBACLwB,OAAM,eAAqB,MACfF,KAAKtB,iBAGdwB,OAEXC,mCACgBC,mBAAmB,KAC3BJ,KAAKrB,iBAAkBqB,KAAKC,qBAAsBD,KAAKpB"}