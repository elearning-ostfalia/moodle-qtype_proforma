define("qtype_proforma/taskeditor/test",["exports","./filereflist","./util","./taskdata","core/notification","core/templates","core/str"],(function(_exports,_filereflist,_util,_taskdata,_notification,_templates,Str){var obj;
/**
   * functions for representing a test in taskeditor.
   *
   * @package    qtype
   * @subpackage proforma
   * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   * @author     K.Borm
   * @author     Dr.U.Priss
   */function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.testIDs=_exports.TestWrapper=void 0,_templates=(obj=_templates)&&obj.__esModule?obj:{default:obj},Str=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(Str);var testIDs={};_exports.testIDs=testIDs;class TestWrapper{static constructFromRoot(root){let test=new TestWrapper;return test._root=root,test}static constructFromId(id){let test=new TestWrapper;if(test._root=$("#test_"+id),0!==test.root.length)return test}getValue(member,xmlClass){if(!member){const elem=this.root.find(xmlClass);if(!elem)return;member=elem.first()}return member.val()}get root(){return this._root}get id(){return this.getValue(this._id,".xml_test_id")}get title(){return this.getValue(this._id,".xml_test_title")}get comment(){return this.getValue(this._comment,".xml_internal_description")}get description(){return this.getValue(this._description,".xml_description")}get testtype(){return this.getValue(this._type,".xml_test_type")}get weight(){return this.getValue(this._type,".xml_test_weight")}get framework(){return this.getValue(this._type,".xml_framework")}set comment(newComment){this._root.find(".xml_internal_description").val(newComment)}set description(newDescription){this._root.find(".xml_description").val(newDescription)}set weight(newWeight){this._root.find(".xml_test_weight").val(newWeight)}set title(newTitle){this._root.find(".xml_test_title").val(newTitle)}static doOnAll(callback){$.each($(".xml_test_id"),(function(indexOpt,item){let test=TestWrapper.constructFromId(item.value);callback(test,indexOpt)}))}delete(){_filereflist.FileReferenceList.doOnAllElements(this.root,(function(fileref_element){$(fileref_element).closest("tr").find(".remove_item").first().click()})),delete testIDs[this.id],this.root.remove()}static delete(button){Str.get_string("confirmdeletetest","qtype_proforma").then((localtext=>{if(window.confirm(localtext)){TestWrapper.constructFromRoot(button.closest(".xml_test")).delete()}}))}static createFromTemplate(id,template,context,withFileRef,item,task){let test,testid=id;return testid||(testid=(0,_util.setcounter)(testIDs)),context.testid=testid,_templates.default.renderForPromise(template,context).then((_ref=>{let{html:html,js:js}=_ref;_templates.default.appendNodeContents("#proforma-tests-section",html,js);const testroot=$("#test_"+testid);test=TestWrapper.constructFromRoot(testroot);let subnode=$(testroot)[0].querySelector(".test-header");if(subnode?subnode.ondragstart=function(event){console.log("On drag start "+testid),event.dataTransfer.setData("text","move_test "+testid)}:console.error("could not find subnode .test-header"),_filereflist.FileReferenceList.init(null,null,_filereflist.TestFileReference,testroot),testroot.find(".dynamic_table").show(),_filereflist.FileReferenceList.addCallbacks($(testroot)[0]),testroot.find("button").first().on("click",(function(event){event.preventDefault(),TestWrapper.delete($(this))})),withFileRef||(console.log("hide fileref fields"),testroot.find("table").hide(),testroot.find(".drop_zone").hide()),item){console.log("update filelist for test");let counter=0;item.filerefs.forEach((function(itemFileref,indexFileref){let filename=task.findFilenameForId(itemFileref.refid),promiseFactories=[_filereflist.TestFileReference.getInstance().setFilenameOnCreation(test.root,counter++,filename)];Promise.all(promiseFactories).then((()=>{}))}))}})).catch((error=>{(0,_notification.exception)(error)}))}}_exports.TestWrapper=TestWrapper}));

//# sourceMappingURL=test.min.js.map