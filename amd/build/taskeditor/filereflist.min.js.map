{"version":3,"file":"filereflist.min.js","sources":["../../src/taskeditor/filereflist.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n /**\n * Class for dealing with file references in tests or model solution\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     eCULT-Team of Ostfalia University, K.Borm\n */\n\n// todo: replace table solution with something without table!\n\nimport {DynamicList} from \"./dynamic-list\";\nimport $ from 'jquery';\nimport {readAndCreateFileData} from \"./helper\";\nimport {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport {FileWrapper} from \"./file\";\nimport * as taskeditorconfig from \"./config\";\nimport {DEBUG_MODE,handleFilenameChangeInTest} from \"./util\";\nimport * as Str from 'core/str';\nimport {TestWrapper} from \"./test\";\n\n\n\nlet loadFileOption = \"<open...>\";\nlet newFileOption = \"<new file>\";\nconst emptyFileOption = \" \"; // must not be empty!!\n\nlet showEditorText = 'View'; // Str.get_string('taskeditorview', 'qtype_proforma'); // 'View';\nlet hideEditorText = 'Hide'; // Str.get_string('taskeditorhide', 'qtype_proforma'); // 'Hide';\n\nlet filenameClassList = [];\nlet filerefClassList = [];\n\n// abstract class for a filename reference input\nexport class FileReferenceList extends DynamicList {\n\n    static getLocalisedStrings() {\n        let strings = [\n            { key: 'taskeditorview', component: 'qtype_proforma' },\n            { key: 'taskeditorhide', component: 'qtype_proforma' },\n            { key: 'openfile', component: 'qtype_proforma' },\n            { key: 'newfile', component: 'qtype_proforma' }\n        ];\n        return Str.get_strings(strings)\n            .then(results => {\n                showEditorText = results[0];\n                hideEditorText = results[1];\n                loadFileOption = results[2];\n                newFileOption = results[3];\n            });\n    }\n\n    constructor(classFilename, classFileref, jsClassName, label, help, mandatory) {\n        super(classFilename, classFileref, jsClassName, label, help, mandatory, 'xml_fileref_table');\n\n        //this.table = this.table +\n        //    \"<span class='drop_zone_text drop_zone'>Drop Your File(s) Here!</span>\";\n\n        filenameClassList.push('.' + this.classFilename);\n        filerefClassList.push('.' + classFileref);\n    }\n\n\n    doOnAll(callback, root) {\n        if (root)\n            console.log('doOnAllIds ios deprecated, use static version instead');\n        let theRoot = root?root:this.root;\n        $.each(theRoot.find(\".fileref_fileref\"), function(index, item) {\n            const filerefId = item.value;\n            return callback(filerefId);\n        });\n    }\n\n    doOnNonEmpty(callback) {\n        $.each(this.root.find(\".fileref_fileref\"), function(index, item) {\n            const filerefId = item.value;\n            if (filerefId)\n                return callback(filerefId);\n        });\n    }\n\n    static doOnAllIds(root, callback) {\n        $.each(root.find(\".fileref_fileref\"), function(index, item) {\n            const filerefId = item.value;\n            return callback(filerefId);\n        });\n    }\n\n    static doOnAllElements(root, callback) {\n        $.each(root.find(\".fileref_fileref\"), function(index, item) {\n            return callback(item);\n        });\n    }\n\n    // init table\n    init(root, DEBUG_MODE) {\n        if (!this.root)\n            this.root = root;\n        FileReferenceList.updateFilenameList(root.find(\".\" + this.classFilename).last());\n        FileReferenceList.rowEnableEditorButton(root, false);\n        if (!DEBUG_MODE) {\n            root.find(\".fileref_fileref\").hide();\n            root.find(\"label[for='fileref_fileref']\").hide();\n        }\n\n        // register dragenter, dragover.\n        root.on({\n            dragover: function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n                //e.dataTransfer.dropEffect = 'copy';\n            },\n            dragenter: function(e) {\n                e.preventDefault();\n                e.stopPropagation();\n            },\n/*\n            drop: function(e){\n                if(e.originalEvent.dataTransfer){\n                    if(e.originalEvent.dataTransfer.files.length) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        //UPLOAD FILES HERE\n                        this.JsClassname.uploadFiles(e.originalEvent.dataTransfer.files, e.currentTarget);\n                    }\n                }\n            } */\n        });\n    }\n\n    // for creation by reading xml\n    setFilenameOnCreation(box, index, filename) { // index is 0-based\n        // set filename\n        if (index > 0) {\n            // create new fileref if index > 0\n            return this.addItem(box.find(\".\" + this.classAddItem).first())\n                .then(() => {\n                    let element = box.find(\".\" + this.classFilename);\n                    FileReferenceList.updateFilenameList(element.eq(index));\n                    element.eq(index).val(filename).change();\n            });\n        } else {\n            let element = box.find(\".\" + this.classFilename);\n            FileReferenceList.updateFilenameList(element.eq(index));\n            element.eq(index).val(filename).change();\n        }\n    }\n\n    getCountFilerefs(root) {\n        let counter = 0;\n        this.doOnAll(function () {\n            counter++;\n        }, root);\n        return counter;\n    }\n\n    getNumberOfExtraColumns() { return 0;}\n\n    toggleEditor(element) {\n        let td = element.parent();\n        let tr = td.parent();\n        const fileid = tr.find('.fileref_fileref')[0].value;\n        let ui_file = FileWrapper.constructFromId(fileid);\n\n        if (element.html() === hideEditorText) {\n            element.html(showEditorText);\n            tr.next().remove();\n        }\n        else {\n            const numberOfColumns = 7 + this.getNumberOfExtraColumns();\n            if (ui_file && !ui_file.isBinary) {\n                element.html(hideEditorText);\n                $( \"<tr>\" +\n                    \"   <td></td>\" +\n                    \"   <td colspan='\"+ numberOfColumns + \"'><textarea disabled cols='80' rows='10' class='fileref_viewer'>\"+\n                    ui_file.text\n                    +\"</textarea></td></tr>\" ).insertAfter(tr);\n            }\n        }\n    }\n\n    static rowGetFileId(row) {\n        return row.find('.fileref_fileref')[0].value;\n    }\n\n    static rowEnableEditorButton(row, enabled) {\n        if (enabled) {\n            // check if file is binary and cannot be viewed\n            const fileid = FileReferenceList.rowGetFileId(row);\n            if (!fileid)\n                return;\n            let ui_file = FileWrapper.constructFromId(fileid);\n            if (ui_file.isBinary)\n                enabled = false;\n            //console.log('enable view button in fileref for ' + ui_file.filename + ', enabled = ' + enabled);\n        }\n\n        row.find(\".taskeditor-collapse\").last().prop('disabled', !enabled);\n    }\n\n    addItem(element) {\n        let td = element.parent();\n        let tr = td.parent();\n        let table_body = tr.parent();\n        return super.addItem(element)\n            .then(newRow => {\n                FileReferenceList.rowEnableEditorButton(newRow, false);\n                // add filelist to new file option\n                FileReferenceList.updateFilenameList(table_body.find(\".\" + this.classFilename).last());\n\n                if (!DEBUG_MODE) {\n                    // hide new fileref fields\n                    table_body.find(\".fileref_fileref\").hide();\n                    table_body.find(\"label[for='fileref_fileref']\").hide();\n                }\n                FileReferenceList.addCallbacks(newRow[0]);\n            });\n    }\n\n\n    // override\n    getItemCount(table_body) {\n        let count = 0;\n        $.each(table_body.find(\"tr\"), function(index, item) {\n            if ($(item).find(\"td\").length > 2)\n                count++;\n        });\n        return count;\n    }\n\n    // override\n    getPreviousItem(tr) {\n        let previousRow = tr.prev(\"tr\");\n\n        if (previousRow.find('td').length === 1) {\n            // only one column => editor visible go to previous row\n            previousRow = previousRow.prev(\"tr\");\n        }\n        return previousRow;\n    }\n\n    removeItem(element) {\n        let td = element.parent();\n        let tr = td.parent();\n\n        // save associated fileid\n        const fileid = FileReferenceList.rowGetFileId(tr); // tr.find('.fileref_fileref')[0].value;\n\n        // remove editor\n        const buttonText = td.prev().find('button').html();\n        if (buttonText === hideEditorText) {\n            // remove editor\n            tr.next().remove();\n        }\n\n        super.removeItem(element);\n\n        if (fileid) {\n            FileReferenceList.deleteFile(fileid);\n        }\n    }\n\n    // TODO move to file??\n    static deleteFile(fileid) {\n        // check if there any references\n        let ui_file = FileWrapper.constructFromId(fileid);\n        if (FileReferenceList.getCountFileIdReferenced(fileid) === 0) {\n            // no reference at all => delete file\n            // if (window.confirm(ui_file.filename + \" is no longer referenced.\\n\" +\n            //     \"Shall it be removed from task?\")) {\n                ui_file.delete();\n            // }\n        }\n    }\n\n    static removeContent(filenameItem, removeItemIfPossible) {\n        $(filenameItem).val(emptyFileOption); // do not call change!\n        let tr = $(filenameItem).closest('tr');\n        tr.find('.fileref_fileref').first().val('');\n        let button = tr.find('.taskeditor-collapse');\n        if (button.html() === hideEditorText) {\n            // remove editor\n            button.html(showEditorText);\n            tr.next().remove();\n        }\n        // row has a\n        if (removeItemIfPossible) {\n            let removeButton = tr.find('.remove_item').first();\n            const isHidden = removeButton.css(\"display\") === \"none\";\n            if (!isHidden)\n                removeButton.click();\n        }\n    }\n\n    // checks if a given file id is used somewhere\n    // (needed when file shall be deleted)\n    static getCountFileIdReferenced(fileId) {\n        let count = 0;\n        $.each($(\".fileref_fileref\"), function(index, item) {\n            const filerefId = item.value;\n            if (filerefId === fileId) {\n                count++;\n            }\n        });\n\n        return count;\n    }\n\n    checkForExclusiveUse(ui_file, fileid, otherFileRefList, listname) {\n        // iterate through all file reference objects to find an 'old' one\n        $.each(otherFileRefList.root.find(\".fileref_fileref\"), function(index, item) {\n            if (item.value === fileid) {\n                alert(\"file class for file '\" + ui_file.filename + \"' will be no longer a \" + listname + \" file\");\n                // file id matches\n                // remove old fileref object\n                // remove actual numeric fileref value\n                FileReferenceList.removeContent(item, true);\n            }\n        });\n    }\n    onFileUpload(filename, uploadBox) {\n        // select new filename in first empty filename\n        //console.log(\"uploadFiles: select \" + filename + \" in option list\");\n        let done = false;\n        $.each($(uploadBox).find(\".\" + this.classFilename), function(index, element) {\n            if (done)\n                return false;\n            const currentFilename = $(element).val();\n            if (!currentFilename || 0 === currentFilename.length) {\n                $(element).val(filename).change();\n                // FileReferenceList.rowEnableEditorButton($(element).parent(), true);\n                done = true;\n            }\n        });\n\n        if (!done) { // no empty select option is found\n            // append filename\n            this.addItem($(uploadBox).find('.' + this.classAddItem).last())\n                .then(newRow => {\n                    // select filename\n                    $(uploadBox).find(\".\" + this.classFilename).last().val(filename).change();\n                    // FileReferenceList.rowEnableEditorButton(newRow, true);\n                });\n        }\n    }\n\n    onFilerefChanged(ui_file, fileid) {}\n\n    onFileSelectionChanged (tempSelElem) {              // changing a filename in the drop-down\n\n        function isDuplicateId(fileid) {\n            const filerefs = $(tempSelElem).closest('table').find(\".fileref_fileref\");\n            let found = false;\n            $.each(filerefs, function(index, item) {\n                if (item.value === fileid) {\n                    // fileref already in list!\n                    // alert('file ' + item.value + ' is already in this list!');\n                    found = true;\n                    return false;\n                }\n            });\n            return found;\n        }\n\n        // var found = false;\n        const selectedFilename = $(tempSelElem).val();\n        // get old file id\n        const nextTd = $(tempSelElem).parent().next('td');\n        const row = $(tempSelElem).closest('tr');\n        const oldFileId = nextTd.find('.fileref_fileref')[0].value;\n\n        FileReferenceList.rowEnableEditorButton(row, false);\n\n        switch (selectedFilename) {\n            case newFileOption:\n                FileWrapper.createFromTemplate()\n                    .then(ui_file => {\n                        // Preset filename with a unique filename\n                        const newFilename = 'new file ' + ui_file.id;\n                        ui_file.filename = newFilename;\n                        if ($(tempSelElem)) {\n                            // select file as referenced file.\n                            $(tempSelElem).val(newFilename).change();\n                            FileReferenceList.rowEnableEditorButton(row, true);\n                        }\n                    });\n                // Open tab with files in order to create file input\n                const hash = '#proforma-files-section';\n                const tab = document.querySelector('.nav-link[href=\"' + hash + '\"]');\n                if (tab) {\n                    tab.click();\n                }\n                break;\n            case loadFileOption:\n                // read new file\n                // reset selection in case choosing a file fails\n                //$(tempSelElem).val(emptyFileOption); // do not call change!\n                FileReferenceList.removeContent(tempSelElem, false);\n                // change callback\n                let dummybutton = $(\"#dummy_file_upload_button\").first();\n                dummybutton.unbind(\"change\");\n                dummybutton.change(function () {\n                    let inputbutton = $(\"#dummy_file_upload_button\")[0];\n                    let filenew = inputbutton.files[0];\n                    if (!filenew) {\n                        console.log(\"no file selected -> cancel\");\n                        return;\n                    }\n\n                    readAndCreateFileData(filenew, undefined /*-1*/,\n                        function (newFilename, fileId) {\n                            if ($(tempSelElem)) {\n                                $(tempSelElem).val(newFilename).change();\n                                FileReferenceList.rowEnableEditorButton(row, true);\n                            }\n                            // set classname if file belongs to JUNIT\n                            //setJavaClassname(newFilename);\n                            //setJUnitDefaultTitle(newFilename);\n                        });\n                });\n                // perform dummy click\n                dummybutton.click();\n                return;\n            case emptyFileOption:\n            case emptyFileOption.trim():\n                // delete fileref id\n                nextTd.find('.fileref_fileref')[0].value = '';\n                break;\n            default:\n                // find file id belonging to the filename\n                if (selectedFilename && selectedFilename.trim().length) {\n                    let ui_file = FileWrapper.constructFromFilename(selectedFilename);\n                    if (ui_file) { // can be undefined when no filename is selected\n                        const fileid = ui_file.id;\n                        if (isDuplicateId(fileid)) {\n                            Str.get_string('fileexists', 'qtype_proforma', ui_file.filename)\n                                .then(content => alert(content));\n                            // alert('file ' + ui_file.filename + ' is already in this list!');\n                            // clean input field\n                            //$(tempSelElem).val(emptyFileOption).change();\n                            FileReferenceList.removeContent(tempSelElem, false);\n                            return;\n                        }\n\n                        // set new file id\n                        nextTd.find('.fileref_fileref')[0].value = fileid;\n                        FileReferenceList.rowEnableEditorButton(row, true);\n                        if ($(tempSelElem).hasClass('xml_fileref_filename')) {   // is it a test or a model-solution\n                            // call test specific configured handler\n                            if (fileid) {\n                                // setJavaClassname(selectedFilename);\n                                // setJUnitDefaultTitle(selectedFilename);\n                                handleFilenameChangeInTest(selectedFilename, tempSelElem);\n                            }\n                        } else {\n                            this.onFilerefChanged(ui_file, fileid);\n                        }\n                    }\n                }\n        }\n\n        if (oldFileId !== '') {\n            // delete old file\n            FileReferenceList.deleteFile(oldFileId);\n        }\n    };\n\n    static updateAllViews() {\n        $.each($(\".fileref_viewer\"), function(index, item) {\n            let tr = $(item).closest('tr'); // parent().parent();\n            let trPrev = tr.prev(); // parent().parent();\n            const fileid = trPrev.find('.fileref_fileref')[0].value;\n            let ui_file = FileWrapper.constructFromId(fileid);\n            $(item).val(ui_file.text);\n       });\n    }\n\n    static updateAllEditorButtons() {\n        $.each($(\".fileref_fileref\"), function(index, item) {\n            let row = $(item).parent().parent();\n            FileReferenceList.rowEnableEditorButton(row, true);\n        });\n    }\n\n    // - update all filename lists\n    // - update selection index\n    // - update selection text\n    static updateAllFilenameLists(changedId, newFilename) {\n        //console.log('updateAllFilenameLists for ' + changedId + ', new filename: ' + newFilename);\n\n        $.each($(filenameClassList.join(',')), function(index, item) {\n            //console.log(\"update filelist in test \");\n            // store name of currently selected filename\n            const text = $(\"option:selected\", item).text();\n            //console.log(\"selected is \" + text);\n            FileReferenceList.updateFilenameList(item); // update filename list in item\n\n            // is selected filename in item changed?\n            const refid = $(item).closest('tr').find('.fileref_fileref').first().val();\n            if (refid === changedId && changedId !== undefined) {\n                // yes =>\n                if (newFilename !== undefined) {\n                    // update selected filename if not deleted\n                    // console.log('change selection value');\n                    $(item).val(newFilename);\n                } else {\n                    // file is deleted => remove content\n                    FileReferenceList.removeContent(item, true);\n                }\n            } else {\n                // no =>\n                $(item).val(text);\n\n                // let indexFound = -1;\n                // if (text !== emptyFileOption) {\n                //\n                //     // check if previously selected filename is still in list\n                //     $.each($(\".xml_file_filename\"), function (indexOpt, item) {\n                //         if (item.value.length > 0 && item.value === text) {\n                //             indexFound = indexOpt;\n                //             return false;\n                //         }\n                //     });\n                // }\n                //\n                // if (indexFound >= 0) {\n                //     //console.log(\"selektiere \" + indexFound);\n                //     item.selectedIndex = indexFound + 1; // +1:weil am Anfang noch ein Leerstring ist\n                // } else {\n                //     // previously seelected text is not in the list\n                //     // => expect filename to be deleted\n                //     if (newFilename === undefined && text !== emptyFileOption) {\n                //         console.error('could not find filename: <' + text + '>');\n                //     }\n                //     /*\n                //                     // das ist kein guter Ort für so was!!\n                //                     // remove actual numeric fileref value\n                //                     let td = $(item).parent();\n                //                     let tr = td.parent();\n                //                     tr.find('.fileref_fileref').first().val('');\n                //                     // check if complete row can be deleted\n                //                     const table_body = tr.parent();\n                //                     if (table_body.find('tr').length > 1) {\n                //                         // more than one row => delete row\n                //                         modelSolutionFileRefSingleton.removeFileRef($(item));\n                //                     }\n                //     */\n                // }\n\n            }\n        });\n    }\n\n    // create the drop-down with all possible filenames\n    static updateFilenameList(tempSelElem) {\n        $(tempSelElem).empty();\n        let tempOption = $(\"<option>\" + emptyFileOption + \"</option>\");\n        $(tempSelElem).append(tempOption); // empty string\n        $.each($(\".xml_file_filename\"), function(index, item) {\n            if (item.value.length > 0) {\n                tempOption = $(\"<option></option>\");\n                tempOption[0].textContent = item.value;\n                $(tempSelElem).append(tempOption);\n            }\n        });\n        //tempSelElem.val(\"\"); // preset no filename\n        tempOption = $(\"<option></option>\");\n        tempOption[0].textContent = loadFileOption;\n        $(tempSelElem).append(tempOption);\n\n        let tempOptionNew = $(\"<option></option>\");\n        tempOptionNew[0].textContent = newFileOption;\n        $(tempSelElem).append(tempOptionNew);\n    }\n\n\n    static uploadFiles(files, box, instance) {\n        /*if (files.length > 1) {\n            alert('You have dragged more than one file. You must drop exactly one file!');\n            return;\n        }\n        */\n        $.each(files, function(index, file) {\n            readAndCreateFileData(file, undefined/*-1*/, function(filename) {\n                instance.onFileUpload(filename, box);\n            });\n        });\n    }\n\n    static init(dropzoneSelector, sectionSelector, classname, dropZoneObject) {\n        let root = dropZoneObject;\n/*        if (dropzoneSelector)\n            root = $(dropzoneSelector); // find approach that fits all classes\n\n        if (sectionSelector) {\n            $(sectionSelector)[0].textContent = \"\";\n            $(sectionSelector).append(classname.getInstance().getTableString());\n        }\n*/\n        classname.getInstance().init(root, DEBUG_MODE);\n        root.on({\n            drop: function(e){\n                console.log('ondrop ');\n                console.log(e);\n                let data = e.originalEvent.dataTransfer.getData(\"text\");\n                console.log(data);\n                if (data.startsWith('move_test ')) {\n                    // Move test\n                    let result = data.substring('move_test '.length);\n                    console.log('move ' + result);\n                    let test = TestWrapper.constructFromId(result);\n                    let thiselement = e.target.closest('.xml_test');\n                    console.log(thiselement.id);\n                    let otherelement = document.getElementById('test_' + result);\n                    let nextSibling = thiselement.nextElementSibling;\n                    if (nextSibling === otherelement) {\n                        thiselement.before(otherelement);\n                    } else {\n                        thiselement.after(otherelement);\n                    }\n                    return;\n                }\n\n                // drop file.\n                if (e.originalEvent.dataTransfer){\n                    if(e.originalEvent.dataTransfer.files.length) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        //UPLOAD FILES HERE\n                        FileReferenceList.uploadFiles(e.originalEvent.dataTransfer.files, e.currentTarget,\n                            classname.getInstance());\n                    }\n                }\n            }\n        });\n    }\n\n    static addCallbacks(rootnode) {\n        // Add callback for onclick of '+' button.\n        // console.log('Add callbacks for');\n        // console.log(rootnode);\n        // console.log('callback for + button');\n        let subnode = rootnode.querySelector('.add_fileref');\n        if (!subnode)\n            console.error('could not find subnode .add_fileref');\n        else {\n            subnode.onclick = function (addevent) {\n                addevent.preventDefault();\n                // TODO: use static or global function!\n                TestFileReference.getInstance().addItem($(addevent.target));\n            }\n        }\n        // Add callback for onclick of 'x' button.\n    //        rootnode.querySelector(\".remove_item\").onclick = function (removeevent) {\n        // console.log('callback for x button');\n//        rootnode.querySelector(\".\" + TestFileReference.getInstance().classRemoveItem).onclick = function (removeevent) {\n        subnode = rootnode.querySelector('.remove_item');\n        if (!subnode)\n            console.error('could not find subnode .remove_item');\n        else {\n            subnode.onclick = function (removeevent) {\n                removeevent.preventDefault();\n                TestFileReference.getInstance().removeItem($(removeevent.target));\n            }\n        }\n\n        // console.log('callback for change selection');\n        subnode = rootnode.querySelector('.fileref_filename');\n        if (!subnode)\n            console.error('could not find subnode .fileref_filename');\n        else {\n            subnode.onchange = function (changeevent) {\n                changeevent.preventDefault();\n                TestFileReference.getInstance().onFileSelectionChanged($(changeevent.target));\n            }\n        }\n\n        // console.log('callback for toggle editor');\n        subnode = rootnode.querySelector('.taskeditor-collapse');\n        // console.error('TODO taskeditor-collapse');\n        if (!subnode)\n            console.error('could not find subnode .taskeditor-collapse');\n        else {\n            rootnode.querySelector(\".taskeditor-collapse\").onclick = function (toggleevent) {\n                toggleevent.preventDefault();\n                TestFileReference.getInstance().toggleEditor($(toggleevent.target));\n            }\n        }\n    }\n}\n\n\nexport class TestFileReference extends FileReferenceList {\n\n    constructor() {\n        super('xml_fileref_filename', 'xml_test_fileref', 'TestFileReference', 'File',\n            'file containing test cases, test configuration, libraries etc.', true);\n    }\n\n    static getInstance() {return testFileRefSingleton;}\n/*\n    onFileUpload(filename, uploadBox) {\n        super.onFileUpload(filename, uploadBox);\n        // set classname if exactly one file is assigned\n        // todo: this should be part of the configuration\n        // const ui_classname = $(uploadBox).find(\".xml_entry_point\");\n        // if (ui_classname.length === 1) {\n        //     $.each(ui_classname, function(index, element) {\n        //         const currentFilename = $(element).val();\n        //         if (currentFilename === \"\" && !readXmlActive) {\n        //             $(element).val(javaParser.getFullClassnameFromFilename(filename)).change();\n        //         }\n        //     });\n        // }\n    }*/\n}\nlet testFileRefSingleton = new TestFileReference();\n\n\nexport class ModelSolutionFileReference extends FileReferenceList {\n\n    constructor() {\n        super('xml_model-solution_filename', 'xml_model-solution_fileref',\n            'ModelSolutionFileReference', 'File',\n            'file belonging to a model solution', true);\n    }\n    static getInstance() {return modelSolutionFileRefSingleton;}\n}\nlet modelSolutionFileRefSingleton = new ModelSolutionFileReference();\n\n\n\n\n\n\n"],"names":["loadFileOption","newFileOption","showEditorText","hideEditorText","filenameClassList","filerefClassList","FileReferenceList","DynamicList","Str","get_strings","key","component","then","results","constructor","classFilename","classFileref","jsClassName","label","help","mandatory","push","this","doOnAll","callback","root","console","log","theRoot","each","find","index","item","filerefId","value","doOnNonEmpty","init","DEBUG_MODE","updateFilenameList","last","rowEnableEditorButton","hide","on","dragover","e","preventDefault","stopPropagation","dragenter","setFilenameOnCreation","box","filename","addItem","classAddItem","first","element","eq","val","change","getCountFilerefs","counter","getNumberOfExtraColumns","toggleEditor","tr","parent","fileid","ui_file","FileWrapper","constructFromId","html","next","remove","numberOfColumns","isBinary","text","insertAfter","row","enabled","rowGetFileId","prop","table_body","super","newRow","addCallbacks","getItemCount","count","length","getPreviousItem","previousRow","prev","removeItem","td","deleteFile","getCountFileIdReferenced","delete","filenameItem","removeItemIfPossible","closest","button","removeButton","css","click","fileId","checkForExclusiveUse","otherFileRefList","listname","alert","removeContent","onFileUpload","uploadBox","done","currentFilename","onFilerefChanged","onFileSelectionChanged","tempSelElem","selectedFilename","nextTd","oldFileId","createFromTemplate","newFilename","id","hash","tab","document","querySelector","dummybutton","unbind","filenew","files","undefined","trim","constructFromFilename","filerefs","found","isDuplicateId","get_string","content","hasClass","changedId","join","empty","tempOption","append","textContent","tempOptionNew","instance","file","dropzoneSelector","sectionSelector","classname","dropZoneObject","getInstance","drop","data","originalEvent","dataTransfer","getData","startsWith","result","substring","TestWrapper","thiselement","target","otherelement","getElementById","nextElementSibling","before","after","uploadFiles","currentTarget","rootnode","subnode","onclick","addevent","TestFileReference","error","removeevent","onchange","changeevent","toggleevent","testFileRefSingleton","ModelSolutionFileReference","modelSolutionFileRefSingleton"],"mappings":"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"}