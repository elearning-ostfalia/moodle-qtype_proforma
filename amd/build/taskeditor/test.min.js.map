{"version":3,"file":"test.min.js","sources":["../../src/taskeditor/test.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * functions for representing a test in taskeditor.\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     K.Borm\n * @author     Dr.U.Priss\n */\n\nimport {TestFileReference, FileReferenceList, ModelSolutionFileReference} from \"./filereflist\";\nimport {setcounter, DEBUG_MODE} from \"./util\";\nimport {TaskClass} from \"./taskdata\";\nimport {exception as displayException} from 'core/notification';\nimport Templates from 'core/templates';\nimport * as Str from 'core/str';\n\nexport var testIDs = {};\n\n\nexport class TestWrapper {\n    static constructFromRoot(root) {\n        let test = new TestWrapper();\n        test._root = root;\n        return test;\n    }\n\n\n    static constructFromId(id) {\n        // this._id = id;\n        let test = new TestWrapper();\n        test._root = $(\"#test_\" + id);\n        if (test.root.length === 0)\n            return undefined; // no element with id found\n        return test;\n    }\n\n    getValue(member, xmlClass) {\n        if (!member) {\n            const elem = this.root.find(xmlClass);\n            if (!elem) {\n                return undefined;\n            }\n            member = elem.first();\n        }\n        return member.val();\n    }\n\n    // getter\n    get root() { return this._root; }\n    get id() { return this.getValue(this._id,\".xml_test_id\" ); }\n    get title() { return this.getValue(this._id,\".xml_test_title\" ); }\n    get comment() { return this.getValue(this._comment,\".xml_internal_description\"); }\n    get description() { return this.getValue(this._description,\".xml_description\" ); }\n    get testtype() { return this.getValue(this._type,\".xml_test_type\" ); }\n    get weight() { return this.getValue(this._type,\".xml_test_weight\" ); }\n    get framework() { return this.getValue(this._type,\".xml_framework\" ); }\n\n    // setter\n    set comment(newComment) { this._root.find(\".xml_internal_description\").val(newComment); }\n    set description(newDescription) { this._root.find(\".xml_description\").val(newDescription); }\n    set weight(newWeight) { this._root.find(\".xml_test_weight\").val(newWeight); }\n    set title(newTitle) { this._root.find(\".xml_test_title\").val(newTitle); }\n\n    static doOnAll(callback) {\n        // todo: iterate through all tests in variable\n        $.each($(\".xml_test_id\"), function (indexOpt, item) {\n            let test = TestWrapper.constructFromId(item.value);\n            callback(test, indexOpt);\n        });\n    }\n\n    delete() {\n        // iterate through all referenced files and remove the references\n        // => checks whether the file can be removed\n        FileReferenceList.doOnAllElements(this.root, function(fileref_element) {\n            let row = $(fileref_element).closest('tr');\n            row.find('.remove_item').first().click();\n        });\n\n        delete testIDs[this.id];\n        this.root.remove();\n    }\n\n    static delete(button) {\n        Str.get_string('confirmdeletetest', 'qtype_proforma')\n            .then(localtext => {\n                if (window.confirm(localtext)){\n                    let instance = TestWrapper.constructFromRoot(button.closest('.xml_test'));\n                    // remove instance\n                    instance.delete();\n                }\n            });\n    }\n\n    /**\n     *\n     * @param id test identfier\n     * @param template mustache template name\n     * @param context context for mustache template\n     * @param withFileRef with file references\n     * @param item object to create from\n     */\n    static createFromTemplate(id, template, context, withFileRef, item, task) {\n        let testid = id;\n        if (!testid)\n            testid = setcounter(testIDs);\n        context['testid'] = testid;\n        // console.log(\"context for rendering template \" + template);\n        // console.log(context);\n        let test = undefined;\n\n        return Templates.renderForPromise(template, context)\n            .then(({html, js}) => {\n                // console.log(html);\n                Templates.appendNodeContents('#proforma-tests-section', html, js);\n\n                // hide fields that exist only for technical reasons\n                const testroot = $(\"#test_\" + testid);\n\n                test = TestWrapper.constructFromRoot(testroot);\n\n                let subnode = $(testroot)[0].querySelector('.test-header');\n                if (!subnode)\n                    console.error('could not find subnode .test-header');\n                else {\n                    subnode.ondragstart = function (event) {\n                        // event.preventDefault();\n                        console.log('On drag start ' + testid);\n                        event.dataTransfer.setData(\"text\", 'move_test '  + testid);\n                    }\n                }\n\n                FileReferenceList.init(null, null, TestFileReference, testroot);\n                testroot.find('.dynamic_table').show();\n                FileReferenceList.addCallbacks($(testroot)[0]);\n                // Add callback for delete button\n                testroot.find('button').first().on(\"click\",\n                    function(event) {\n                        event.preventDefault();\n                        TestWrapper.delete($(this));\n                    });\n\n                // TestFileReference.getInstance().init(testroot, DEBUG_MODE);\n\n/*                if (!DEBUG_MODE) {\n                    console.log('hide debug fields');\n                    testroot.find(\".xml_test_type\").hide();\n                    testroot.find(\"label[for='xml_test_type']\").hide();\n                    testroot.find(\".xml_test_id\").hide();\n                    testroot.find(\"label[for='xml_test_id']\").hide();\n                }*/\n                if (!withFileRef) {\n                    console.log('hide fileref fields');\n                    testroot.find(\"table\").hide();\n                    testroot.find(\".drop_zone\").hide();\n                }\n                else\n                {\n                    // TODO: disable drag & drop!\n                    /*\n                            testroot.on({\n                                drop: function(e){\n                                    if(e.originalEvent.dataTransfer){\n                                        if(e.originalEvent.dataTransfer.files.length) {\n                                            e.preventDefault();\n                                            e.stopPropagation();\n                                            //UPLOAD FILES HERE\n                                            FileReferenceList.uploadFiles(e.originalEvent.dataTransfer.files, e.currentTarget,\n                                                TestFileReference.getInstance());\n                                        }\n                                    }\n                                }\n                            });\n                    */\n                }\n                if (item) {\n                    console.log('update filelist for test');\n                    let counter = 0;\n                    // console.log(item.filerefs);\n\n                    item.filerefs.forEach(function(itemFileref, indexFileref) {\n                        // console.log('id ' + itemFileref.refid);\n                        let filename = task.findFilenameForId(itemFileref.refid);\n                        // console.log('filename ' + filename);\n                        let promiseFactories = [TestFileReference.getInstance().setFilenameOnCreation(test.root, counter++, filename)];\n                        Promise.all(promiseFactories)\n                            .then(() => {\n                                // console.log(\"promise completed\");\n                                // ???\n                            })\n                    });\n                }\n            })\n            .catch((error) => { displayException(error); });\n        // return test;\n    }\n}\n\n"],"names":["testIDs","TestWrapper","root","test","_root","id","$","length","getValue","member","xmlClass","elem","this","find","first","val","_id","title","comment","_comment","description","_description","testtype","_type","weight","framework","newComment","newDescription","newWeight","newTitle","callback","each","indexOpt","item","constructFromId","value","delete","doOnAllElements","fileref_element","closest","click","remove","button","Str","get_string","then","localtext","window","confirm","constructFromRoot","template","context","withFileRef","task","testid","Templates","renderForPromise","_ref","html","js","appendNodeContents","testroot","subnode","querySelector","ondragstart","event","console","log","dataTransfer","setData","error","init","TestFileReference","show","addCallbacks","on","preventDefault","hide","counter","filerefs","forEach","itemFileref","indexFileref","filename","findFilenameForId","refid","promiseFactories","getInstance","setFilenameOnCreation","Promise","all","catch"],"mappings":";;;;;;;;;;qlCAmCWA,QAAU,kCAGRC,qCACgBC,UACjBC,KAAO,IAAIF,mBACfE,KAAKC,MAAQF,KACNC,4BAIYE,QAEfF,KAAO,IAAIF,eACfE,KAAKC,MAAQE,EAAE,SAAWD,IACD,IAArBF,KAAKD,KAAKK,cAEPJ,KAGXK,SAASC,OAAQC,cACRD,OAAQ,OACHE,KAAOC,KAAKV,KAAKW,KAAKH,cACvBC,YAGLF,OAASE,KAAKG,eAEXL,OAAOM,MAIdb,kBAAgBU,KAAKR,MACrBC,gBAAcO,KAAKJ,SAASI,KAAKI,IAAI,gBACrCC,mBAAiBL,KAAKJ,SAASI,KAAKI,IAAI,mBACxCE,qBAAmBN,KAAKJ,SAASI,KAAKO,SAAS,6BAC/CC,yBAAuBR,KAAKJ,SAASI,KAAKS,aAAa,oBACvDC,sBAAoBV,KAAKJ,SAASI,KAAKW,MAAM,kBAC7CC,oBAAkBZ,KAAKJ,SAASI,KAAKW,MAAM,oBAC3CE,uBAAqBb,KAAKJ,SAASI,KAAKW,MAAM,kBAG9CL,YAAQQ,iBAAmBtB,MAAMS,KAAK,6BAA6BE,IAAIW,YACvEN,gBAAYO,qBAAuBvB,MAAMS,KAAK,oBAAoBE,IAAIY,gBACtEH,WAAOI,gBAAkBxB,MAAMS,KAAK,oBAAoBE,IAAIa,WAC5DX,UAAMY,eAAiBzB,MAAMS,KAAK,mBAAmBE,IAAIc,yBAE9CC,UAEXxB,EAAEyB,KAAKzB,EAAE,iBAAiB,SAAU0B,SAAUC,UACtC9B,KAAOF,YAAYiC,gBAAgBD,KAAKE,OAC5CL,SAAS3B,KAAM6B,aAIvBI,wCAGsBC,gBAAgBzB,KAAKV,MAAM,SAASoC,iBACxChC,EAAEgC,iBAAiBC,QAAQ,MACjC1B,KAAK,gBAAgBC,QAAQ0B,kBAG9BxC,QAAQY,KAAKP,SACfH,KAAKuC,uBAGAC,QACVC,IAAIC,WAAW,oBAAqB,kBAC/BC,MAAKC,eACEC,OAAOC,QAAQF,WAAW,CACX7C,YAAYgD,kBAAkBP,OAAOH,QAAQ,cAEnDH,uCAaC/B,GAAI6C,SAAUC,QAASC,YAAanB,KAAMoB,UAO5DlD,KANAmD,OAASjD,UACRiD,SACDA,QAAS,oBAAWtD,UACxBmD,QAAO,OAAaG,OAKbC,mBAAUC,iBAAiBN,SAAUC,SACvCN,MAAKY,WAACC,KAACA,KAADC,GAAOA,4BAEAC,mBAAmB,0BAA2BF,KAAMC,UAGxDE,SAAWvD,EAAE,SAAWgD,QAE9BnD,KAAOF,YAAYgD,kBAAkBY,cAEjCC,QAAUxD,EAAEuD,UAAU,GAAGE,cAAc,mBACtCD,QAGDA,QAAQE,YAAc,SAAUC,OAE5BC,QAAQC,IAAI,iBAAmBb,QAC/BW,MAAMG,aAAaC,QAAQ,OAAQ,aAAgBf,SALvDY,QAAQI,MAAM,sEASAC,KAAK,KAAM,KAAMC,+BAAmBX,UACtDA,SAAShD,KAAK,kBAAkB4D,sCACdC,aAAapE,EAAEuD,UAAU,IAE3CA,SAAShD,KAAK,UAAUC,QAAQ6D,GAAG,SAC/B,SAASV,OACLA,MAAMW,iBACN3E,YAAYmC,OAAO9B,EAAEM,UAYxBwC,cACDc,QAAQC,IAAI,uBACZN,SAAShD,KAAK,SAASgE,OACvBhB,SAAShD,KAAK,cAAcgE,QAqB5B5C,KAAM,CACNiC,QAAQC,IAAI,gCACRW,QAAU,EAGd7C,KAAK8C,SAASC,SAAQ,SAASC,YAAaC,kBAEpCC,SAAW9B,KAAK+B,kBAAkBH,YAAYI,OAE9CC,iBAAmB,CAACd,+BAAkBe,cAAcC,sBAAsBrF,KAAKD,KAAM4E,UAAWK,WACpGM,QAAQC,IAAIJ,kBACPzC,MAAK,gBAOrB8C,OAAOrB,oCAA6BA"}