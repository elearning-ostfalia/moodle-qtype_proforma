{"version":3,"file":"task.min.js","sources":["../../src/taskeditor/task.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n /**\n * Helper functions for reading and writen task\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     eCULT-Team of Ostfalia University, K.Borm\n */\n\nimport $ from 'jquery';\nimport {TaskClass, TaskFile, TaskModelSolution, TaskFileRef, TaskTest, T_VISIBLE} from \"./taskdata\";\nimport {testIDs} from \"./test\";\nimport {setErrorMessage, clearErrorMessage, generateUUID} from \"./util\";\nimport {FileWrapper} from \"./file\";\nimport {TestWrapper } from \"./test\";\nimport {ModelSolutionWrapper } from \"./modelsol\";\nimport * as taskeditorconfig from \"./config\";\nimport {relinkFiles} from \"./zipper\";\nimport {TestFileReference, FileReferenceList,ModelSolutionFileReference } from \"./filereflist\";\nimport * as Str from 'core/str';\nimport Notification, {exception as displayException} from 'core/notification';\n\n\nexport class InputError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = 'InputError';\n    }\n}\n\nfunction switchToTab(hash) {\n    const tab = document.querySelector('.nav-link[href=\"' + hash + '\"]');\n    if (tab) {\n        tab.click();\n    }\n}\n\nfunction addRequired(elem) {\n    console.log('missing input for required element found');\n    console.log(elem);\n    elem.focus();\n    elem.classList.add('is-invalid');\n    elem.classList.add('form-control');\n\n    let sibling = document.createElement('div');\n    sibling.classList.add('form-control-feedback');\n    sibling.classList.add('invalid-feedback');\n    elem.after(sibling);\n\n    return Str.get_string('err_required', 'form')\n        .then((string) => {\n            sibling.innerHTML = string;\n        });\n}\n\nfunction isInputComplete() {\n    console.log('check input');\n\n    // Remove all previously set required hints\n    document.querySelectorAll(\".proforma-taskeditor .is-invalid\").forEach(item => {  // check whether filenames are provided\n        item.classList.remove('is-invalid');\n        item.classList.remove('form-control');\n    });\n    document.querySelectorAll(\".proforma-taskeditor .invalid-feedback\").forEach(item => {  // check whether filenames are provided\n        item.remove();\n    });\n\n    let incomplete = false;\n    const inputField = document.querySelector(\"#id_name\");\n    if (inputField.value.trim() === '') {\n        let header = document.querySelector('a[href=\"#id_generalheadercontainer\"]');\n        if (header) {\n            // Expand general header in order to make name visible\n            if (header.getAttribute('aria-expanded') === \"false\") {\n                header.click();\n            }\n        }\n\n        // Mark as required because the moodle validation is not reached\n        // when this function fails, but if it does not fail\n        // the question name is missing for successive execution.\n        addRequired(inputField);\n        incomplete = true;\n    }\n\n/*\n    if ((typeof $(\"#proforma-model-solution-section .xml_file_id\")[0] === \"undefined\") ||      //  check for missing form values\n        ModelSolutionFileReference.getInstance().getCountFilerefs() === 0) {\n        // (typeof $(\".xml_model-solution_fileref\")[0] === \"undefined\")) {\n        setErrorMessage(\"Required elements are missing. \" +\n            \"At least one model solution element and its \" +\n            \"corresponding file element must be provided. \");\n        return false;\n    }\n*/\n\n\n    if (document.querySelectorAll('.xml_test').length < 1) {\n        Str.get_string('errmissingtest', 'qtype_proforma')\n            .then(localtext => {\n                alert(localtext);\n            });\n\n        return false;\n    }\n\n\n    // Special handling for the response filename in the question input fields.\n    // If the user chose 'editor' as response type a 'response filename'\n    // is required. But this input field has no rule 'required'\n    // as it is not required for other types. So this cannot be required when invisible.\n    // In this case the whole input is lost (TODO: autosave without checking).\n    if (document.querySelector('#id_responseformat')) {\n        const format = document.querySelector('#id_responseformat').value;\n        console.log(format);\n        if (format === 'editor') {\n            const filename = document.querySelector('#id_responsefilename');\n            if (filename) {\n                console.log(filename.value);\n                if (filename.value.trim() === '') {\n                    addRequired(filename);\n                    incomplete = true;\n                }\n            } else {\n                console.error('cannot find response filename');\n            }\n        }\n    } else {\n        console.error('cannot find response format select');\n    }\n\n\n    document.querySelectorAll(\".xml_file_filename\").forEach(item => {  // check whether filenames are provided\n        if (!item.value) {\n            switchToTab('#proforma-files-section');\n            addRequired(item);\n            incomplete = true;\n        }\n    });\n    document.querySelectorAll(\".xml_test_title\").forEach(item => {  // check whether filenames are provided\n        if (!item.value) {\n            switchToTab('#proforma-tests-section');\n            addRequired(item);\n            incomplete = true;\n        }\n    });\n\n\n\n    let query = \"#proforma-model-solution-section .xml_fileref_filename\";\n    document.querySelectorAll(query).forEach(item => {  // check whether referenced filenames exists\n        if (!item.value) {\n            switchToTab('#proforma-model-solution-section');\n            addRequired(item);\n            incomplete = true;\n        }\n    });\n\n    document.querySelectorAll('#proforma-tests-section .xml_test_weight').forEach(item => {  // check whether referenced filenames exists\n        if (!item.value) {\n            switchToTab('#proforma-tests-section');\n            addRequired(item);\n            incomplete = true;\n        }\n    });\n\n    query = \"#proforma-tests-section .xml_fileref_filename\";\n    document.querySelectorAll(query).forEach(item => {   // check whether referenced filenames exists\n        if (!item.value) {\n            let label = item.closest('tr').querySelector('label');\n            if (label.querySelectorAll('.red').length !== 0) {\n                switchToTab('#proforma-tests-section');\n                addRequired(item);\n                incomplete = true;\n            }\n        }\n    });\n\n    // todo: this should be part of the configuration\n    $.each($(\".xml_entry_point\"), function(index, item) {   // check whether main-class exists\n        if (!item.value) {\n            switchToTab('#proforma-tests-section');\n            addRequired(item);\n            incomplete = true;\n        }\n    });\n    document.querySelectorAll(\".xml_pr_CS_warnings\").forEach(item => {\n        // console.log(item.value);\n        if (!item.value) {\n            switchToTab('#proforma-tests-section');\n            addRequired(item);\n            incomplete = true;\n        }\n    });\n\n    if (incomplete)\n        return false;\n\n    let sumweight = 0.0;\n    document.querySelectorAll('#proforma-tests-section .xml_test_weight').forEach(item => {  // check whether referenced filenames exists\n        // console.log(item.value);\n        sumweight += parseFloat(item.value);\n    });\n    console.log('sumweight = ' + sumweight);\n    if (sumweight <= 0) {\n        Str.get_string('sumweightzero', 'qtype_proforma')\n            .then(content => {\n                switchToTab('#proforma-tests-section');\n                alert(content);\n            });\n        incomplete = true;\n    }\n\n    // console.log('result');\n    // console.log(!incomplete);\n\n    return (!incomplete);\n}\n\n\n// on document ready...:\n\n///////////////////////////////////////////////////////// function: convertToXML\n\n\n\n\n\n/**\n * writes data from UI elements to xml string\n */\nexport function convertToXML() {\n    // Fake promise in order to be used in chain\n    const promise = Promise.resolve(0);\n    return promise.then(() => {\n        const t0 = performance.now();\n        clearErrorMessage();\n        let taskXml = undefined;\n\n        // check input\n        if (!isInputComplete()) {\n            // With Promise reject the special type of error is not detected in the catch clause.\n            // So a normal throw without reject is used here.\n            // return Promise.reject(new InputError('invalid input => cannot create task.xml'));\n            console.log('input is incomplete => cannot create task.xml');\n            throw new InputError('invalid input => cannot create task.xml');\n            // return null;\n        }\n        console.log('input is ok => create task.xml');\n\n        // PRE PROCESSING\n        // copy data to task class\n        let task = new TaskClass();\n        task.title = $(\"#id_name\").val();\n        task.comment = '';\n        task.description = $(\"#id_questiontexteditable\").val();\n        task.proglang = $('#xml_programming-language').val();\n        task.proglang = task.proglang.trim();\n        // console.log('READ FROM UI: ' + task.proglang);\n        task.proglangVersion = $(\"#xml_programming-language-\" + task.proglang).val();\n        // console.log('READ FROM UI VERSION: ' + task.proglangVersion);\n        task.parentuuid = null;\n        //task.uuid = $(\"#xml_uuid\").val();\n        //if (!task.uuid)\n        task.uuid = generateUUID();\n        task.lang = 'en'; // $(\"#xml_lang\").val();\n        task.sizeSubmission = 0; // $(\"#xml_submission_size\").val();\n        task.filenameRegExpSubmission = ''; // $(\".xml_restrict_filename\").first().val();\n\n\n        /*\n        task.title = $(\"#xml_title\").val();\n        task.comment = $(\"#xml_task_internal_description\").find('.xml_internal_description').val();\n        task.description = descriptionEditor.getValue();\n        task.lang = $(\"#xml_lang\").val();\n        task.sizeSubmission = $(\"#xml_submission_size\").val();\n        task.filenameRegExpSubmission = $(\".xml_restrict_filename\").first().val();\n         */\n\n        // write files\n        FileWrapper.doOnAllFiles(function(ui_file) {\n            let taskfile = new TaskFile();\n            taskfile.filename = ui_file.filename;\n            taskfile.fileclass = ui_file.class;\n            taskfile.id = ui_file.id;\n            taskfile.filetype = ui_file.type;\n            taskfile.comment = ui_file.comment;\n            taskfile.content = ui_file.text;\n            task.files[taskfile.id] = taskfile;\n        });\n\n        // write model solutions\n        ModelSolutionWrapper.doOnAll(function(ms) {\n            let modelSolution = new TaskModelSolution();\n            modelSolution.id = ms.id;\n            modelSolution.comment = ms.comment;\n            modelSolution.description = ms.description;\n            let counter = 0;\n            ModelSolutionFileReference.getInstance().doOnAll(function(id) {\n                modelSolution.filerefs[counter++] = new TaskFileRef(id);\n                task.files[id].visible = T_VISIBLE.DELAYED;\n            }, ms.root);\n\n            //readFileRefs(xmlReader, modelSolution, thisNode);\n            task.modelsolutions[modelSolution.id] = modelSolution;\n        })\n\n        // write tests\n        TestWrapper.doOnAll(function(uiTest, index) {\n            let test = new TaskTest();\n            test.id = uiTest.id;\n            test.title = uiTest.title;\n            test.testtype = uiTest.testtype;\n            test.comment = uiTest.comment;\n            test.description = uiTest.description;\n            test.weight = uiTest.weight;\n            test.framework = uiTest.framework;\n\n            let counter = 0;\n            // TODO: geht über alle Test-Filerefs, sollte er nur über die\n            // des entsprechenden Tests gehen?\n            TestFileReference.getInstance().doOnAll(function(id) {\n                if (id) {\n                    test.filerefs[counter++] = new TaskFileRef(id);\n                    // console.log(\"Test ID\" + id);\n                    task.files[id].usedByGrader = true;\n                }\n            }, uiTest.root);\n\n            console.log('*** look for test config');\n            console.log(test);\n            $.each(taskeditorconfig.testInfos, function(index, configItem) {\n                // search for appropriate configuration instance\n                if (!configItem.matches(test, task.proglang)) {\n                    return;\n                }\n\n                // console.log('everything matches');\n                console.log(configItem);\n                if (test.configItem !== undefined && test.configItem !== configItem) {\n                    // configuration already found\n                    let params = {\n                        'title': test.title,\n                        'config': test.configItem.title\n                    };\n                    Str.get_string('errtestconfigambiguous', 'qtype_proforma', params)\n                        .then(content => alert(content));\n/*                    console.log('Warning: test configuration for test \"' + test.title + '\" is not unique. \\n' +\n                        'Assume ' + test.configItem.title + ',\\n' +\n                        'but ' + configItem.title + ' is also matching.');*/\n                    return;\n                }\n\n                test.configItem = configItem;\n                test.uiElement = uiTest;\n            });\n            console.log('*** config lookup complete');\n            if (test.configItem === undefined) {\n                alert('cannot determine test configuration for test \"' + test.title + '\"');\n            }\n\n            //readFileRefs(xmlReader, modelSolution, thisNode);\n            //console.log('convertToXML: create ' + test.title);\n            // note that the test element is stored at the index position not at the test id position\n            // (in order to keep the sort order from user interface)\n            task.tests[index] = test;\n        })\n\n        /*\n            SubmissionFileList.doOnAll(function(filename, regexp, optional) {\n                let restrict = new TaskFileRestriction(filename, !optional, regexp?T_FILERESTRICTION_FORMAT.POSIX:null);\n                task.fileRestrictions.push(restrict);\n            });\n        */\n        /*\n        if (USE_VISIBLES) {\n            VisibleFileReference.getInstance().doOnAllIds(function(id, displayMode) {\n                task.files[id].visible = T_VISIBLE.YES;\n                task.files[id].usageInLms = displayMode;\n            });\n        } else {\n            DownloadableFileReference.getInstance().doOnNonEmpty(function(id) {\n                task.files[id].visible = T_VISIBLE.YES;\n                task.files[id].usageInLms = T_LMS_USAGE.DOWNLOAD;\n            });\n            task.codeskeleton = codeskeleton.getValue();\n        }*/\n\n\n        taskXml = task.writeXml();\n        const t1 = performance.now();\n        console.log(\"Call to convertToXML took \" + (t1 - t0) + \" milliseconds.\")\n        console.log('Size of task is ' + taskXml.length);\n        return taskXml;\n    });\n}\n\n\nexport async function readAndDisplayXml(taskXml) {\n    // console.log(taskXml);\n    let task = new TaskClass();\n\n    function createMs(item, index) {\n        return ModelSolutionWrapper.createFromTemplate(item.id, item.description, item.comment, item, task);\n    }\n\n    function createFile(item, index) {\n        // let ui_file = FileWrapper.create(item.id);\n        return FileWrapper.createFromTemplate(item.id)\n            .then(ui_file => {\n                // console.log('fileform ' + item.id + ' has been created');\n                ui_file.filename = item.filename;\n                ui_file.class = item.fileclass;\n                ui_file.type = item.filetype;\n                ui_file.comment = item.comment;\n                if (ui_file.type === 'embedded')\n                    ui_file.text = item.content;\n                if (item.id) {\n                    relinkFiles();\n                }\n                return ui_file;\n            });\n    }\n\n    function createTest(item, index) {\n        testIDs[item.id] = 1;\n\n        let ui_test;\n        let the_configitem;\n        console.log('iterate through all configured test templates, look for ' + item.testtype);\n        $.each(taskeditorconfig.testInfos, function(index, configItem) {\n            if (!configItem.matches(item, task.proglang)) {\n                return;\n            }\n            if (ui_test) {\n                let params = {\n                    'title': item.title,\n                    'config': the_configitem.title\n                };\n/*                    console.log('Warning: test configuration for test \"' + item.title + '\" is not unique. \\n' +\n                    'Assume ' + the_configitem.title + ',\\n' +\n                    'but ' + configItem.title + ' is also matching.');*/\n                Str.get_string('errtestconfigambiguous', 'qtype_proforma', params)\n                    .then(content => alert(content));\n                return null;\n            }\n            console.log('found ' + configItem.title);\n            let context = configItem.getTemplateContext();\n            context['testtitle'] = item.title;\n            if (item.weight) {\n                context['weight'] = item.weight;\n            }\n            context['description'] = item.description;\n            context['comment'] = item.comment;\n\n            task.readTestConfig(taskXml, item.id, configItem, context);\n            // console.log('context for test template ');\n            // console.log(context);\n\n            the_configitem = configItem;\n            ui_test = TestWrapper.createFromTemplate(item.id,\n                configItem.getMustacheTemplate(), context, true, item, task);\n        });\n\n        if (!ui_test) {\n            setErrorMessage(\"Test '\" + item.title + \"' not imported, testtype and framework unsupported\");\n            testIDs[item.id] = 0;\n            return null;\n        } else {\n            return ui_test;\n        }\n    }\n/*\n    function createFileRestriction(item, index) {\n        if (index > 0) {\n            // create new row\n            SubmissionFileList.getInstance().appendRow();\n        }\n\n        SubmissionFileList.getInstance().setLastRowContent(item.restriction, !item.required,\n            item.format===T_FILERESTRICTION_FORMAT.POSIX);\n    }\n*/\n    if (taskXml.length === 0) {\n        setErrorMessage(\"Task.xml is empty.\");\n        return;\n    }\n\n    const templateroot = $(\"#templatedropzone\");\n    const multmediaroot = $(\"#multimediadropzone\");\n    const downloadroot = $(\"#downloaddropzone\");\n    const visibleroot = $(\"#visiblefiledropzone\");\n\n    // TODO: check version\n    // TODO: validate??\n    task.readXml(taskXml);\n\n/*\n    $(\"#xml_task_internal_description\").find('.xml_internal_description').val(task.comment);\n    $(\"#xml_uuid\").val(task.uuid);\n    $(\"#xml_submission_size\").val(task.sizeSubmission);\n    $(\"#xml_restrict_filename\").val(task.filenameRegExpSubmission);\n */\n\n    console.log(task.proglang);\n    console.log(task.proglangVersion);\n    let proglangElement = $(\"#xml_programming-language\");\n    proglangElement.val(task.proglang.toLowerCase());\n    proglangElement.trigger('change');\n    proglangElement.prop( \"disabled\", true );\n    let versionElement = document.getElementById(\"xml_programming-language-\" + task.proglang.toLowerCase());\n    if (!versionElement) {\n        console.error('cannot find element #xml_programming-language-' + task.proglang.toLowerCase());\n    } else {\n        if (versionElement.options.length > 0) {\n            // If version element contains options then check version\n            versionElement.value = task.proglangVersion;\n            if (versionElement.value !== task.proglangVersion) {\n                if (task.proglangVersion === undefined ||\n                    task.proglangVersion === null ||\n                    task.proglangVersion.trim() === ''\n                ) {\n                    switch (task.proglang.toLowerCase()) {\n                        case 'python':\n                            // Set programming version to 3\n                            task.proglangVersion = '3';\n                            break;\n                    }\n                }\n            }\n            if (versionElement.value !== task.proglangVersion) {\n                Str.get_string('invalidproglang', 'qtype_proforma')\n                    .then(content => alert(content + ' ' + task.proglangVersion));\n            }\n        }\n    }\n\n    let filepromises = [];\n    let refpromises = [];\n    task.files.forEach(file => {\n        filepromises.push(createFile(file));\n    });\n    return Promise.all(filepromises)\n        .then(() => {\n            console.log('** all files are created => create tests');\n            task.tests.forEach(item =>\n                refpromises.push(createTest(item))\n            );\n            console.log('=> create model solution(s)');\n            task.modelsolutions.forEach(item =>\n                refpromises.push(createMs(item))\n            );\n\n            // fill filename lists in empty file refences\n            console.log('=> wait');\n            return Promise.all(refpromises);\n        })\n        .then(() => {\n            console.log('** all tests and model sols are created => add referenced files');\n            FileReferenceList.updateAllFilenameLists();\n            console.log('=> finished');\n        });\n//        .fail(Notification.exception);\n\n\n    // task.fileRestrictions.forEach(createFileRestriction);\n\n    // POST PROCESSING\n\n    // special handling for visisble files:\n    /*\n    // add dummy file references\n    let indexTemplate = 0;\n    let indexDownload = 0;\n    let indexMultmedia = 0;\n    let indexVisible = 0;\n\n    task.files.forEach(function(item) {\n        if (item.visible === T_VISIBLE.YES) {\n            if (USE_VISIBLES) {\n                VisibleFileReference.getInstance().setFilenameOnCreation(visibleroot, indexVisible, item.filename);\n                VisibleFileReference.getInstance().setDisplayMode(visibleroot, indexVisible++, item.usageInLms);\n            } else {\n                switch (item.usageInLms) {\n                    case T_LMS_USAGE.EDIT:\n                        //alert('??? hier sollte man nicht hinkommen');\n                        if (indexTemplate === 0) {\n                            codeskeleton.setValue(item.content);\n                            indexTemplate++;\n                            //$(\"#code_template\").val('Hier kommt der Code rein');\n                        } else\n                            DownloadableFileReference.getInstance().setFilenameOnCreation(downloadroot, indexDownload++, item.filename);\n//                            TemplateFileReference.getInstance().setFilenameOnCreation(templateroot, indexTemplate++, item.filename);\n                        break;\n                    case T_LMS_USAGE.DISPLAY:\n                        // create as download file\n//                        MultimediaFileReference.getInstance().setFilenameOnCreation(multmediaroot, indexMultmedia++, item.filename);\n//                        break;\n                    case T_LMS_USAGE.DOWNLOAD:\n                        DownloadableFileReference.getInstance().setFilenameOnCreation(downloadroot, indexDownload++, item.filename);\n                        break;\n                }\n            }\n        }\n    });\n\n     */\n\n    // fill filename lists in empty file refences\n    // FileReferenceList.updateAllFilenameLists();\n}"],"names":["Promise","resolve","then","t0","performance","now","taskXml","console","log","document","querySelectorAll","forEach","item","classList","remove","incomplete","inputField","querySelector","value","trim","header","getAttribute","click","addRequired","length","Str","get_string","localtext","alert","format","filename","error","switchToTab","query","closest","each","index","sumweight","parseFloat","content","isInputComplete","InputError","task","TaskClass","title","val","comment","description","proglang","proglangVersion","parentuuid","uuid","lang","sizeSubmission","filenameRegExpSubmission","doOnAllFiles","ui_file","taskfile","TaskFile","fileclass","class","id","filetype","type","text","files","doOnAll","ms","modelSolution","TaskModelSolution","counter","getInstance","filerefs","TaskFileRef","visible","T_VISIBLE","DELAYED","root","modelsolutions","uiTest","test","TaskTest","testtype","weight","framework","usedByGrader","taskeditorconfig","testInfos","configItem","matches","undefined","uiElement","params","tests","writeXml","t1","readXml","proglangElement","toLowerCase","trigger","prop","versionElement","getElementById","options","filepromises","refpromises","file","push","FileWrapper","createFromTemplate","all","ui_test","the_configitem","context","getTemplateContext","readTestConfig","TestWrapper","getMustacheTemplate","createTest","ModelSolutionWrapper","createMs","updateAllFilenameLists","Error","constructor","message","name","hash","tab","elem","focus","add","sibling","createElement","after","string","innerHTML"],"mappings":"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"}