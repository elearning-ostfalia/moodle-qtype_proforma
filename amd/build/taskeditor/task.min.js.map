{"version":3,"file":"task.min.js","sources":["../../src/taskeditor/task.js"],"sourcesContent":["// This file is part of ProFormA Question Type for Moodle\n//\n// ProFormA Question Type for Moodle is free software:\n// you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with ProFormA Question Type for Moodle.\n// If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Helper functions for zipping and unzipping task\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     // This file is part of ProFormA Question Type for Moodle\n //\n // ProFormA Question Type for Moodle is free software:\n // you can redistribute it and/or modify\n // it under the terms of the GNU General Public License as published by\n // the Free Software Foundation, either version 3 of the License, or\n // (at your option) any later version.\n //\n // ProFormA Question Type for Moodle is distributed in the hope that it will be useful,\n // but WITHOUT ANY WARRANTY; without even the implied warranty of\n // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n // GNU General Public License for more details.\n //\n // You should have received a copy of the GNU General Public License\n // along with ProFormA Question Type for Moodle.\n // If not, see <http://www.gnu.org/licenses/>.\n\n /**\n * Helper functions for reading and writen task\n *\n * @package    qtype\n * @subpackage proforma\n * @copyright  2023 Ostfalia Hochschule fuer angewandte Wissenschaften\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @author     eCULT-Team of Ostfalia University, K.Borm\n */\n\nimport $ from 'jquery';\nimport {TaskClass, TaskFile, TaskModelSolution, TaskFileRef, TaskTest, T_VISIBLE} from \"./taskdata\";\nimport {testIDs} from \"./test\";\nimport {setErrorMessage, clearErrorMessage, generateUUID} from \"./util\";\nimport {FileWrapper} from \"./file\";\nimport {TestWrapper } from \"./test\";\nimport {ModelSolutionWrapper } from \"./modelsol\";\nimport * as taskeditorconfig from \"./config\";\nimport {relinkFiles} from \"./zipper\";\nimport {TestFileReference, FileReferenceList,ModelSolutionFileReference } from \"./filereflist\";\nimport * as Str from 'core/str';\nimport {readXMLWithLock} from \"./helper\";\nimport Notification, {exception as displayException} from 'core/notification';\n\n\nfunction switchToTab(hash) {\n    const tab = document.querySelector('.nav-link[href=\"' + hash + '\"]');\n    if (tab) {\n        tab.click();\n    }\n}\n\nfunction addRequired(elem) {\n    elem.focus();\n    elem.classList.add('is-invalid');\n    elem.classList.add('form-control');\n\n    let sibling = document.createElement('div');\n    sibling.classList.add('form-control-feedback');\n    sibling.classList.add('invalid-feedback');\n    elem.after(sibling);\n\n    return Str.get_string('err_required', 'form')\n        .then((string) => {\n            sibling.innerHTML = string;\n        });\n}\n\nfunction isInputComplete() {\n    console.log('check input');\n    let inputField = $(\"#id_name\");\n    if (!inputField.val()) {\n        // setErrorMessage(\"Task description is empty.\");\n        // switch to appropriate tab and set focus\n        let header = document.querySelector('a[href=\"#id_generalheadercontainer\"]');\n        if (header) {\n            // Expand general header in order to make name visible\n            if (header.getAttribute('aria-expanded') === \"false\") {\n                header.click();\n            }\n        }\n\n        inputField.focus();\n        Str.get_string('errmissingquestioninput', 'qtype_proforma')\n            .then(localtext => {\n                alert(localtext);\n            });\n        return false;\n    }\n\n/*\n    if ((typeof $(\"#proforma-model-solution-section .xml_file_id\")[0] === \"undefined\") ||      //  check for missing form values\n        ModelSolutionFileReference.getInstance().getCountFilerefs() === 0) {\n        // (typeof $(\".xml_model-solution_fileref\")[0] === \"undefined\")) {\n        setErrorMessage(\"Required elements are missing. \" +\n            \"At least one model solution element and its \" +\n            \"corresponding file element must be provided. \");\n        return false;\n    }\n*/\n\n\n    if (document.querySelectorAll('.xml_test').length < 1) {\n        Str.get_string('errmissingtest', 'qtype_proforma')\n            .then(localtext => {\n                alert(localtext);\n            });\n\n        return false;\n    }\n\n    document.querySelectorAll(\".proforma-taskeditor .is-invalid\").forEach(item => {  // check whether filenames are provided\n        item.classList.remove('is-invalid');\n        item.classList.remove('form-control');\n    });\n    document.querySelectorAll(\".proforma-taskeditor .invalid-feedback\").forEach(item => {  // check whether filenames are provided\n        item.remove();\n    });\n\n\n    let returnFromFunction = false;\n    document.querySelectorAll(\".xml_file_filename\").forEach(item => {  // check whether filenames are provided\n        if (!item.value) {\n            switchToTab('#proforma-files-section');\n            addRequired(item);\n            returnFromFunction = true;\n        }\n    });\n    document.querySelectorAll(\".xml_test_title\").forEach(item => {  // check whether filenames are provided\n        if (!item.value) {\n            switchToTab('#proforma-tests-section');\n            addRequired(item);\n            returnFromFunction = true;\n        }\n    });\n\n    document.querySelectorAll(\".xml_pr_CS_warnings\").forEach(item => {\n        console.log(item.value);\n        if (!item.value) {\n            switchToTab('#proforma-tests-section');\n            addRequired(item);\n            returnFromFunction = true;\n        }\n    });\n\n    let query = \"#proforma-model-solution-section .xml_fileref_filename\";\n    document.querySelectorAll(query).forEach(item => {  // check whether referenced filenames exists\n        if (!item.value) {\n            switchToTab('#proforma-model-solution-section');\n            addRequired(item);\n            returnFromFunction = true;\n        }\n    });\n\n    document.querySelectorAll('#proforma-tests-section .xml_test_weight').forEach(item => {  // check whether referenced filenames exists\n        if (!item.value) {\n            switchToTab('#proforma-tests-section');\n            addRequired(item);\n            returnFromFunction = true;\n        }\n    });\n\n    query = \"#proforma-tests-section .xml_fileref_filename\";\n    document.querySelectorAll(query).forEach(item => {   // check whether referenced filenames exists\n        if (!item.value) {\n            let label = item.closest('tr').querySelector('label');\n            if (label.querySelectorAll('.red').length !== 0) {\n                switchToTab('#proforma-tests-section');\n                addRequired(item);\n                returnFromFunction = true;\n            }\n        }\n    });\n\n    // todo: this should be part of the configuration\n    $.each($(\".xml_ju_mainclass\"), function(index, item) {   // check whether main-class exists\n        if (!item.value) {\n            switchToTab('#proforma-tests-section');\n            addRequired(item);\n            returnFromFunction = true;\n        }\n    });\n    $.each($(\".xml_u_mainclass\"), function(index, item) {   // check whether main-class exists\n        if (!item.value) {\n            switchToTab('#proforma-tests-section');\n            addRequired(item);\n            // setErrorMessage(\"Run command is missing.\");\n            returnFromFunction = true;\n        }\n    });\n\n    if (returnFromFunction)\n        return false;\n\n    let sumweight = 0.0;\n    document.querySelectorAll('#proforma-tests-section .xml_test_weight').forEach(item => {  // check whether referenced filenames exists\n        // console.log(item.value);\n        sumweight += parseFloat(item.value);\n    });\n    console.log('sumweight = ' + sumweight);\n    if (sumweight <= 0) {\n        Str.get_string('sumweightzero', 'qtype_proforma')\n            .then(content => alert(content));\n        returnFromFunction = true;\n    }\n\n    // console.log('result');\n    // console.log(!returnFromFunction);\n\n    return (!returnFromFunction);\n}\n\n\n// on document ready...:\n\n///////////////////////////////////////////////////////// function: convertToXML\n\n\n\n\n\n/**\n * writes data from UI elements to xml string\n */\nexport function convertToXML() {\n    // Fake promise in order to be used in chain\n    const promise = Promise.resolve(0);\n    return promise.then(() => {\n        const t0 = performance.now();\n        clearErrorMessage();\n        let taskXml = undefined;\n\n        // check input\n        if (!isInputComplete()) {\n            reject(new Error('invalid input => cannot create task.xml'));\n            // console.error('invalid input => cannot create task.xml');\n            // return null;\n        }\n\n        // PRE PROCESSING\n        // copy data to task class\n        let task = new TaskClass();\n        task.title = $(\"#id_name\").val();\n        task.comment = '';\n        task.description = $(\"#id_questiontexteditable\").val();\n        task.proglang = $('#xml_programming-language').val();\n        task.proglang = task.proglang.trim();\n        // console.log('READ FROM UI: ' + task.proglang);\n        task.proglangVersion = $(\"#xml_programming-language-\" + task.proglang).val();\n        // console.log('READ FROM UI VERSION: ' + task.proglangVersion);\n        task.parentuuid = null;\n        //task.uuid = $(\"#xml_uuid\").val();\n        //if (!task.uuid)\n        task.uuid = generateUUID();\n        task.lang = 'en'; // $(\"#xml_lang\").val();\n        task.sizeSubmission = 0; // $(\"#xml_submission_size\").val();\n        task.filenameRegExpSubmission = ''; // $(\".xml_restrict_filename\").first().val();\n\n\n        /*\n        task.title = $(\"#xml_title\").val();\n        task.comment = $(\"#xml_task_internal_description\").find('.xml_internal_description').val();\n        task.description = descriptionEditor.getValue();\n        task.lang = $(\"#xml_lang\").val();\n        task.sizeSubmission = $(\"#xml_submission_size\").val();\n        task.filenameRegExpSubmission = $(\".xml_restrict_filename\").first().val();\n         */\n\n        // write files\n        FileWrapper.doOnAllFiles(function(ui_file) {\n            let taskfile = new TaskFile();\n            taskfile.filename = ui_file.filename;\n            taskfile.fileclass = ui_file.class;\n            taskfile.id = ui_file.id;\n            taskfile.filetype = ui_file.type;\n            taskfile.comment = ui_file.comment;\n            taskfile.content = ui_file.text;\n            task.files[taskfile.id] = taskfile;\n        });\n\n        // write model solutions\n        ModelSolutionWrapper.doOnAll(function(ms) {\n            let modelSolution = new TaskModelSolution();\n            modelSolution.id = ms.id;\n            modelSolution.comment = ms.comment;\n            modelSolution.description = ms.description;\n            let counter = 0;\n            ModelSolutionFileReference.getInstance().doOnAll(function(id) {\n                modelSolution.filerefs[counter++] = new TaskFileRef(id);\n                task.files[id].visible = T_VISIBLE.DELAYED;\n            }, ms.root);\n\n            //readFileRefs(xmlReader, modelSolution, thisNode);\n            task.modelsolutions[modelSolution.id] = modelSolution;\n        })\n\n        // write tests\n        TestWrapper.doOnAll(function(uiTest, index) {\n            let test = new TaskTest();\n            test.id = uiTest.id;\n            test.title = uiTest.title;\n            test.testtype = uiTest.testtype;\n            test.comment = uiTest.comment;\n            test.description = uiTest.description;\n            test.weight = uiTest.weight;\n\n            let counter = 0;\n            // TODO: geht über alle Test-Filerefs, sollte er nur über die\n            // des entsprechenden Tests gehen?\n            TestFileReference.getInstance().doOnAll(function(id) {\n                if (id) {\n                    test.filerefs[counter++] = new TaskFileRef(id);\n                    console.log(\"Test ID\" + id);\n                    task.files[id].usedByGrader = true;\n                }\n            }, uiTest.root);\n\n            console.log('*** look for test config');\n            console.log(test);\n            $.each(taskeditorconfig.testInfos, function(index, configItem) {\n                // search for appropriate writexml function\n\n                if (configItem.testType !== test.testtype) {\n                    // testtype does not match\n                    return;\n                }\n                console.log('testtype match');\n                console.log(configItem);\n                if (configItem.proglang !== undefined) {\n                    console.log('check proglang');\n                    console.log(task.proglang);\n                    if (!configItem.proglang.includes(task.proglang)) {\n                        console.log('proglang does not match');\n                        // Language does not match\n                        return;\n                    }\n                }\n\n                console.log('everything matches');\n                if (test.configItem !== undefined) {\n                    // configuration already found\n                    alert('Warning: test configuration for test \"' + test.title + '\" is not unique. \\n' +\n                        'Assume ' + test.configItem.title);\n                    return;\n                }\n\n                test.configItem = configItem;\n                test.uiElement = uiTest;\n            });\n            console.log('*** config lookup complete');\n            if (test.configItem === undefined) {\n                alert('cannot determine test configuration for test \"' + test.title + '\"');\n            }\n\n            //readFileRefs(xmlReader, modelSolution, thisNode);\n            //console.log('convertToXML: create ' + test.title);\n            // note that the test element is stored at the index position not at the test id position\n            // (in order to keep the sort order from user interface)\n            task.tests[index] = test;\n        })\n\n        /*\n            SubmissionFileList.doOnAll(function(filename, regexp, optional) {\n                let restrict = new TaskFileRestriction(filename, !optional, regexp?T_FILERESTRICTION_FORMAT.POSIX:null);\n                task.fileRestrictions.push(restrict);\n            });\n        */\n        /*\n        if (USE_VISIBLES) {\n            VisibleFileReference.getInstance().doOnAllIds(function(id, displayMode) {\n                task.files[id].visible = T_VISIBLE.YES;\n                task.files[id].usageInLms = displayMode;\n            });\n        } else {\n            DownloadableFileReference.getInstance().doOnNonEmpty(function(id) {\n                task.files[id].visible = T_VISIBLE.YES;\n                task.files[id].usageInLms = T_LMS_USAGE.DOWNLOAD;\n            });\n            task.codeskeleton = codeskeleton.getValue();\n        }*/\n\n\n        taskXml = task.writeXml();\n        const t1 = performance.now();\n        console.log(\"Call to convertToXML took \" + (t1 - t0) + \" milliseconds.\")\n        console.log('Size of task is ' + taskXml.length);\n        return taskXml;\n    });\n}\n\n\nexport async function readAndDisplayXml(taskXml) {\n    // console.log(taskXml);\n    let task = new TaskClass();\n\n    function createMs(item, index) {\n        return ModelSolutionWrapper.createFromTemplate(item.id, item.description, item.comment, item, task);\n    }\n\n    function createFile(item, index) {\n        // let ui_file = FileWrapper.create(item.id);\n        return FileWrapper.createFromTemplate(item.id)\n            .then(ui_file => {\n                // console.log('fileform ' + item.id + ' has been created');\n                ui_file.filename = item.filename;\n                ui_file.class = item.fileclass;\n                ui_file.type = item.filetype;\n                ui_file.comment = item.comment;\n                if (ui_file.type === 'embedded')\n                    ui_file.text = item.content;\n                if (item.id) {\n                    relinkFiles();\n                }\n                return ui_file;\n            });\n    }\n\n    function createTest(item, index) {\n        testIDs[item.id] = 1;\n\n        let ui_test;\n        let the_configitem;\n        console.log('iterate through all configured test templates, look for ' + item.testtype);\n        $.each(taskeditorconfig.testInfos, function(index, configItem) {\n            // console.log(configItem);\n            if (item.testtype === configItem.testType) {\n                // Check if proglang is set in configured test. If true then compare\n                // Check Programming language\n                if (configItem.proglang !== undefined) {\n                    if (!configItem.proglang.includes(task.proglang)) {\n                        // Language does not match\n                        // console.log('language does not match');\n                        return;\n                    }\n                }\n                if (ui_test) {\n                    let params = {\n                        'title': item.title,\n                        'config': the_configitem.title\n                    };\n                    Str.get_string('errtestconfigambiguous', 'qtype_proforma', params)\n                        .then(content => alert(content));\n                    return;\n                }\n                console.log('found ' + configItem.title);\n                let context = configItem.getTemplateContext();\n                context['testtitle'] = item.title;\n                if (item.weight) {\n                    context['weight'] = item.weight;\n                }\n                context['description'] = item.description;\n                context['comment'] = item.comment;\n\n                task.readTestConfig(taskXml, item.id, configItem, context);\n                // console.log('context for test template ');\n                // console.log(context);\n\n                the_configitem = configItem;\n                ui_test = TestWrapper.createFromTemplate(item.id,\n                    configItem.getMustacheTemplate(), context, true, item, task);\n            }\n        });\n\n\n/*\n        if (!ui_test) {\n            // try alternative test types\n            $.each(taskeditorconfig.testInfos, function(index, configItem) {\n                $.each(configItem.alternativeTesttypes, function(index, alternative) {\n                    if (!ui_test && item.testtype === alternative) {\n                        ui_test = TestWrapper.create(item.id, item.title, configItem, item.weight);\n                        task.readTestConfig(taskXml, item.id, configItem, ui_test.root);\n                        ui_test.comment = item.comment;\n                        ui_test.description = item.description;\n                    }\n                });\n            });\n        }\n*/\n\n        if (!ui_test) {\n            setErrorMessage(\"Test '\" + item.title + \"' not imported, testtype and framework unsupported\");\n            testIDs[item.id] = 0;\n            return null;\n        } else {\n            return ui_test;\n        }\n    }\n/*\n    function createFileRestriction(item, index) {\n        if (index > 0) {\n            // create new row\n            SubmissionFileList.getInstance().appendRow();\n        }\n\n        SubmissionFileList.getInstance().setLastRowContent(item.restriction, !item.required,\n            item.format===T_FILERESTRICTION_FORMAT.POSIX);\n    }\n*/\n    if (taskXml.length === 0) {\n        setErrorMessage(\"Task.xml is empty.\");\n        return;\n    }\n\n    // resetInputFields();\n\n    const templateroot = $(\"#templatedropzone\");\n    const multmediaroot = $(\"#multimediadropzone\");\n    const downloadroot = $(\"#downloaddropzone\");\n    const visibleroot = $(\"#visiblefiledropzone\");\n\n    // TODO: check version\n    // TODO: validate??\n    task.readXml(taskXml);\n\n\n/*    descriptionEditor.setValue(task.description);\n    $(\"#xml_title\").val(task.title);\n    $(\"#xml_task_internal_description\").find('.xml_internal_description').val(task.comment);\n    $(\"#xml_uuid\").val(task.uuid);\n    $(\"#xml_submission_size\").val(task.sizeSubmission);\n    $(\"#xml_restrict_filename\").val(task.filenameRegExpSubmission);\n\n */\n\n    console.log(task.proglang);\n    console.log(task.proglangVersion);\n    let proglangElement = $(\"#xml_programming-language\");\n    proglangElement.val(task.proglang.toLowerCase());\n    proglangElement.trigger('change');\n    proglangElement.prop( \"disabled\", true );\n    let versionElement = document.getElementById(\"xml_programming-language-\" + task.proglang.toLowerCase());\n    if (!versionElement) {\n        console.error('cannot find element #xml_programming-language-' + task.proglang.toLowerCase());\n    } else {\n        if (versionElement.options.length > 0) {\n            // If version element contains options then check version\n            versionElement.value = task.proglangVersion;\n            if (versionElement.value !== task.proglangVersion) {\n                if (task.proglangVersion === undefined ||\n                    task.proglangVersion === null ||\n                    task.proglangVersion.trim() === ''\n                ) {\n                    switch (task.proglang.toLowerCase()) {\n                        case 'python':\n                            // Set programming version to 3\n                            task.proglangVersion = '3';\n                            break;\n                    }\n                }\n            }\n            if (versionElement.value !== task.proglangVersion) {\n                Str.get_string('invalidproglang', 'qtype_proforma')\n                    .then(content => alert(content + ' ' + task.proglangVersion));\n            }\n        }\n    }\n\n\n    /*\n\n    codeskeleton.setValue(task.codeskeleton);\n*/\n\n    let filepromises = [];\n    let refpromises = [];\n    task.files.forEach(file => {\n        filepromises.push(createFile(file));\n    });\n    return Promise.all(filepromises)\n        .then(() => {\n            console.log('** all files are created => create tests');\n            task.tests.forEach(item =>\n                refpromises.push(createTest(item))\n            );\n            console.log('=> create model solution(s)');\n            task.modelsolutions.forEach(item =>\n                refpromises.push(createMs(item))\n            );\n\n            // fill filename lists in empty file refences\n            console.log('=> wait');\n            return Promise.all(refpromises);\n        })\n        .then(() => {\n            console.log('** all tests and model sols are created => add referenced files');\n            FileReferenceList.updateAllFilenameLists();\n            console.log('=> finished');\n        });\n//        .fail(Notification.exception);\n\n\n    // task.fileRestrictions.forEach(createFileRestriction);\n\n    // POST PROCESSING\n\n    // special handling for visisble files:\n    /*\n    // add dummy file references\n    let indexTemplate = 0;\n    let indexDownload = 0;\n    let indexMultmedia = 0;\n    let indexVisible = 0;\n\n    task.files.forEach(function(item) {\n        if (item.visible === T_VISIBLE.YES) {\n            if (USE_VISIBLES) {\n                VisibleFileReference.getInstance().setFilenameOnCreation(visibleroot, indexVisible, item.filename);\n                VisibleFileReference.getInstance().setDisplayMode(visibleroot, indexVisible++, item.usageInLms);\n            } else {\n                switch (item.usageInLms) {\n                    case T_LMS_USAGE.EDIT:\n                        //alert('??? hier sollte man nicht hinkommen');\n                        if (indexTemplate === 0) {\n                            codeskeleton.setValue(item.content);\n                            indexTemplate++;\n                            //$(\"#code_template\").val('Hier kommt der Code rein');\n                        } else\n                            DownloadableFileReference.getInstance().setFilenameOnCreation(downloadroot, indexDownload++, item.filename);\n//                            TemplateFileReference.getInstance().setFilenameOnCreation(templateroot, indexTemplate++, item.filename);\n                        break;\n                    case T_LMS_USAGE.DISPLAY:\n                        // create as download file\n//                        MultimediaFileReference.getInstance().setFilenameOnCreation(multmediaroot, indexMultmedia++, item.filename);\n//                        break;\n                    case T_LMS_USAGE.DOWNLOAD:\n                        DownloadableFileReference.getInstance().setFilenameOnCreation(downloadroot, indexDownload++, item.filename);\n                        break;\n                }\n            }\n        }\n    });\n\n     */\n\n    // fill filename lists in empty file refences\n    // FileReferenceList.updateAllFilenameLists();\n}"],"names":["switchToTab","hash","tab","document","querySelector","click","addRequired","elem","focus","classList","add","sibling","createElement","after","Str","get_string","then","string","innerHTML","Promise","resolve","t0","performance","now","taskXml","console","log","inputField","val","header","getAttribute","localtext","alert","querySelectorAll","length","forEach","item","remove","returnFromFunction","value","query","closest","each","index","sumweight","parseFloat","content","isInputComplete","reject","Error","task","TaskClass","title","comment","description","proglang","trim","proglangVersion","parentuuid","uuid","lang","sizeSubmission","filenameRegExpSubmission","doOnAllFiles","ui_file","taskfile","TaskFile","filename","fileclass","class","id","filetype","type","text","files","doOnAll","ms","modelSolution","TaskModelSolution","counter","getInstance","filerefs","TaskFileRef","visible","T_VISIBLE","DELAYED","root","modelsolutions","uiTest","test","TaskTest","testtype","weight","usedByGrader","taskeditorconfig","testInfos","configItem","testType","undefined","includes","uiElement","tests","writeXml","t1","readXml","proglangElement","toLowerCase","trigger","prop","versionElement","getElementById","options","error","filepromises","refpromises","file","push","FileWrapper","createFromTemplate","all","ui_test","the_configitem","params","context","getTemplateContext","readTestConfig","TestWrapper","getMustacheTemplate","createTest","ModelSolutionWrapper","createMs","updateAllFilenameLists"],"mappings":"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"}